=begin comment

spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.0
Contact: david@spoonacular.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# analyze_a_recipe_search_query
#
# Analyze a Recipe Search Query
# 
# @param string $q The recipe search query. (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'The recipe search query.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'analyze_a_recipe_search_query' } = { 
        summary => 'Analyze a Recipe Search Query',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub analyze_a_recipe_search_query {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling analyze_a_recipe_search_query");
    }

    # parse inputs
    my $_resource_path = '/recipes/queries/analyze';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# analyze_recipe_instructions
#
# Analyze Recipe Instructions
# 
# @param string $instructions The instructions text. (required)
{
    my $params = {
    'instructions' => {
        data_type => 'string',
        description => 'The instructions text.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'analyze_recipe_instructions' } = { 
        summary => 'Analyze Recipe Instructions',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub analyze_recipe_instructions {
    my ($self, %args) = @_;

    # verify the required parameter 'instructions' is set
    unless (exists $args{'instructions'}) {
      croak("Missing the required parameter 'instructions' when calling analyze_recipe_instructions");
    }

    # parse inputs
    my $_resource_path = '/recipes/analyzeInstructions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'instructions'} ) {
                $form_params->{'instructions'} = $self->{api_client}->to_form_value($args{'instructions'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# autocomplete_ingredient_search
#
# Autocomplete Ingredient Search
# 
# @param string $query The query - a partial or full ingredient name. (required)
# @param double $number The number of results to return (between 1 and 100). (optional)
# @param boolean $meta_information Whether to return more meta information about the ingredients. (optional)
# @param boolean $intolerances A comma-separated list of intolerances. All found ingredients must not cause problems for people with one of the given tolerances. See a full list of supported intolerances. (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The query - a partial or full ingredient name.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of results to return (between 1 and 100).',
        required => '0',
    },
    'meta_information' => {
        data_type => 'boolean',
        description => 'Whether to return more meta information about the ingredients.',
        required => '0',
    },
    'intolerances' => {
        data_type => 'boolean',
        description => 'A comma-separated list of intolerances. All found ingredients must not cause problems for people with one of the given tolerances. See a full list of supported intolerances.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'autocomplete_ingredient_search' } = { 
        summary => 'Autocomplete Ingredient Search',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub autocomplete_ingredient_search {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling autocomplete_ingredient_search");
    }

    # parse inputs
    my $_resource_path = '/food/ingredients/autocomplete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'meta_information'}) {
        $query_params->{'metaInformation'} = $self->{api_client}->to_query_value($args{'meta_information'});
    }

    # query params
    if ( exists $args{'intolerances'}) {
        $query_params->{'intolerances'} = $self->{api_client}->to_query_value($args{'intolerances'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# autocomplete_menu_item_search
#
# Autocomplete Menu Item Search
# 
# @param string $query The (partial) search query. (required)
# @param double $number The number of results to return (between 1 and 25). (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The (partial) search query.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of results to return (between 1 and 25).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'autocomplete_menu_item_search' } = { 
        summary => 'Autocomplete Menu Item Search',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub autocomplete_menu_item_search {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling autocomplete_menu_item_search");
    }

    # parse inputs
    my $_resource_path = '/food/menuItems/suggest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# autocomplete_product_search
#
# Autocomplete Product Search
# 
# @param string $query The (partial) search query. (required)
# @param double $number The number of results to return (between 1 and 25). (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The (partial) search query.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of results to return (between 1 and 25).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'autocomplete_product_search' } = { 
        summary => 'Autocomplete Product Search',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub autocomplete_product_search {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling autocomplete_product_search");
    }

    # parse inputs
    my $_resource_path = '/food/products/suggest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# autocomplete_recipe_search
#
# Autocomplete Recipe Search
# 
# @param string $query The query to be autocompleted. (required)
# @param double $number The number of results to return (between 1 and 25). (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The query to be autocompleted.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of results to return (between 1 and 25).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'autocomplete_recipe_search' } = { 
        summary => 'Autocomplete Recipe Search',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub autocomplete_recipe_search {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling autocomplete_recipe_search");
    }

    # parse inputs
    my $_resource_path = '/recipes/autocomplete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# classify_cuisine
#
# Classify Cuisine
# 
# @param string $title The title of the recipe. (required)
# @param string $ingredient_list The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
{
    my $params = {
    'title' => {
        data_type => 'string',
        description => 'The title of the recipe.',
        required => '1',
    },
    'ingredient_list' => {
        data_type => 'string',
        description => 'The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'classify_cuisine' } = { 
        summary => 'Classify Cuisine',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub classify_cuisine {
    my ($self, %args) = @_;

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling classify_cuisine");
    }

    # verify the required parameter 'ingredient_list' is set
    unless (exists $args{'ingredient_list'}) {
      croak("Missing the required parameter 'ingredient_list' when calling classify_cuisine");
    }

    # parse inputs
    my $_resource_path = '/recipes/cuisine';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'ingredient_list'} ) {
                $form_params->{'ingredientList'} = $self->{api_client}->to_form_value($args{'ingredient_list'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# classify_grocery_product
#
# Classify Grocery Product
# 
# @param InlineObject8 $inline_object8  (required)
# @param string $locale The locale of the returned category, supported is en_US and en_GB. (optional)
{
    my $params = {
    'inline_object8' => {
        data_type => 'InlineObject8',
        description => '',
        required => '1',
    },
    'locale' => {
        data_type => 'string',
        description => 'The locale of the returned category, supported is en_US and en_GB.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'classify_grocery_product' } = { 
        summary => 'Classify Grocery Product',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub classify_grocery_product {
    my ($self, %args) = @_;

    # verify the required parameter 'inline_object8' is set
    unless (exists $args{'inline_object8'}) {
      croak("Missing the required parameter 'inline_object8' when calling classify_grocery_product");
    }

    # parse inputs
    my $_resource_path = '/food/products/classify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'locale'}) {
        $query_params->{'locale'} = $self->{api_client}->to_query_value($args{'locale'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'inline_object8'}) {
        $_body_data = $args{'inline_object8'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# classify_grocery_product_bulk
#
# Classify Grocery Product Bulk
# 
# @param object $body  (required)
# @param string $locale The locale of the returned category, supported is en_US and en_GB. (optional)
{
    my $params = {
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'locale' => {
        data_type => 'string',
        description => 'The locale of the returned category, supported is en_US and en_GB.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'classify_grocery_product_bulk' } = { 
        summary => 'Classify Grocery Product Bulk',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub classify_grocery_product_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling classify_grocery_product_bulk");
    }

    # parse inputs
    my $_resource_path = '/food/products/classifyBatch';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'locale'}) {
        $query_params->{'locale'} = $self->{api_client}->to_query_value($args{'locale'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# convert_amounts
#
# Convert Amounts
# 
# @param string $ingredient_name The ingredient which you want to convert. (required)
# @param double $source_amount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
# @param string $source_unit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
# @param string $target_unit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
{
    my $params = {
    'ingredient_name' => {
        data_type => 'string',
        description => 'The ingredient which you want to convert.',
        required => '1',
    },
    'source_amount' => {
        data_type => 'double',
        description => 'The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.',
        required => '1',
    },
    'source_unit' => {
        data_type => 'string',
        description => 'The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;',
        required => '1',
    },
    'target_unit' => {
        data_type => 'string',
        description => 'The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'convert_amounts' } = { 
        summary => 'Convert Amounts',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub convert_amounts {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_name' is set
    unless (exists $args{'ingredient_name'}) {
      croak("Missing the required parameter 'ingredient_name' when calling convert_amounts");
    }

    # verify the required parameter 'source_amount' is set
    unless (exists $args{'source_amount'}) {
      croak("Missing the required parameter 'source_amount' when calling convert_amounts");
    }

    # verify the required parameter 'source_unit' is set
    unless (exists $args{'source_unit'}) {
      croak("Missing the required parameter 'source_unit' when calling convert_amounts");
    }

    # verify the required parameter 'target_unit' is set
    unless (exists $args{'target_unit'}) {
      croak("Missing the required parameter 'target_unit' when calling convert_amounts");
    }

    # parse inputs
    my $_resource_path = '/recipes/convert';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ingredient_name'}) {
        $query_params->{'ingredientName'} = $self->{api_client}->to_query_value($args{'ingredient_name'});
    }

    # query params
    if ( exists $args{'source_amount'}) {
        $query_params->{'sourceAmount'} = $self->{api_client}->to_query_value($args{'source_amount'});
    }

    # query params
    if ( exists $args{'source_unit'}) {
        $query_params->{'sourceUnit'} = $self->{api_client}->to_query_value($args{'source_unit'});
    }

    # query params
    if ( exists $args{'target_unit'}) {
        $query_params->{'targetUnit'} = $self->{api_client}->to_query_value($args{'target_unit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# create_recipe_card
#
# Create Recipe Card
# 
# @param string $title The title of the recipe. (required)
# @param string $image The binary image of the recipe as jpg. (required)
# @param string $ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). (required)
# @param string $instructions The instructions to make the recipe. One step per line (separate lines with \\\\n). (required)
# @param double $ready_in_minutes The number of minutes it takes to get the recipe on the table. (required)
# @param double $servings The number of servings that you can make from the ingredients. (required)
# @param string $mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;). (required)
# @param string $background_image The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;). (required)
# @param string $author The author of the recipe. (optional)
# @param string $background_color The background color on the recipe card as a hex-string. (optional)
# @param string $font_color The font color on the recipe card as a hex-string. (optional)
# @param string $source The source of the recipe. (optional)
{
    my $params = {
    'title' => {
        data_type => 'string',
        description => 'The title of the recipe.',
        required => '1',
    },
    'image' => {
        data_type => 'string',
        description => 'The binary image of the recipe as jpg.',
        required => '1',
    },
    'ingredients' => {
        data_type => 'string',
        description => 'The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).',
        required => '1',
    },
    'instructions' => {
        data_type => 'string',
        description => 'The instructions to make the recipe. One step per line (separate lines with \\\\n).',
        required => '1',
    },
    'ready_in_minutes' => {
        data_type => 'double',
        description => 'The number of minutes it takes to get the recipe on the table.',
        required => '1',
    },
    'servings' => {
        data_type => 'double',
        description => 'The number of servings that you can make from the ingredients.',
        required => '1',
    },
    'mask' => {
        data_type => 'string',
        description => 'The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).',
        required => '1',
    },
    'background_image' => {
        data_type => 'string',
        description => 'The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).',
        required => '1',
    },
    'author' => {
        data_type => 'string',
        description => 'The author of the recipe.',
        required => '0',
    },
    'background_color' => {
        data_type => 'string',
        description => 'The background color on the recipe card as a hex-string.',
        required => '0',
    },
    'font_color' => {
        data_type => 'string',
        description => 'The font color on the recipe card as a hex-string.',
        required => '0',
    },
    'source' => {
        data_type => 'string',
        description => 'The source of the recipe.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_recipe_card' } = { 
        summary => 'Create Recipe Card',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub create_recipe_card {
    my ($self, %args) = @_;

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling create_recipe_card");
    }

    # verify the required parameter 'image' is set
    unless (exists $args{'image'}) {
      croak("Missing the required parameter 'image' when calling create_recipe_card");
    }

    # verify the required parameter 'ingredients' is set
    unless (exists $args{'ingredients'}) {
      croak("Missing the required parameter 'ingredients' when calling create_recipe_card");
    }

    # verify the required parameter 'instructions' is set
    unless (exists $args{'instructions'}) {
      croak("Missing the required parameter 'instructions' when calling create_recipe_card");
    }

    # verify the required parameter 'ready_in_minutes' is set
    unless (exists $args{'ready_in_minutes'}) {
      croak("Missing the required parameter 'ready_in_minutes' when calling create_recipe_card");
    }

    # verify the required parameter 'servings' is set
    unless (exists $args{'servings'}) {
      croak("Missing the required parameter 'servings' when calling create_recipe_card");
    }

    # verify the required parameter 'mask' is set
    unless (exists $args{'mask'}) {
      croak("Missing the required parameter 'mask' when calling create_recipe_card");
    }

    # verify the required parameter 'background_image' is set
    unless (exists $args{'background_image'}) {
      croak("Missing the required parameter 'background_image' when calling create_recipe_card");
    }

    # parse inputs
    my $_resource_path = '/recipes/visualizeRecipe';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'image'} ) {
        $form_params->{'image'} = [] unless defined $form_params->{'image'};
        push @{$form_params->{'image'}}, $args{'image'};
            }
    
    # form params
    if ( exists $args{'ingredients'} ) {
                $form_params->{'ingredients'} = $self->{api_client}->to_form_value($args{'ingredients'});
    }
    
    # form params
    if ( exists $args{'instructions'} ) {
                $form_params->{'instructions'} = $self->{api_client}->to_form_value($args{'instructions'});
    }
    
    # form params
    if ( exists $args{'ready_in_minutes'} ) {
                $form_params->{'readyInMinutes'} = $self->{api_client}->to_form_value($args{'ready_in_minutes'});
    }
    
    # form params
    if ( exists $args{'servings'} ) {
                $form_params->{'servings'} = $self->{api_client}->to_form_value($args{'servings'});
    }
    
    # form params
    if ( exists $args{'mask'} ) {
                $form_params->{'mask'} = $self->{api_client}->to_form_value($args{'mask'});
    }
    
    # form params
    if ( exists $args{'background_image'} ) {
                $form_params->{'backgroundImage'} = $self->{api_client}->to_form_value($args{'background_image'});
    }
    
    # form params
    if ( exists $args{'author'} ) {
                $form_params->{'author'} = $self->{api_client}->to_form_value($args{'author'});
    }
    
    # form params
    if ( exists $args{'background_color'} ) {
                $form_params->{'backgroundColor'} = $self->{api_client}->to_form_value($args{'background_color'});
    }
    
    # form params
    if ( exists $args{'font_color'} ) {
                $form_params->{'fontColor'} = $self->{api_client}->to_form_value($args{'font_color'});
    }
    
    # form params
    if ( exists $args{'source'} ) {
                $form_params->{'source'} = $self->{api_client}->to_form_value($args{'source'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# detect_food_in_text
#
# Detect Food in Text
# 
# @param string $text The text in which food items such as dish names and ingredients should be detected in. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text in which food items such as dish names and ingredients should be detected in.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'detect_food_in_text' } = { 
        summary => 'Detect Food in Text',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub detect_food_in_text {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling detect_food_in_text");
    }

    # parse inputs
    my $_resource_path = '/food/detect';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'text'} ) {
                $form_params->{'text'} = $self->{api_client}->to_form_value($args{'text'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# extract_recipe_from_website
#
# Extract Recipe from Website
# 
# @param string $url The URL of the recipe page. (required)
# @param boolean $force_extraction If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower. (optional)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The URL of the recipe page.',
        required => '1',
    },
    'force_extraction' => {
        data_type => 'boolean',
        description => 'If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_recipe_from_website' } = { 
        summary => 'Extract Recipe from Website',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub extract_recipe_from_website {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling extract_recipe_from_website");
    }

    # parse inputs
    my $_resource_path = '/recipes/extract';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'force_extraction'}) {
        $query_params->{'forceExtraction'} = $self->{api_client}->to_query_value($args{'force_extraction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# generate_meal_plan
#
# Generate Meal Plan
# 
# @param string $time_frame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
# @param double $target_calories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
# @param string $diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
# @param string $exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
{
    my $params = {
    'time_frame' => {
        data_type => 'string',
        description => 'Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.',
        required => '0',
    },
    'target_calories' => {
        data_type => 'double',
        description => 'What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.',
        required => '0',
    },
    'diet' => {
        data_type => 'string',
        description => 'Enter a diet that the meal plan has to adhere to. See a full list of supported diets.',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'A comma-separated list of allergens or ingredients that must be excluded.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_meal_plan' } = { 
        summary => 'Generate Meal Plan',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub generate_meal_plan {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/mealplans/generate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'time_frame'}) {
        $query_params->{'timeFrame'} = $self->{api_client}->to_query_value($args{'time_frame'});
    }

    # query params
    if ( exists $args{'target_calories'}) {
        $query_params->{'targetCalories'} = $self->{api_client}->to_query_value($args{'target_calories'});
    }

    # query params
    if ( exists $args{'diet'}) {
        $query_params->{'diet'} = $self->{api_client}->to_query_value($args{'diet'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_a_random_food_joke
#
# Get a Random Food Joke
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_a_random_food_joke' } = { 
        summary => 'Get a Random Food Joke',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_a_random_food_joke {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/food/jokes/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_analyzed_recipe_instructions
#
# Get Analyzed Recipe Instructions
# 
# @param double $id The recipe id. (required)
# @param boolean $step_breakdown Whether to break down the recipe steps even more. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'step_breakdown' => {
        data_type => 'boolean',
        description => 'Whether to break down the recipe steps even more.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_analyzed_recipe_instructions' } = { 
        summary => 'Get Analyzed Recipe Instructions',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_analyzed_recipe_instructions {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_analyzed_recipe_instructions");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/analyzedInstructions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'step_breakdown'}) {
        $query_params->{'stepBreakdown'} = $self->{api_client}->to_query_value($args{'step_breakdown'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_comparable_products
#
# Get Comparable Products
# 
# @param double $upc The UPC of the product for that you want to find comparable products. (required)
{
    my $params = {
    'upc' => {
        data_type => 'double',
        description => 'The UPC of the product for that you want to find comparable products.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_comparable_products' } = { 
        summary => 'Get Comparable Products',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_comparable_products {
    my ($self, %args) = @_;

    # verify the required parameter 'upc' is set
    unless (exists $args{'upc'}) {
      croak("Missing the required parameter 'upc' when calling get_comparable_products");
    }

    # parse inputs
    my $_resource_path = '/food/products/upc/{upc}/comparable';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'upc'}) {
        my $_base_variable = "{" . "upc" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'upc'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_conversation_suggests
#
# Get Conversation Suggests
# 
# @param string $query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
# @param double $number The number of suggestions to return (between 1 and 25). (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'A (partial) query from the user. The endpoint will return if it matches topics it can talk about.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of suggestions to return (between 1 and 25).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_conversation_suggests' } = { 
        summary => 'Get Conversation Suggests',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_conversation_suggests {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling get_conversation_suggests");
    }

    # parse inputs
    my $_resource_path = '/food/converse/suggest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_dish_pairing_for_wine
#
# Get Dish Pairing for Wine
# 
# @param string $wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
{
    my $params = {
    'wine' => {
        data_type => 'string',
        description => 'The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dish_pairing_for_wine' } = { 
        summary => 'Get Dish Pairing for Wine',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_dish_pairing_for_wine {
    my ($self, %args) = @_;

    # verify the required parameter 'wine' is set
    unless (exists $args{'wine'}) {
      croak("Missing the required parameter 'wine' when calling get_dish_pairing_for_wine");
    }

    # parse inputs
    my $_resource_path = '/food/wine/dishes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'wine'}) {
        $query_params->{'wine'} = $self->{api_client}->to_query_value($args{'wine'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_food_information
#
# Get Food Information
# 
# @param double $id The id of the food / ingredient. (required)
# @param double $amount The amount of that food. (optional)
# @param string $unit The unit for the given amount. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the food / ingredient.',
        required => '1',
    },
    'amount' => {
        data_type => 'double',
        description => 'The amount of that food.',
        required => '0',
    },
    'unit' => {
        data_type => 'string',
        description => 'The unit for the given amount.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_food_information' } = { 
        summary => 'Get Food Information',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_food_information {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_food_information");
    }

    # parse inputs
    my $_resource_path = '/food/ingredients/{id}/information';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'amount'}) {
        $query_params->{'amount'} = $self->{api_client}->to_query_value($args{'amount'});
    }

    # query params
    if ( exists $args{'unit'}) {
        $query_params->{'unit'} = $self->{api_client}->to_query_value($args{'unit'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_ingredient_substitutes
#
# Get Ingredient Substitutes
# 
# @param string $ingredient_name The name of the ingredient you want to replace. (required)
{
    my $params = {
    'ingredient_name' => {
        data_type => 'string',
        description => 'The name of the ingredient you want to replace.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_ingredient_substitutes' } = { 
        summary => 'Get Ingredient Substitutes',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_ingredient_substitutes {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_name' is set
    unless (exists $args{'ingredient_name'}) {
      croak("Missing the required parameter 'ingredient_name' when calling get_ingredient_substitutes");
    }

    # parse inputs
    my $_resource_path = '/food/ingredients/substitutes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ingredient_name'}) {
        $query_params->{'ingredientName'} = $self->{api_client}->to_query_value($args{'ingredient_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_ingredient_substitutes_by_id
#
# Get Ingredient Substitutes by ID
# 
# @param double $id The id of the ingredient you want substitutes for. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the ingredient you want substitutes for.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_ingredient_substitutes_by_id' } = { 
        summary => 'Get Ingredient Substitutes by ID',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_ingredient_substitutes_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_ingredient_substitutes_by_id");
    }

    # parse inputs
    my $_resource_path = '/food/ingredients/{id}/substitutes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_menu_item_information
#
# Get Menu Item Information
# 
# @param double $id The menu item id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The menu item id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_menu_item_information' } = { 
        summary => 'Get Menu Item Information',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_menu_item_information {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_menu_item_information");
    }

    # parse inputs
    my $_resource_path = '/food/menuItems/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_product_information
#
# Get Product Information
# 
# @param double $id The id of the packaged food product. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the packaged food product.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_product_information' } = { 
        summary => 'Get Product Information',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_product_information {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_product_information");
    }

    # parse inputs
    my $_resource_path = '/food/products/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_random_food_trivia
#
# Get Random Food Trivia
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_random_food_trivia' } = { 
        summary => 'Get Random Food Trivia',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_random_food_trivia {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/food/trivia/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_random_recipes
#
# Get Random Recipes
# 
# @param boolean $limit_license Whether the recipes should have an open license that allows for displaying with proper attribution. (optional)
# @param string $tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must adhere to. (optional)
# @param double $number The number of random recipes to be returned (between 1 and 100). (optional)
{
    my $params = {
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows for displaying with proper attribution.',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must adhere to.',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of random recipes to be returned (between 1 and 100).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_random_recipes' } = { 
        summary => 'Get Random Recipes',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_random_recipes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_recipe_equipment_by_id
#
# Get Recipe Equipment by ID
# 
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_equipment_by_id' } = { 
        summary => 'Get Recipe Equipment by ID',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_recipe_equipment_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_equipment_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/equipmentWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_recipe_information
#
# Get Recipe Information
# 
# @param double $id The id of the recipe. (required)
# @param boolean $include_nutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the recipe.',
        required => '1',
    },
    'include_nutrition' => {
        data_type => 'boolean',
        description => 'Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_information' } = { 
        summary => 'Get Recipe Information',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_recipe_information {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_information");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/information';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_nutrition'}) {
        $query_params->{'includeNutrition'} = $self->{api_client}->to_query_value($args{'include_nutrition'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_recipe_information_bulk
#
# Get Recipe Information Bulk
# 
# @param string $ids A comma-separated list of recipe ids. (required)
# @param boolean $include_nutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
{
    my $params = {
    'ids' => {
        data_type => 'string',
        description => 'A comma-separated list of recipe ids.',
        required => '1',
    },
    'include_nutrition' => {
        data_type => 'boolean',
        description => 'Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_information_bulk' } = { 
        summary => 'Get Recipe Information Bulk',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_recipe_information_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'ids' is set
    unless (exists $args{'ids'}) {
      croak("Missing the required parameter 'ids' when calling get_recipe_information_bulk");
    }

    # parse inputs
    my $_resource_path = '/recipes/informationBulk';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'include_nutrition'}) {
        $query_params->{'includeNutrition'} = $self->{api_client}->to_query_value($args{'include_nutrition'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_recipe_ingredients_by_id
#
# Get Recipe Ingredients by ID
# 
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_ingredients_by_id' } = { 
        summary => 'Get Recipe Ingredients by ID',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_recipe_ingredients_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_ingredients_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/ingredientWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_recipe_nutrition_by_id
#
# Get Recipe Nutrition by ID
# 
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_nutrition_by_id' } = { 
        summary => 'Get Recipe Nutrition by ID',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_recipe_nutrition_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_nutrition_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/nutritionWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_recipe_price_breakdown_by_id
#
# Get Recipe Price Breakdown by ID
# 
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_price_breakdown_by_id' } = { 
        summary => 'Get Recipe Price Breakdown by ID',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_recipe_price_breakdown_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_price_breakdown_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/priceBreakdownWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_similar_recipes
#
# Get Similar Recipes
# 
# @param double $id The id of the source recipe to which similar recipes should be found. (required)
# @param double $number The number of random recipes to be returned (between 1 and 100). (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the source recipe to which similar recipes should be found.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of random recipes to be returned (between 1 and 100).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_similar_recipes' } = { 
        summary => 'Get Similar Recipes',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_similar_recipes {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_similar_recipes");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/similar';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_wine_description
#
# Get Wine Description
# 
# @param string $wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. (required)
{
    my $params = {
    'wine' => {
        data_type => 'string',
        description => 'The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_wine_description' } = { 
        summary => 'Get Wine Description',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_wine_description {
    my ($self, %args) = @_;

    # verify the required parameter 'wine' is set
    unless (exists $args{'wine'}) {
      croak("Missing the required parameter 'wine' when calling get_wine_description");
    }

    # parse inputs
    my $_resource_path = '/food/wine/description';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'wine'}) {
        $query_params->{'wine'} = $self->{api_client}->to_query_value($args{'wine'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_wine_pairing
#
# Get Wine Pairing
# 
# @param string $food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). (required)
# @param double $max_price The maximum price for the specific wine recommendation in USD. (optional)
{
    my $params = {
    'food' => {
        data_type => 'string',
        description => 'The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).',
        required => '1',
    },
    'max_price' => {
        data_type => 'double',
        description => 'The maximum price for the specific wine recommendation in USD.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_wine_pairing' } = { 
        summary => 'Get Wine Pairing',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_wine_pairing {
    my ($self, %args) = @_;

    # verify the required parameter 'food' is set
    unless (exists $args{'food'}) {
      croak("Missing the required parameter 'food' when calling get_wine_pairing");
    }

    # parse inputs
    my $_resource_path = '/food/wine/pairing';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'food'}) {
        $query_params->{'food'} = $self->{api_client}->to_query_value($args{'food'});
    }

    # query params
    if ( exists $args{'max_price'}) {
        $query_params->{'maxPrice'} = $self->{api_client}->to_query_value($args{'max_price'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_wine_recommendation
#
# Get Wine Recommendation
# 
# @param string $wine The name of the wine to get a specific product recommendation for. (required)
# @param double $max_price The maximum price for the specific wine recommendation in USD. (optional)
# @param double $min_rating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
# @param double $number The number of wine recommendations expected (between 1 and 100). (optional)
{
    my $params = {
    'wine' => {
        data_type => 'string',
        description => 'The name of the wine to get a specific product recommendation for.',
        required => '1',
    },
    'max_price' => {
        data_type => 'double',
        description => 'The maximum price for the specific wine recommendation in USD.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'double',
        description => 'The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of wine recommendations expected (between 1 and 100).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_wine_recommendation' } = { 
        summary => 'Get Wine Recommendation',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_wine_recommendation {
    my ($self, %args) = @_;

    # verify the required parameter 'wine' is set
    unless (exists $args{'wine'}) {
      croak("Missing the required parameter 'wine' when calling get_wine_recommendation");
    }

    # parse inputs
    my $_resource_path = '/food/wine/recommendation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'wine'}) {
        $query_params->{'wine'} = $self->{api_client}->to_query_value($args{'wine'});
    }

    # query params
    if ( exists $args{'max_price'}) {
        $query_params->{'maxPrice'} = $self->{api_client}->to_query_value($args{'max_price'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'minRating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# guess_nutrition_by_dish_name
#
# Guess Nutrition by Dish Name
# 
# @param string $title The title of the dish. (required)
{
    my $params = {
    'title' => {
        data_type => 'string',
        description => 'The title of the dish.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'guess_nutrition_by_dish_name' } = { 
        summary => 'Guess Nutrition by Dish Name',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub guess_nutrition_by_dish_name {
    my ($self, %args) = @_;

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling guess_nutrition_by_dish_name");
    }

    # parse inputs
    my $_resource_path = '/recipes/guessNutrition';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# map_ingredients_to_grocery_products
#
# Map Ingredients to Grocery Products
# 
# @param object $body  (required)
{
    my $params = {
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'map_ingredients_to_grocery_products' } = { 
        summary => 'Map Ingredients to Grocery Products',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub map_ingredients_to_grocery_products {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling map_ingredients_to_grocery_products");
    }

    # parse inputs
    my $_resource_path = '/food/ingredients/map';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# parse_ingredients
#
# Parse Ingredients
# 
# @param string $ingredient_list The ingredient list of the recipe, one ingredient per line. (required)
# @param double $servings The number of servings that you can make from the ingredients. (required)
# @param boolean $include_nutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
{
    my $params = {
    'ingredient_list' => {
        data_type => 'string',
        description => 'The ingredient list of the recipe, one ingredient per line.',
        required => '1',
    },
    'servings' => {
        data_type => 'double',
        description => 'The number of servings that you can make from the ingredients.',
        required => '1',
    },
    'include_nutrition' => {
        data_type => 'boolean',
        description => 'Whether nutrition data should be added to correctly parsed ingredients.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'parse_ingredients' } = { 
        summary => 'Parse Ingredients',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub parse_ingredients {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_list' is set
    unless (exists $args{'ingredient_list'}) {
      croak("Missing the required parameter 'ingredient_list' when calling parse_ingredients");
    }

    # verify the required parameter 'servings' is set
    unless (exists $args{'servings'}) {
      croak("Missing the required parameter 'servings' when calling parse_ingredients");
    }

    # parse inputs
    my $_resource_path = '/recipes/parseIngredients';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'ingredient_list'} ) {
                $form_params->{'ingredientList'} = $self->{api_client}->to_form_value($args{'ingredient_list'});
    }
    
    # form params
    if ( exists $args{'servings'} ) {
                $form_params->{'servings'} = $self->{api_client}->to_form_value($args{'servings'});
    }
    
    # form params
    if ( exists $args{'include_nutrition'} ) {
                $form_params->{'includeNutrition'} = $self->{api_client}->to_form_value($args{'include_nutrition'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# quick_answer
#
# Quick Answer
# 
# @param string $q The nutrition-related question. (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'The nutrition-related question.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quick_answer' } = { 
        summary => 'Quick Answer',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub quick_answer {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling quick_answer");
    }

    # parse inputs
    my $_resource_path = '/recipes/quickAnswer';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_food_videos
#
# Search Food Videos
# 
# @param string $query The search query. (required)
# @param string $type The type of the recipes. See a full list of supported meal types. (optional)
# @param string $cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines. (optional)
# @param string $diet The diet to which the recipes must be compliant. See a full list of supported diets. (optional)
# @param string $include_ingredients A comma-separated list of ingredients that should/must be contained in the recipe. (optional)
# @param string $exclude_ingredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes. (optional)
# @param double $min_length Minimum video length in seconds. (optional)
# @param double $max_length Maximum video length in seconds. (optional)
# @param double $offset The number of results to skip (between 0 and 900). (optional)
# @param double $number The number of results to return (between 1 and 100). (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'The type of the recipes. See a full list of supported meal types.',
        required => '0',
    },
    'cuisine' => {
        data_type => 'string',
        description => 'The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.',
        required => '0',
    },
    'diet' => {
        data_type => 'string',
        description => 'The diet to which the recipes must be compliant. See a full list of supported diets.',
        required => '0',
    },
    'include_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients that should/must be contained in the recipe.',
        required => '0',
    },
    'exclude_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.',
        required => '0',
    },
    'min_length' => {
        data_type => 'double',
        description => 'Minimum video length in seconds.',
        required => '0',
    },
    'max_length' => {
        data_type => 'double',
        description => 'Maximum video length in seconds.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The number of results to skip (between 0 and 900).',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of results to return (between 1 and 100).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_food_videos' } = { 
        summary => 'Search Food Videos',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_food_videos {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_food_videos");
    }

    # parse inputs
    my $_resource_path = '/food/videos/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'cuisine'}) {
        $query_params->{'cuisine'} = $self->{api_client}->to_query_value($args{'cuisine'});
    }

    # query params
    if ( exists $args{'diet'}) {
        $query_params->{'diet'} = $self->{api_client}->to_query_value($args{'diet'});
    }

    # query params
    if ( exists $args{'include_ingredients'}) {
        $query_params->{'includeIngredients'} = $self->{api_client}->to_query_value($args{'include_ingredients'});
    }

    # query params
    if ( exists $args{'exclude_ingredients'}) {
        $query_params->{'excludeIngredients'} = $self->{api_client}->to_query_value($args{'exclude_ingredients'});
    }

    # query params
    if ( exists $args{'min_length'}) {
        $query_params->{'minLength'} = $self->{api_client}->to_query_value($args{'min_length'});
    }

    # query params
    if ( exists $args{'max_length'}) {
        $query_params->{'maxLength'} = $self->{api_client}->to_query_value($args{'max_length'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_grocery_products
#
# Search Grocery Products
# 
# @param string $query The search query. (required)
# @param double $min_calories The minimum number of calories the product must have. (optional)
# @param double $max_calories The maximum number of calories the product can have. (optional)
# @param double $min_carbs The minimum number of carbohydrates in grams the product must have. (optional)
# @param double $max_carbs The maximum number of carbohydrates in grams the product can have. (optional)
# @param double $min_protein The minimum number of protein in grams the product must have. (optional)
# @param double $max_protein The maximum number of protein in grams the product can have. (optional)
# @param double $min_fat The minimum number of fat in grams the product must have. (optional)
# @param double $max_fat The maximum number of fat in grams the product can have. (optional)
# @param double $offset The offset number for paging (between 0 and 990). (optional)
# @param double $number The number of expected results (between 1 and 100). (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '1',
    },
    'min_calories' => {
        data_type => 'double',
        description => 'The minimum number of calories the product must have.',
        required => '0',
    },
    'max_calories' => {
        data_type => 'double',
        description => 'The maximum number of calories the product can have.',
        required => '0',
    },
    'min_carbs' => {
        data_type => 'double',
        description => 'The minimum number of carbohydrates in grams the product must have.',
        required => '0',
    },
    'max_carbs' => {
        data_type => 'double',
        description => 'The maximum number of carbohydrates in grams the product can have.',
        required => '0',
    },
    'min_protein' => {
        data_type => 'double',
        description => 'The minimum number of protein in grams the product must have.',
        required => '0',
    },
    'max_protein' => {
        data_type => 'double',
        description => 'The maximum number of protein in grams the product can have.',
        required => '0',
    },
    'min_fat' => {
        data_type => 'double',
        description => 'The minimum number of fat in grams the product must have.',
        required => '0',
    },
    'max_fat' => {
        data_type => 'double',
        description => 'The maximum number of fat in grams the product can have.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The offset number for paging (between 0 and 990).',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of expected results (between 1 and 100).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_grocery_products' } = { 
        summary => 'Search Grocery Products',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_grocery_products {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_grocery_products");
    }

    # parse inputs
    my $_resource_path = '/food/products/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'min_calories'}) {
        $query_params->{'minCalories'} = $self->{api_client}->to_query_value($args{'min_calories'});
    }

    # query params
    if ( exists $args{'max_calories'}) {
        $query_params->{'maxCalories'} = $self->{api_client}->to_query_value($args{'max_calories'});
    }

    # query params
    if ( exists $args{'min_carbs'}) {
        $query_params->{'minCarbs'} = $self->{api_client}->to_query_value($args{'min_carbs'});
    }

    # query params
    if ( exists $args{'max_carbs'}) {
        $query_params->{'maxCarbs'} = $self->{api_client}->to_query_value($args{'max_carbs'});
    }

    # query params
    if ( exists $args{'min_protein'}) {
        $query_params->{'minProtein'} = $self->{api_client}->to_query_value($args{'min_protein'});
    }

    # query params
    if ( exists $args{'max_protein'}) {
        $query_params->{'maxProtein'} = $self->{api_client}->to_query_value($args{'max_protein'});
    }

    # query params
    if ( exists $args{'min_fat'}) {
        $query_params->{'minFat'} = $self->{api_client}->to_query_value($args{'min_fat'});
    }

    # query params
    if ( exists $args{'max_fat'}) {
        $query_params->{'maxFat'} = $self->{api_client}->to_query_value($args{'max_fat'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_grocery_products_by_upc
#
# Search Grocery Products by UPC
# 
# @param double $upc The product&#39;s UPC. (required)
{
    my $params = {
    'upc' => {
        data_type => 'double',
        description => 'The product&#39;s UPC.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_grocery_products_by_upc' } = { 
        summary => 'Search Grocery Products by UPC',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_grocery_products_by_upc {
    my ($self, %args) = @_;

    # verify the required parameter 'upc' is set
    unless (exists $args{'upc'}) {
      croak("Missing the required parameter 'upc' when calling search_grocery_products_by_upc");
    }

    # parse inputs
    my $_resource_path = '/food/products/upc/{upc}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'upc'}) {
        my $_base_variable = "{" . "upc" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'upc'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_menu_items
#
# Search Menu Items
# 
# @param string $query The search query. (required)
# @param double $min_calories The minimum number of calories the menu item must have. (optional)
# @param double $max_calories The maximum number of calories the menu item can have. (optional)
# @param double $min_carbs The minimum number of carbohydrates in grams the menu item must have. (optional)
# @param double $max_carbs The maximum number of carbohydrates in grams the menu item can have. (optional)
# @param double $min_protein The minimum number of protein in grams the menu item must have. (optional)
# @param double $max_protein The maximum number of protein in grams the menu item can have. (optional)
# @param double $min_fat The minimum number of fat in grams the menu item must have. (optional)
# @param double $max_fat The maximum number of fat in grams the menu item can have. (optional)
# @param double $offset The offset number for paging (between 0 and 990). (optional)
# @param double $number The number of expected results (between 1 and 10). (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '1',
    },
    'min_calories' => {
        data_type => 'double',
        description => 'The minimum number of calories the menu item must have.',
        required => '0',
    },
    'max_calories' => {
        data_type => 'double',
        description => 'The maximum number of calories the menu item can have.',
        required => '0',
    },
    'min_carbs' => {
        data_type => 'double',
        description => 'The minimum number of carbohydrates in grams the menu item must have.',
        required => '0',
    },
    'max_carbs' => {
        data_type => 'double',
        description => 'The maximum number of carbohydrates in grams the menu item can have.',
        required => '0',
    },
    'min_protein' => {
        data_type => 'double',
        description => 'The minimum number of protein in grams the menu item must have.',
        required => '0',
    },
    'max_protein' => {
        data_type => 'double',
        description => 'The maximum number of protein in grams the menu item can have.',
        required => '0',
    },
    'min_fat' => {
        data_type => 'double',
        description => 'The minimum number of fat in grams the menu item must have.',
        required => '0',
    },
    'max_fat' => {
        data_type => 'double',
        description => 'The maximum number of fat in grams the menu item can have.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The offset number for paging (between 0 and 990).',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of expected results (between 1 and 10).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_menu_items' } = { 
        summary => 'Search Menu Items',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_menu_items {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_menu_items");
    }

    # parse inputs
    my $_resource_path = '/food/menuItems/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'min_calories'}) {
        $query_params->{'minCalories'} = $self->{api_client}->to_query_value($args{'min_calories'});
    }

    # query params
    if ( exists $args{'max_calories'}) {
        $query_params->{'maxCalories'} = $self->{api_client}->to_query_value($args{'max_calories'});
    }

    # query params
    if ( exists $args{'min_carbs'}) {
        $query_params->{'minCarbs'} = $self->{api_client}->to_query_value($args{'min_carbs'});
    }

    # query params
    if ( exists $args{'max_carbs'}) {
        $query_params->{'maxCarbs'} = $self->{api_client}->to_query_value($args{'max_carbs'});
    }

    # query params
    if ( exists $args{'min_protein'}) {
        $query_params->{'minProtein'} = $self->{api_client}->to_query_value($args{'min_protein'});
    }

    # query params
    if ( exists $args{'max_protein'}) {
        $query_params->{'maxProtein'} = $self->{api_client}->to_query_value($args{'max_protein'});
    }

    # query params
    if ( exists $args{'min_fat'}) {
        $query_params->{'minFat'} = $self->{api_client}->to_query_value($args{'min_fat'});
    }

    # query params
    if ( exists $args{'max_fat'}) {
        $query_params->{'maxFat'} = $self->{api_client}->to_query_value($args{'max_fat'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_recipes
#
# Search Recipes
# 
# @param string $query The (natural language) recipe search query. (required)
# @param string $cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines. (optional)
# @param string $diet The diet to which the recipes must be compliant. See a full list of supported diets. (optional)
# @param string $exclude_ingredients An comma-separated list of ingredients or ingredient types that must not be contained in the recipes. (optional)
# @param string $intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances. (optional)
# @param double $offset The number of results to skip (between 0 and 900). (optional)
# @param double $number The number of results to return (between 1 and 100). (optional)
# @param boolean $limit_license Whether the recipes should have an open license that allows for displaying with proper attribution. (optional)
# @param boolean $instructions_required Whether the recipes must have instructions. (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The (natural language) recipe search query.',
        required => '1',
    },
    'cuisine' => {
        data_type => 'string',
        description => 'The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.',
        required => '0',
    },
    'diet' => {
        data_type => 'string',
        description => 'The diet to which the recipes must be compliant. See a full list of supported diets.',
        required => '0',
    },
    'exclude_ingredients' => {
        data_type => 'string',
        description => 'An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.',
        required => '0',
    },
    'intolerances' => {
        data_type => 'string',
        description => 'A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The number of results to skip (between 0 and 900).',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of results to return (between 1 and 100).',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows for displaying with proper attribution.',
        required => '0',
    },
    'instructions_required' => {
        data_type => 'boolean',
        description => 'Whether the recipes must have instructions.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes' } = { 
        summary => 'Search Recipes',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_recipes {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_recipes");
    }

    # parse inputs
    my $_resource_path = '/recipes/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'cuisine'}) {
        $query_params->{'cuisine'} = $self->{api_client}->to_query_value($args{'cuisine'});
    }

    # query params
    if ( exists $args{'diet'}) {
        $query_params->{'diet'} = $self->{api_client}->to_query_value($args{'diet'});
    }

    # query params
    if ( exists $args{'exclude_ingredients'}) {
        $query_params->{'excludeIngredients'} = $self->{api_client}->to_query_value($args{'exclude_ingredients'});
    }

    # query params
    if ( exists $args{'intolerances'}) {
        $query_params->{'intolerances'} = $self->{api_client}->to_query_value($args{'intolerances'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    # query params
    if ( exists $args{'instructions_required'}) {
        $query_params->{'instructionsRequired'} = $self->{api_client}->to_query_value($args{'instructions_required'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_recipes_by_ingredients
#
# Search Recipes by Ingredients
# 
# @param string $ingredients A comma-separated list of ingredients that the recipes should contain. (required)
# @param double $number The maximal number of recipes to return (between 1 and 100). Defaults to 10. (optional)
# @param boolean $limit_license Whether the recipes should have an open license that allows for displaying with proper attribution. (optional)
# @param double $ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
# @param boolean $ignore_pantry Whether to ignore pantry ingredients such as water, salt, flour etc. (optional)
{
    my $params = {
    'ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients that the recipes should contain.',
        required => '1',
    },
    'number' => {
        data_type => 'double',
        description => 'The maximal number of recipes to return (between 1 and 100). Defaults to 10.',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows for displaying with proper attribution.',
        required => '0',
    },
    'ranking' => {
        data_type => 'double',
        description => 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.',
        required => '0',
    },
    'ignore_pantry' => {
        data_type => 'boolean',
        description => 'Whether to ignore pantry ingredients such as water, salt, flour etc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes_by_ingredients' } = { 
        summary => 'Search Recipes by Ingredients',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_recipes_by_ingredients {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredients' is set
    unless (exists $args{'ingredients'}) {
      croak("Missing the required parameter 'ingredients' when calling search_recipes_by_ingredients");
    }

    # parse inputs
    my $_resource_path = '/recipes/findByIngredients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ingredients'}) {
        $query_params->{'ingredients'} = $self->{api_client}->to_query_value($args{'ingredients'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    # query params
    if ( exists $args{'ranking'}) {
        $query_params->{'ranking'} = $self->{api_client}->to_query_value($args{'ranking'});
    }

    # query params
    if ( exists $args{'ignore_pantry'}) {
        $query_params->{'ignorePantry'} = $self->{api_client}->to_query_value($args{'ignore_pantry'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_recipes_by_nutrients
#
# Search Recipes by Nutrients
# 
# @param double $min_carbs The minimum number of carbohydrates in grams the recipe must have. (optional)
# @param double $max_carbs The maximum number of carbohydrates in grams the recipe can have. (optional)
# @param double $min_protein The minimum number of protein in grams the recipe must have. (optional)
# @param double $max_protein The maximum number of protein in grams the recipe can have. (optional)
# @param double $min_calories The minimum number of calories the recipe must have. (optional)
# @param double $max_calories The maximum number of calories the recipe can have. (optional)
# @param double $min_fat The minimum number of fat in grams the recipe must have. (optional)
# @param double $max_fat The maximum number of fat in grams the recipe can have. (optional)
# @param double $min_alcohol The minimum number of alcohol in grams the recipe must have. (optional)
# @param double $max_alcohol The maximum number of alcohol in grams the recipe must have. (optional)
# @param double $min_caffeine The minimum number of milligrams of caffeine the recipe must have. (optional)
# @param double $max_caffeine The maximum number of alcohol in grams the recipe must have. (optional)
# @param double $min_copper The minimum number of copper in milligrams the recipe must have. (optional)
# @param double $max_copper The maximum number of copper in milligrams the recipe must have. (optional)
# @param double $min_calcium The minimum number of calcium in milligrams the recipe must have. (optional)
# @param double $max_calcium The maximum number of calcium in milligrams the recipe must have. (optional)
# @param double $min_choline The minimum number of choline in milligrams the recipe must have. (optional)
# @param double $max_choline The maximum number of choline in milligrams the recipe can have. (optional)
# @param double $min_cholesterol The minimum number of cholesterol in milligrams the recipe must have. (optional)
# @param double $max_cholesterol The maximum number of cholesterol in milligrams the recipe must have. (optional)
# @param double $min_fluoride The minimum number of fluoride in milligrams the recipe must have. (optional)
# @param double $max_fluoride The maximum number of fluoride in milligrams the recipe can have. (optional)
# @param double $min_saturated_fat The minimum number of saturated fat in grams the recipe must have. (optional)
# @param double $max_saturated_fat The maximum number of saturated fat in grams the recipe must have. (optional)
# @param double $min_vitamin_a The minimum number of Vitamin A in IU the recipe must have. (optional)
# @param double $max_vitamin_a The maximum number of Vitamin A in IU the recipe must have. (optional)
# @param double $min_vitamin_c The minimum number of Vitamin C milligrams the recipe must have. (optional)
# @param double $max_vitamin_c The maximum number of Vitamin C in milligrams the recipe can have. (optional)
# @param double $min_vitamin_d The minimum number of Vitamin D in micrograms the recipe must have. (optional)
# @param double $max_vitamin_d The maximum number of Vitamin D in micrograms the recipe must have. (optional)
# @param double $min_vitamin_e The minimum number of Vitamin E in milligrams the recipe must have. (optional)
# @param double $max_vitamin_e The maximum number of Vitamin E in milligrams the recipe must have. (optional)
# @param double $min_vitamin_k The minimum number of Vitamin K in micrograms the recipe must have. (optional)
# @param double $max_vitamin_k The maximum number of Vitamin K in micrograms the recipe must have. (optional)
# @param double $min_vitamin_b1 The minimum number of Vitamin B1 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b1 The maximum number of Vitamin B1 in milligrams the recipe must have. (optional)
# @param double $min_vitamin_b2 The minimum number of Vitamin B2 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b2 The maximum number of Vitamin B2 in milligrams the recipe must have. (optional)
# @param double $min_vitamin_b5 The minimum number of Vitamin B5 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b5 The maximum number of Vitamin B5 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b3 The minimum number of Vitamin B3 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b3 The maximum number of Vitamin B3 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b6 The minimum number of Vitamin B6 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b6 The maximum number of Vitamin B6 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b12 The minimum number of Vitamin B12 in micrograms the recipe must have. (optional)
# @param double $max_vitamin_b12 The maximum number of Vitamin B12 in micrograms the recipe must have. (optional)
# @param double $min_fiber The minimum number of fiber in grams the recipe must have. (optional)
# @param double $max_fiber The maximum number of fiber in grams the recipe must have. (optional)
# @param double $min_folate The minimum number of folate in grams the recipe must have. (optional)
# @param double $max_folate The maximum number of folate in grams the recipe must have. (optional)
# @param double $min_folic_acid The minimum number of folic acid in grams the recipe must have. (optional)
# @param double $max_folic_acid The maximum number of folic acid in grams the recipe must have. (optional)
# @param double $min_iodine The minimum number of Iodine in grams the recipe must have. (optional)
# @param double $max_iodine The maximum number of iodine in grams the recipe must have. (optional)
# @param double $min_iron The minimum number of iron in milligrams the recipe must have. (optional)
# @param double $max_iron The maximum number of iron in milligrams the recipe can have. (optional)
# @param double $min_magnesium The minimum number of magnesium in milligrams the recipe must have. (optional)
# @param double $max_magnesium The maximum number of magnesium in milligrams the recipe can have. (optional)
# @param double $min_manganese The minimum number of manganese in milligrams the recipe must have. (optional)
# @param double $max_manganese The maximum number of manganese in milligrams the recipe can have. (optional)
# @param double $min_phosphorus The minimum number of phosphorus in milligrams the recipe must have. (optional)
# @param double $max_phosphorus The maximum number of phosphorus in milligrams the recipe can have. (optional)
# @param double $min_potassium The minimum number of potassium in milligrams the recipe must have. (optional)
# @param double $max_potassium The maximum number of potassium in milligrams the recipe can have. (optional)
# @param double $min_selenium The minimum number of selenium in grams the recipe must have. (optional)
# @param double $max_selenium The maximum number of selenium in grams the recipe must have. (optional)
# @param double $min_sodium The minimum number of sodium in milligrams the recipe must have. (optional)
# @param double $max_sodium The maximum number of sodium in milligrams the recipe must have. (optional)
# @param double $min_sugar The minimum number of sugar in grams the recipe must have. (optional)
# @param double $max_sugar The maximum number of sugar in grams the recipe must have. (optional)
# @param double $min_zinc The minimum number of zinc in milligrams the recipe must have. (optional)
# @param double $max_zinc The maximum number of zinc in milligrams the recipe can have. (optional)
# @param double $offset The offset number for paging (between 0 and 990). (optional)
# @param double $number The number of expected results (between 1 and 100). (optional)
# @param boolean $random If true, every request will give you a random set of recipes within the requested limits. (optional)
# @param boolean $limit_license Whether the recipes should have an open license that allows for displaying with proper attribution. (optional)
{
    my $params = {
    'min_carbs' => {
        data_type => 'double',
        description => 'The minimum number of carbohydrates in grams the recipe must have.',
        required => '0',
    },
    'max_carbs' => {
        data_type => 'double',
        description => 'The maximum number of carbohydrates in grams the recipe can have.',
        required => '0',
    },
    'min_protein' => {
        data_type => 'double',
        description => 'The minimum number of protein in grams the recipe must have.',
        required => '0',
    },
    'max_protein' => {
        data_type => 'double',
        description => 'The maximum number of protein in grams the recipe can have.',
        required => '0',
    },
    'min_calories' => {
        data_type => 'double',
        description => 'The minimum number of calories the recipe must have.',
        required => '0',
    },
    'max_calories' => {
        data_type => 'double',
        description => 'The maximum number of calories the recipe can have.',
        required => '0',
    },
    'min_fat' => {
        data_type => 'double',
        description => 'The minimum number of fat in grams the recipe must have.',
        required => '0',
    },
    'max_fat' => {
        data_type => 'double',
        description => 'The maximum number of fat in grams the recipe can have.',
        required => '0',
    },
    'min_alcohol' => {
        data_type => 'double',
        description => 'The minimum number of alcohol in grams the recipe must have.',
        required => '0',
    },
    'max_alcohol' => {
        data_type => 'double',
        description => 'The maximum number of alcohol in grams the recipe must have.',
        required => '0',
    },
    'min_caffeine' => {
        data_type => 'double',
        description => 'The minimum number of milligrams of caffeine the recipe must have.',
        required => '0',
    },
    'max_caffeine' => {
        data_type => 'double',
        description => 'The maximum number of alcohol in grams the recipe must have.',
        required => '0',
    },
    'min_copper' => {
        data_type => 'double',
        description => 'The minimum number of copper in milligrams the recipe must have.',
        required => '0',
    },
    'max_copper' => {
        data_type => 'double',
        description => 'The maximum number of copper in milligrams the recipe must have.',
        required => '0',
    },
    'min_calcium' => {
        data_type => 'double',
        description => 'The minimum number of calcium in milligrams the recipe must have.',
        required => '0',
    },
    'max_calcium' => {
        data_type => 'double',
        description => 'The maximum number of calcium in milligrams the recipe must have.',
        required => '0',
    },
    'min_choline' => {
        data_type => 'double',
        description => 'The minimum number of choline in milligrams the recipe must have.',
        required => '0',
    },
    'max_choline' => {
        data_type => 'double',
        description => 'The maximum number of choline in milligrams the recipe can have.',
        required => '0',
    },
    'min_cholesterol' => {
        data_type => 'double',
        description => 'The minimum number of cholesterol in milligrams the recipe must have.',
        required => '0',
    },
    'max_cholesterol' => {
        data_type => 'double',
        description => 'The maximum number of cholesterol in milligrams the recipe must have.',
        required => '0',
    },
    'min_fluoride' => {
        data_type => 'double',
        description => 'The minimum number of fluoride in milligrams the recipe must have.',
        required => '0',
    },
    'max_fluoride' => {
        data_type => 'double',
        description => 'The maximum number of fluoride in milligrams the recipe can have.',
        required => '0',
    },
    'min_saturated_fat' => {
        data_type => 'double',
        description => 'The minimum number of saturated fat in grams the recipe must have.',
        required => '0',
    },
    'max_saturated_fat' => {
        data_type => 'double',
        description => 'The maximum number of saturated fat in grams the recipe must have.',
        required => '0',
    },
    'min_vitamin_a' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin A in IU the recipe must have.',
        required => '0',
    },
    'max_vitamin_a' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin A in IU the recipe must have.',
        required => '0',
    },
    'min_vitamin_c' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin C milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_c' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin C in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_d' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin D in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_d' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin D in micrograms the recipe must have.',
        required => '0',
    },
    'min_vitamin_e' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin E in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_e' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin E in milligrams the recipe must have.',
        required => '0',
    },
    'min_vitamin_k' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin K in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_k' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin K in micrograms the recipe must have.',
        required => '0',
    },
    'min_vitamin_b1' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B1 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b1' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B1 in milligrams the recipe must have.',
        required => '0',
    },
    'min_vitamin_b2' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B2 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b2' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B2 in milligrams the recipe must have.',
        required => '0',
    },
    'min_vitamin_b5' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B5 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b5' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B5 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b3' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B3 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b3' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B3 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b6' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B6 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b6' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B6 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b12' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B12 in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_b12' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B12 in micrograms the recipe must have.',
        required => '0',
    },
    'min_fiber' => {
        data_type => 'double',
        description => 'The minimum number of fiber in grams the recipe must have.',
        required => '0',
    },
    'max_fiber' => {
        data_type => 'double',
        description => 'The maximum number of fiber in grams the recipe must have.',
        required => '0',
    },
    'min_folate' => {
        data_type => 'double',
        description => 'The minimum number of folate in grams the recipe must have.',
        required => '0',
    },
    'max_folate' => {
        data_type => 'double',
        description => 'The maximum number of folate in grams the recipe must have.',
        required => '0',
    },
    'min_folic_acid' => {
        data_type => 'double',
        description => 'The minimum number of folic acid in grams the recipe must have.',
        required => '0',
    },
    'max_folic_acid' => {
        data_type => 'double',
        description => 'The maximum number of folic acid in grams the recipe must have.',
        required => '0',
    },
    'min_iodine' => {
        data_type => 'double',
        description => 'The minimum number of Iodine in grams the recipe must have.',
        required => '0',
    },
    'max_iodine' => {
        data_type => 'double',
        description => 'The maximum number of iodine in grams the recipe must have.',
        required => '0',
    },
    'min_iron' => {
        data_type => 'double',
        description => 'The minimum number of iron in milligrams the recipe must have.',
        required => '0',
    },
    'max_iron' => {
        data_type => 'double',
        description => 'The maximum number of iron in milligrams the recipe can have.',
        required => '0',
    },
    'min_magnesium' => {
        data_type => 'double',
        description => 'The minimum number of magnesium in milligrams the recipe must have.',
        required => '0',
    },
    'max_magnesium' => {
        data_type => 'double',
        description => 'The maximum number of magnesium in milligrams the recipe can have.',
        required => '0',
    },
    'min_manganese' => {
        data_type => 'double',
        description => 'The minimum number of manganese in milligrams the recipe must have.',
        required => '0',
    },
    'max_manganese' => {
        data_type => 'double',
        description => 'The maximum number of manganese in milligrams the recipe can have.',
        required => '0',
    },
    'min_phosphorus' => {
        data_type => 'double',
        description => 'The minimum number of phosphorus in milligrams the recipe must have.',
        required => '0',
    },
    'max_phosphorus' => {
        data_type => 'double',
        description => 'The maximum number of phosphorus in milligrams the recipe can have.',
        required => '0',
    },
    'min_potassium' => {
        data_type => 'double',
        description => 'The minimum number of potassium in milligrams the recipe must have.',
        required => '0',
    },
    'max_potassium' => {
        data_type => 'double',
        description => 'The maximum number of potassium in milligrams the recipe can have.',
        required => '0',
    },
    'min_selenium' => {
        data_type => 'double',
        description => 'The minimum number of selenium in grams the recipe must have.',
        required => '0',
    },
    'max_selenium' => {
        data_type => 'double',
        description => 'The maximum number of selenium in grams the recipe must have.',
        required => '0',
    },
    'min_sodium' => {
        data_type => 'double',
        description => 'The minimum number of sodium in milligrams the recipe must have.',
        required => '0',
    },
    'max_sodium' => {
        data_type => 'double',
        description => 'The maximum number of sodium in milligrams the recipe must have.',
        required => '0',
    },
    'min_sugar' => {
        data_type => 'double',
        description => 'The minimum number of sugar in grams the recipe must have.',
        required => '0',
    },
    'max_sugar' => {
        data_type => 'double',
        description => 'The maximum number of sugar in grams the recipe must have.',
        required => '0',
    },
    'min_zinc' => {
        data_type => 'double',
        description => 'The minimum number of zinc in milligrams the recipe must have.',
        required => '0',
    },
    'max_zinc' => {
        data_type => 'double',
        description => 'The maximum number of zinc in milligrams the recipe can have.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The offset number for paging (between 0 and 990).',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of expected results (between 1 and 100).',
        required => '0',
    },
    'random' => {
        data_type => 'boolean',
        description => 'If true, every request will give you a random set of recipes within the requested limits.',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows for displaying with proper attribution.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes_by_nutrients' } = { 
        summary => 'Search Recipes by Nutrients',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_recipes_by_nutrients {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/findByNutrients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'min_carbs'}) {
        $query_params->{'minCarbs'} = $self->{api_client}->to_query_value($args{'min_carbs'});
    }

    # query params
    if ( exists $args{'max_carbs'}) {
        $query_params->{'maxCarbs'} = $self->{api_client}->to_query_value($args{'max_carbs'});
    }

    # query params
    if ( exists $args{'min_protein'}) {
        $query_params->{'minProtein'} = $self->{api_client}->to_query_value($args{'min_protein'});
    }

    # query params
    if ( exists $args{'max_protein'}) {
        $query_params->{'maxProtein'} = $self->{api_client}->to_query_value($args{'max_protein'});
    }

    # query params
    if ( exists $args{'min_calories'}) {
        $query_params->{'minCalories'} = $self->{api_client}->to_query_value($args{'min_calories'});
    }

    # query params
    if ( exists $args{'max_calories'}) {
        $query_params->{'maxCalories'} = $self->{api_client}->to_query_value($args{'max_calories'});
    }

    # query params
    if ( exists $args{'min_fat'}) {
        $query_params->{'minFat'} = $self->{api_client}->to_query_value($args{'min_fat'});
    }

    # query params
    if ( exists $args{'max_fat'}) {
        $query_params->{'maxFat'} = $self->{api_client}->to_query_value($args{'max_fat'});
    }

    # query params
    if ( exists $args{'min_alcohol'}) {
        $query_params->{'minAlcohol'} = $self->{api_client}->to_query_value($args{'min_alcohol'});
    }

    # query params
    if ( exists $args{'max_alcohol'}) {
        $query_params->{'maxAlcohol'} = $self->{api_client}->to_query_value($args{'max_alcohol'});
    }

    # query params
    if ( exists $args{'min_caffeine'}) {
        $query_params->{'minCaffeine'} = $self->{api_client}->to_query_value($args{'min_caffeine'});
    }

    # query params
    if ( exists $args{'max_caffeine'}) {
        $query_params->{'maxCaffeine'} = $self->{api_client}->to_query_value($args{'max_caffeine'});
    }

    # query params
    if ( exists $args{'min_copper'}) {
        $query_params->{'minCopper'} = $self->{api_client}->to_query_value($args{'min_copper'});
    }

    # query params
    if ( exists $args{'max_copper'}) {
        $query_params->{'maxCopper'} = $self->{api_client}->to_query_value($args{'max_copper'});
    }

    # query params
    if ( exists $args{'min_calcium'}) {
        $query_params->{'minCalcium'} = $self->{api_client}->to_query_value($args{'min_calcium'});
    }

    # query params
    if ( exists $args{'max_calcium'}) {
        $query_params->{'maxCalcium'} = $self->{api_client}->to_query_value($args{'max_calcium'});
    }

    # query params
    if ( exists $args{'min_choline'}) {
        $query_params->{'minCholine'} = $self->{api_client}->to_query_value($args{'min_choline'});
    }

    # query params
    if ( exists $args{'max_choline'}) {
        $query_params->{'maxCholine'} = $self->{api_client}->to_query_value($args{'max_choline'});
    }

    # query params
    if ( exists $args{'min_cholesterol'}) {
        $query_params->{'minCholesterol'} = $self->{api_client}->to_query_value($args{'min_cholesterol'});
    }

    # query params
    if ( exists $args{'max_cholesterol'}) {
        $query_params->{'maxCholesterol'} = $self->{api_client}->to_query_value($args{'max_cholesterol'});
    }

    # query params
    if ( exists $args{'min_fluoride'}) {
        $query_params->{'minFluoride'} = $self->{api_client}->to_query_value($args{'min_fluoride'});
    }

    # query params
    if ( exists $args{'max_fluoride'}) {
        $query_params->{'maxFluoride'} = $self->{api_client}->to_query_value($args{'max_fluoride'});
    }

    # query params
    if ( exists $args{'min_saturated_fat'}) {
        $query_params->{'minSaturatedFat'} = $self->{api_client}->to_query_value($args{'min_saturated_fat'});
    }

    # query params
    if ( exists $args{'max_saturated_fat'}) {
        $query_params->{'maxSaturatedFat'} = $self->{api_client}->to_query_value($args{'max_saturated_fat'});
    }

    # query params
    if ( exists $args{'min_vitamin_a'}) {
        $query_params->{'minVitaminA'} = $self->{api_client}->to_query_value($args{'min_vitamin_a'});
    }

    # query params
    if ( exists $args{'max_vitamin_a'}) {
        $query_params->{'maxVitaminA'} = $self->{api_client}->to_query_value($args{'max_vitamin_a'});
    }

    # query params
    if ( exists $args{'min_vitamin_c'}) {
        $query_params->{'minVitaminC'} = $self->{api_client}->to_query_value($args{'min_vitamin_c'});
    }

    # query params
    if ( exists $args{'max_vitamin_c'}) {
        $query_params->{'maxVitaminC'} = $self->{api_client}->to_query_value($args{'max_vitamin_c'});
    }

    # query params
    if ( exists $args{'min_vitamin_d'}) {
        $query_params->{'minVitaminD'} = $self->{api_client}->to_query_value($args{'min_vitamin_d'});
    }

    # query params
    if ( exists $args{'max_vitamin_d'}) {
        $query_params->{'maxVitaminD'} = $self->{api_client}->to_query_value($args{'max_vitamin_d'});
    }

    # query params
    if ( exists $args{'min_vitamin_e'}) {
        $query_params->{'minVitaminE'} = $self->{api_client}->to_query_value($args{'min_vitamin_e'});
    }

    # query params
    if ( exists $args{'max_vitamin_e'}) {
        $query_params->{'maxVitaminE'} = $self->{api_client}->to_query_value($args{'max_vitamin_e'});
    }

    # query params
    if ( exists $args{'min_vitamin_k'}) {
        $query_params->{'minVitaminK'} = $self->{api_client}->to_query_value($args{'min_vitamin_k'});
    }

    # query params
    if ( exists $args{'max_vitamin_k'}) {
        $query_params->{'maxVitaminK'} = $self->{api_client}->to_query_value($args{'max_vitamin_k'});
    }

    # query params
    if ( exists $args{'min_vitamin_b1'}) {
        $query_params->{'minVitaminB1'} = $self->{api_client}->to_query_value($args{'min_vitamin_b1'});
    }

    # query params
    if ( exists $args{'max_vitamin_b1'}) {
        $query_params->{'maxVitaminB1'} = $self->{api_client}->to_query_value($args{'max_vitamin_b1'});
    }

    # query params
    if ( exists $args{'min_vitamin_b2'}) {
        $query_params->{'minVitaminB2'} = $self->{api_client}->to_query_value($args{'min_vitamin_b2'});
    }

    # query params
    if ( exists $args{'max_vitamin_b2'}) {
        $query_params->{'maxVitaminB2'} = $self->{api_client}->to_query_value($args{'max_vitamin_b2'});
    }

    # query params
    if ( exists $args{'min_vitamin_b5'}) {
        $query_params->{'minVitaminB5'} = $self->{api_client}->to_query_value($args{'min_vitamin_b5'});
    }

    # query params
    if ( exists $args{'max_vitamin_b5'}) {
        $query_params->{'maxVitaminB5'} = $self->{api_client}->to_query_value($args{'max_vitamin_b5'});
    }

    # query params
    if ( exists $args{'min_vitamin_b3'}) {
        $query_params->{'minVitaminB3'} = $self->{api_client}->to_query_value($args{'min_vitamin_b3'});
    }

    # query params
    if ( exists $args{'max_vitamin_b3'}) {
        $query_params->{'maxVitaminB3'} = $self->{api_client}->to_query_value($args{'max_vitamin_b3'});
    }

    # query params
    if ( exists $args{'min_vitamin_b6'}) {
        $query_params->{'minVitaminB6'} = $self->{api_client}->to_query_value($args{'min_vitamin_b6'});
    }

    # query params
    if ( exists $args{'max_vitamin_b6'}) {
        $query_params->{'maxVitaminB6'} = $self->{api_client}->to_query_value($args{'max_vitamin_b6'});
    }

    # query params
    if ( exists $args{'min_vitamin_b12'}) {
        $query_params->{'minVitaminB12'} = $self->{api_client}->to_query_value($args{'min_vitamin_b12'});
    }

    # query params
    if ( exists $args{'max_vitamin_b12'}) {
        $query_params->{'maxVitaminB12'} = $self->{api_client}->to_query_value($args{'max_vitamin_b12'});
    }

    # query params
    if ( exists $args{'min_fiber'}) {
        $query_params->{'minFiber'} = $self->{api_client}->to_query_value($args{'min_fiber'});
    }

    # query params
    if ( exists $args{'max_fiber'}) {
        $query_params->{'maxFiber'} = $self->{api_client}->to_query_value($args{'max_fiber'});
    }

    # query params
    if ( exists $args{'min_folate'}) {
        $query_params->{'minFolate'} = $self->{api_client}->to_query_value($args{'min_folate'});
    }

    # query params
    if ( exists $args{'max_folate'}) {
        $query_params->{'maxFolate'} = $self->{api_client}->to_query_value($args{'max_folate'});
    }

    # query params
    if ( exists $args{'min_folic_acid'}) {
        $query_params->{'minFolicAcid'} = $self->{api_client}->to_query_value($args{'min_folic_acid'});
    }

    # query params
    if ( exists $args{'max_folic_acid'}) {
        $query_params->{'maxFolicAcid'} = $self->{api_client}->to_query_value($args{'max_folic_acid'});
    }

    # query params
    if ( exists $args{'min_iodine'}) {
        $query_params->{'minIodine'} = $self->{api_client}->to_query_value($args{'min_iodine'});
    }

    # query params
    if ( exists $args{'max_iodine'}) {
        $query_params->{'maxIodine'} = $self->{api_client}->to_query_value($args{'max_iodine'});
    }

    # query params
    if ( exists $args{'min_iron'}) {
        $query_params->{'minIron'} = $self->{api_client}->to_query_value($args{'min_iron'});
    }

    # query params
    if ( exists $args{'max_iron'}) {
        $query_params->{'maxIron'} = $self->{api_client}->to_query_value($args{'max_iron'});
    }

    # query params
    if ( exists $args{'min_magnesium'}) {
        $query_params->{'minMagnesium'} = $self->{api_client}->to_query_value($args{'min_magnesium'});
    }

    # query params
    if ( exists $args{'max_magnesium'}) {
        $query_params->{'maxMagnesium'} = $self->{api_client}->to_query_value($args{'max_magnesium'});
    }

    # query params
    if ( exists $args{'min_manganese'}) {
        $query_params->{'minManganese'} = $self->{api_client}->to_query_value($args{'min_manganese'});
    }

    # query params
    if ( exists $args{'max_manganese'}) {
        $query_params->{'maxManganese'} = $self->{api_client}->to_query_value($args{'max_manganese'});
    }

    # query params
    if ( exists $args{'min_phosphorus'}) {
        $query_params->{'minPhosphorus'} = $self->{api_client}->to_query_value($args{'min_phosphorus'});
    }

    # query params
    if ( exists $args{'max_phosphorus'}) {
        $query_params->{'maxPhosphorus'} = $self->{api_client}->to_query_value($args{'max_phosphorus'});
    }

    # query params
    if ( exists $args{'min_potassium'}) {
        $query_params->{'minPotassium'} = $self->{api_client}->to_query_value($args{'min_potassium'});
    }

    # query params
    if ( exists $args{'max_potassium'}) {
        $query_params->{'maxPotassium'} = $self->{api_client}->to_query_value($args{'max_potassium'});
    }

    # query params
    if ( exists $args{'min_selenium'}) {
        $query_params->{'minSelenium'} = $self->{api_client}->to_query_value($args{'min_selenium'});
    }

    # query params
    if ( exists $args{'max_selenium'}) {
        $query_params->{'maxSelenium'} = $self->{api_client}->to_query_value($args{'max_selenium'});
    }

    # query params
    if ( exists $args{'min_sodium'}) {
        $query_params->{'minSodium'} = $self->{api_client}->to_query_value($args{'min_sodium'});
    }

    # query params
    if ( exists $args{'max_sodium'}) {
        $query_params->{'maxSodium'} = $self->{api_client}->to_query_value($args{'max_sodium'});
    }

    # query params
    if ( exists $args{'min_sugar'}) {
        $query_params->{'minSugar'} = $self->{api_client}->to_query_value($args{'min_sugar'});
    }

    # query params
    if ( exists $args{'max_sugar'}) {
        $query_params->{'maxSugar'} = $self->{api_client}->to_query_value($args{'max_sugar'});
    }

    # query params
    if ( exists $args{'min_zinc'}) {
        $query_params->{'minZinc'} = $self->{api_client}->to_query_value($args{'min_zinc'});
    }

    # query params
    if ( exists $args{'max_zinc'}) {
        $query_params->{'maxZinc'} = $self->{api_client}->to_query_value($args{'max_zinc'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'random'}) {
        $query_params->{'random'} = $self->{api_client}->to_query_value($args{'random'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_recipes_complex
#
# Search Recipes Complex
# 
# @param string $query The (natural language) recipe search query. (required)
# @param string $cuisine The cuisine(s) of the recipes. One or more comma separated (will be iterpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
# @param string $exclude_cuisine The cuisine(s) the recipes must not match. One or more comma separated (will be iterpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
# @param string $diet The diet to which the recipes must be compliant. See a full list of supported diets. (optional)
# @param string $intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances. (optional)
# @param string $equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
# @param string $include_ingredients A comma-separated list of ingredients that should/must be contained in the recipe. (optional)
# @param string $exclude_ingredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes. (optional)
# @param string $type The type of the recipes. See a full list of supported meal types. (optional)
# @param boolean $instructions_required Whether the recipes must have instructions. (optional)
# @param boolean $fill_ingredients Add information about the used and missing ingredients in each recipe. (optional)
# @param boolean $add_recipe_information If set to true, you get more information about the recipes returned. This saves the calls to get recipe information. (optional)
# @param string $author The username of the recipe author. (optional)
# @param string $tags User defined tags that have to match. (optional)
# @param string $title_match A text that has to match in the title of the recipes. (optional)
# @param string $sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
# @param string $sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
# @param double $min_carbs The minimum number of carbohydrates in grams the recipe must have. (optional)
# @param double $max_carbs The maximum number of carbohydrates in grams the recipe can have. (optional)
# @param double $min_protein The minimum number of protein in grams the recipe must have. (optional)
# @param double $max_protein The maximum number of protein in grams the recipe can have. (optional)
# @param double $min_calories The minimum number of calories the recipe must have. (optional)
# @param double $max_calories The maximum number of calories the recipe can have. (optional)
# @param double $min_fat The minimum number of fat in grams the recipe must have. (optional)
# @param double $max_fat The maximum number of fat in grams the recipe can have. (optional)
# @param double $min_alcohol The minimum number of alcohol in grams the recipe must have. (optional)
# @param double $max_alcohol The maximum number of alcohol in grams the recipe must have. (optional)
# @param double $min_caffeine The minimum number of milligrams of caffeine the recipe must have. (optional)
# @param double $max_caffeine The maximum number of alcohol in grams the recipe must have. (optional)
# @param double $min_copper The minimum number of copper in milligrams the recipe must have. (optional)
# @param double $max_copper The maximum number of copper in milligrams the recipe must have. (optional)
# @param double $min_calcium The minimum number of calcium in milligrams the recipe must have. (optional)
# @param double $max_calcium The maximum number of calcium in milligrams the recipe must have. (optional)
# @param double $min_choline The minimum number of choline in milligrams the recipe must have. (optional)
# @param double $max_choline The maximum number of choline in milligrams the recipe can have. (optional)
# @param double $min_cholesterol The minimum number of cholesterol in milligrams the recipe must have. (optional)
# @param double $max_cholesterol The maximum number of cholesterol in milligrams the recipe must have. (optional)
# @param double $min_fluoride The minimum number of fluoride in milligrams the recipe must have. (optional)
# @param double $max_fluoride The maximum number of fluoride in milligrams the recipe can have. (optional)
# @param double $min_saturated_fat The minimum number of saturated fat in grams the recipe must have. (optional)
# @param double $max_saturated_fat The maximum number of saturated fat in grams the recipe must have. (optional)
# @param double $min_vitamin_a The minimum number of Vitamin A in IU the recipe must have. (optional)
# @param double $max_vitamin_a The maximum number of Vitamin A in IU the recipe must have. (optional)
# @param double $min_vitamin_c The minimum number of Vitamin C milligrams the recipe must have. (optional)
# @param double $max_vitamin_c The maximum number of Vitamin C in milligrams the recipe can have. (optional)
# @param double $min_vitamin_d The minimum number of Vitamin D in micrograms the recipe must have. (optional)
# @param double $max_vitamin_d The maximum number of Vitamin D in micrograms the recipe must have. (optional)
# @param double $min_vitamin_e The minimum number of Vitamin E in milligrams the recipe must have. (optional)
# @param double $max_vitamin_e The maximum number of Vitamin E in milligrams the recipe must have. (optional)
# @param double $min_vitamin_k The minimum number of Vitamin K in micrograms the recipe must have. (optional)
# @param double $max_vitamin_k The maximum number of Vitamin K in micrograms the recipe must have. (optional)
# @param double $min_vitamin_b1 The minimum number of Vitamin B1 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b1 The maximum number of Vitamin B1 in milligrams the recipe must have. (optional)
# @param double $min_vitamin_b2 The minimum number of Vitamin B2 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b2 The maximum number of Vitamin B2 in milligrams the recipe must have. (optional)
# @param double $min_vitamin_b5 The minimum number of Vitamin B5 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b5 The maximum number of Vitamin B5 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b3 The minimum number of Vitamin B3 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b3 The maximum number of Vitamin B3 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b6 The minimum number of Vitamin B6 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b6 The maximum number of Vitamin B6 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b12 The minimum number of Vitamin B12 in micrograms the recipe must have. (optional)
# @param double $max_vitamin_b12 The maximum number of Vitamin B12 in micrograms the recipe must have. (optional)
# @param double $min_fiber The minimum number of fiber in grams the recipe must have. (optional)
# @param double $max_fiber The maximum number of fiber in grams the recipe must have. (optional)
# @param double $min_folate The minimum number of folate in grams the recipe must have. (optional)
# @param double $max_folate The maximum number of folate in grams the recipe must have. (optional)
# @param double $min_folic_acid The minimum number of folic acid in grams the recipe must have. (optional)
# @param double $max_folic_acid The maximum number of folic acid in grams the recipe must have. (optional)
# @param double $min_iodine The minimum number of Iodine in grams the recipe must have. (optional)
# @param double $max_iodine The maximum number of iodine in grams the recipe must have. (optional)
# @param double $min_iron The minimum number of iron in milligrams the recipe must have. (optional)
# @param double $max_iron The maximum number of iron in milligrams the recipe can have. (optional)
# @param double $min_magnesium The minimum number of magnesium in milligrams the recipe must have. (optional)
# @param double $max_magnesium The maximum number of magnesium in milligrams the recipe can have. (optional)
# @param double $min_manganese The minimum number of manganese in milligrams the recipe must have. (optional)
# @param double $max_manganese The maximum number of manganese in milligrams the recipe can have. (optional)
# @param double $min_phosphorus The minimum number of phosphorus in milligrams the recipe must have. (optional)
# @param double $max_phosphorus The maximum number of phosphorus in milligrams the recipe can have. (optional)
# @param double $min_potassium The minimum number of potassium in milligrams the recipe must have. (optional)
# @param double $max_potassium The maximum number of potassium in milligrams the recipe can have. (optional)
# @param double $min_selenium The minimum number of selenium in grams the recipe must have. (optional)
# @param double $max_selenium The maximum number of selenium in grams the recipe must have. (optional)
# @param double $min_sodium The minimum number of sodium in milligrams the recipe must have. (optional)
# @param double $max_sodium The maximum number of sodium in milligrams the recipe must have. (optional)
# @param double $min_sugar The minimum number of sugar in grams the recipe must have. (optional)
# @param double $max_sugar The maximum number of sugar in grams the recipe must have. (optional)
# @param double $min_zinc The minimum number of zinc in milligrams the recipe must have. (optional)
# @param double $max_zinc The maximum number of zinc in milligrams the recipe can have. (optional)
# @param double $offset The offset number for paging (between 0 and 990). (optional)
# @param double $number The number of expected results (between 1 and 10). (optional)
# @param boolean $limit_license Whether the recipes should have an open license that allows for displaying with proper attribution. (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The (natural language) recipe search query.',
        required => '1',
    },
    'cuisine' => {
        data_type => 'string',
        description => 'The cuisine(s) of the recipes. One or more comma separated (will be iterpreted as &#39;OR&#39;). See a full list of supported cuisines.',
        required => '0',
    },
    'exclude_cuisine' => {
        data_type => 'string',
        description => 'The cuisine(s) the recipes must not match. One or more comma separated (will be iterpreted as &#39;AND&#39;). See a full list of supported cuisines.',
        required => '0',
    },
    'diet' => {
        data_type => 'string',
        description => 'The diet to which the recipes must be compliant. See a full list of supported diets.',
        required => '0',
    },
    'intolerances' => {
        data_type => 'string',
        description => 'A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.',
        required => '0',
    },
    'equipment' => {
        data_type => 'string',
        description => 'The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.',
        required => '0',
    },
    'include_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients that should/must be contained in the recipe.',
        required => '0',
    },
    'exclude_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'The type of the recipes. See a full list of supported meal types.',
        required => '0',
    },
    'instructions_required' => {
        data_type => 'boolean',
        description => 'Whether the recipes must have instructions.',
        required => '0',
    },
    'fill_ingredients' => {
        data_type => 'boolean',
        description => 'Add information about the used and missing ingredients in each recipe.',
        required => '0',
    },
    'add_recipe_information' => {
        data_type => 'boolean',
        description => 'If set to true, you get more information about the recipes returned. This saves the calls to get recipe information.',
        required => '0',
    },
    'author' => {
        data_type => 'string',
        description => 'The username of the recipe author.',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'User defined tags that have to match.',
        required => '0',
    },
    'title_match' => {
        data_type => 'string',
        description => 'A text that has to match in the title of the recipes.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'The strategy to sort recipes by. See a full list of supported sorting options.',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).',
        required => '0',
    },
    'min_carbs' => {
        data_type => 'double',
        description => 'The minimum number of carbohydrates in grams the recipe must have.',
        required => '0',
    },
    'max_carbs' => {
        data_type => 'double',
        description => 'The maximum number of carbohydrates in grams the recipe can have.',
        required => '0',
    },
    'min_protein' => {
        data_type => 'double',
        description => 'The minimum number of protein in grams the recipe must have.',
        required => '0',
    },
    'max_protein' => {
        data_type => 'double',
        description => 'The maximum number of protein in grams the recipe can have.',
        required => '0',
    },
    'min_calories' => {
        data_type => 'double',
        description => 'The minimum number of calories the recipe must have.',
        required => '0',
    },
    'max_calories' => {
        data_type => 'double',
        description => 'The maximum number of calories the recipe can have.',
        required => '0',
    },
    'min_fat' => {
        data_type => 'double',
        description => 'The minimum number of fat in grams the recipe must have.',
        required => '0',
    },
    'max_fat' => {
        data_type => 'double',
        description => 'The maximum number of fat in grams the recipe can have.',
        required => '0',
    },
    'min_alcohol' => {
        data_type => 'double',
        description => 'The minimum number of alcohol in grams the recipe must have.',
        required => '0',
    },
    'max_alcohol' => {
        data_type => 'double',
        description => 'The maximum number of alcohol in grams the recipe must have.',
        required => '0',
    },
    'min_caffeine' => {
        data_type => 'double',
        description => 'The minimum number of milligrams of caffeine the recipe must have.',
        required => '0',
    },
    'max_caffeine' => {
        data_type => 'double',
        description => 'The maximum number of alcohol in grams the recipe must have.',
        required => '0',
    },
    'min_copper' => {
        data_type => 'double',
        description => 'The minimum number of copper in milligrams the recipe must have.',
        required => '0',
    },
    'max_copper' => {
        data_type => 'double',
        description => 'The maximum number of copper in milligrams the recipe must have.',
        required => '0',
    },
    'min_calcium' => {
        data_type => 'double',
        description => 'The minimum number of calcium in milligrams the recipe must have.',
        required => '0',
    },
    'max_calcium' => {
        data_type => 'double',
        description => 'The maximum number of calcium in milligrams the recipe must have.',
        required => '0',
    },
    'min_choline' => {
        data_type => 'double',
        description => 'The minimum number of choline in milligrams the recipe must have.',
        required => '0',
    },
    'max_choline' => {
        data_type => 'double',
        description => 'The maximum number of choline in milligrams the recipe can have.',
        required => '0',
    },
    'min_cholesterol' => {
        data_type => 'double',
        description => 'The minimum number of cholesterol in milligrams the recipe must have.',
        required => '0',
    },
    'max_cholesterol' => {
        data_type => 'double',
        description => 'The maximum number of cholesterol in milligrams the recipe must have.',
        required => '0',
    },
    'min_fluoride' => {
        data_type => 'double',
        description => 'The minimum number of fluoride in milligrams the recipe must have.',
        required => '0',
    },
    'max_fluoride' => {
        data_type => 'double',
        description => 'The maximum number of fluoride in milligrams the recipe can have.',
        required => '0',
    },
    'min_saturated_fat' => {
        data_type => 'double',
        description => 'The minimum number of saturated fat in grams the recipe must have.',
        required => '0',
    },
    'max_saturated_fat' => {
        data_type => 'double',
        description => 'The maximum number of saturated fat in grams the recipe must have.',
        required => '0',
    },
    'min_vitamin_a' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin A in IU the recipe must have.',
        required => '0',
    },
    'max_vitamin_a' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin A in IU the recipe must have.',
        required => '0',
    },
    'min_vitamin_c' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin C milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_c' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin C in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_d' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin D in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_d' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin D in micrograms the recipe must have.',
        required => '0',
    },
    'min_vitamin_e' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin E in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_e' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin E in milligrams the recipe must have.',
        required => '0',
    },
    'min_vitamin_k' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin K in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_k' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin K in micrograms the recipe must have.',
        required => '0',
    },
    'min_vitamin_b1' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B1 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b1' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B1 in milligrams the recipe must have.',
        required => '0',
    },
    'min_vitamin_b2' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B2 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b2' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B2 in milligrams the recipe must have.',
        required => '0',
    },
    'min_vitamin_b5' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B5 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b5' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B5 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b3' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B3 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b3' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B3 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b6' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B6 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b6' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B6 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b12' => {
        data_type => 'double',
        description => 'The minimum number of Vitamin B12 in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_b12' => {
        data_type => 'double',
        description => 'The maximum number of Vitamin B12 in micrograms the recipe must have.',
        required => '0',
    },
    'min_fiber' => {
        data_type => 'double',
        description => 'The minimum number of fiber in grams the recipe must have.',
        required => '0',
    },
    'max_fiber' => {
        data_type => 'double',
        description => 'The maximum number of fiber in grams the recipe must have.',
        required => '0',
    },
    'min_folate' => {
        data_type => 'double',
        description => 'The minimum number of folate in grams the recipe must have.',
        required => '0',
    },
    'max_folate' => {
        data_type => 'double',
        description => 'The maximum number of folate in grams the recipe must have.',
        required => '0',
    },
    'min_folic_acid' => {
        data_type => 'double',
        description => 'The minimum number of folic acid in grams the recipe must have.',
        required => '0',
    },
    'max_folic_acid' => {
        data_type => 'double',
        description => 'The maximum number of folic acid in grams the recipe must have.',
        required => '0',
    },
    'min_iodine' => {
        data_type => 'double',
        description => 'The minimum number of Iodine in grams the recipe must have.',
        required => '0',
    },
    'max_iodine' => {
        data_type => 'double',
        description => 'The maximum number of iodine in grams the recipe must have.',
        required => '0',
    },
    'min_iron' => {
        data_type => 'double',
        description => 'The minimum number of iron in milligrams the recipe must have.',
        required => '0',
    },
    'max_iron' => {
        data_type => 'double',
        description => 'The maximum number of iron in milligrams the recipe can have.',
        required => '0',
    },
    'min_magnesium' => {
        data_type => 'double',
        description => 'The minimum number of magnesium in milligrams the recipe must have.',
        required => '0',
    },
    'max_magnesium' => {
        data_type => 'double',
        description => 'The maximum number of magnesium in milligrams the recipe can have.',
        required => '0',
    },
    'min_manganese' => {
        data_type => 'double',
        description => 'The minimum number of manganese in milligrams the recipe must have.',
        required => '0',
    },
    'max_manganese' => {
        data_type => 'double',
        description => 'The maximum number of manganese in milligrams the recipe can have.',
        required => '0',
    },
    'min_phosphorus' => {
        data_type => 'double',
        description => 'The minimum number of phosphorus in milligrams the recipe must have.',
        required => '0',
    },
    'max_phosphorus' => {
        data_type => 'double',
        description => 'The maximum number of phosphorus in milligrams the recipe can have.',
        required => '0',
    },
    'min_potassium' => {
        data_type => 'double',
        description => 'The minimum number of potassium in milligrams the recipe must have.',
        required => '0',
    },
    'max_potassium' => {
        data_type => 'double',
        description => 'The maximum number of potassium in milligrams the recipe can have.',
        required => '0',
    },
    'min_selenium' => {
        data_type => 'double',
        description => 'The minimum number of selenium in grams the recipe must have.',
        required => '0',
    },
    'max_selenium' => {
        data_type => 'double',
        description => 'The maximum number of selenium in grams the recipe must have.',
        required => '0',
    },
    'min_sodium' => {
        data_type => 'double',
        description => 'The minimum number of sodium in milligrams the recipe must have.',
        required => '0',
    },
    'max_sodium' => {
        data_type => 'double',
        description => 'The maximum number of sodium in milligrams the recipe must have.',
        required => '0',
    },
    'min_sugar' => {
        data_type => 'double',
        description => 'The minimum number of sugar in grams the recipe must have.',
        required => '0',
    },
    'max_sugar' => {
        data_type => 'double',
        description => 'The maximum number of sugar in grams the recipe must have.',
        required => '0',
    },
    'min_zinc' => {
        data_type => 'double',
        description => 'The minimum number of zinc in milligrams the recipe must have.',
        required => '0',
    },
    'max_zinc' => {
        data_type => 'double',
        description => 'The maximum number of zinc in milligrams the recipe can have.',
        required => '0',
    },
    'offset' => {
        data_type => 'double',
        description => 'The offset number for paging (between 0 and 990).',
        required => '0',
    },
    'number' => {
        data_type => 'double',
        description => 'The number of expected results (between 1 and 10).',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows for displaying with proper attribution.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes_complex' } = { 
        summary => 'Search Recipes Complex',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_recipes_complex {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_recipes_complex");
    }

    # parse inputs
    my $_resource_path = '/recipes/complexSearch';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'cuisine'}) {
        $query_params->{'cuisine'} = $self->{api_client}->to_query_value($args{'cuisine'});
    }

    # query params
    if ( exists $args{'exclude_cuisine'}) {
        $query_params->{'excludeCuisine'} = $self->{api_client}->to_query_value($args{'exclude_cuisine'});
    }

    # query params
    if ( exists $args{'diet'}) {
        $query_params->{'diet'} = $self->{api_client}->to_query_value($args{'diet'});
    }

    # query params
    if ( exists $args{'intolerances'}) {
        $query_params->{'intolerances'} = $self->{api_client}->to_query_value($args{'intolerances'});
    }

    # query params
    if ( exists $args{'equipment'}) {
        $query_params->{'equipment'} = $self->{api_client}->to_query_value($args{'equipment'});
    }

    # query params
    if ( exists $args{'include_ingredients'}) {
        $query_params->{'includeIngredients'} = $self->{api_client}->to_query_value($args{'include_ingredients'});
    }

    # query params
    if ( exists $args{'exclude_ingredients'}) {
        $query_params->{'excludeIngredients'} = $self->{api_client}->to_query_value($args{'exclude_ingredients'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'instructions_required'}) {
        $query_params->{'instructionsRequired'} = $self->{api_client}->to_query_value($args{'instructions_required'});
    }

    # query params
    if ( exists $args{'fill_ingredients'}) {
        $query_params->{'fillIngredients'} = $self->{api_client}->to_query_value($args{'fill_ingredients'});
    }

    # query params
    if ( exists $args{'add_recipe_information'}) {
        $query_params->{'addRecipeInformation'} = $self->{api_client}->to_query_value($args{'add_recipe_information'});
    }

    # query params
    if ( exists $args{'author'}) {
        $query_params->{'author'} = $self->{api_client}->to_query_value($args{'author'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'title_match'}) {
        $query_params->{'titleMatch'} = $self->{api_client}->to_query_value($args{'title_match'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sortDirection'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'min_carbs'}) {
        $query_params->{'minCarbs'} = $self->{api_client}->to_query_value($args{'min_carbs'});
    }

    # query params
    if ( exists $args{'max_carbs'}) {
        $query_params->{'maxCarbs'} = $self->{api_client}->to_query_value($args{'max_carbs'});
    }

    # query params
    if ( exists $args{'min_protein'}) {
        $query_params->{'minProtein'} = $self->{api_client}->to_query_value($args{'min_protein'});
    }

    # query params
    if ( exists $args{'max_protein'}) {
        $query_params->{'maxProtein'} = $self->{api_client}->to_query_value($args{'max_protein'});
    }

    # query params
    if ( exists $args{'min_calories'}) {
        $query_params->{'minCalories'} = $self->{api_client}->to_query_value($args{'min_calories'});
    }

    # query params
    if ( exists $args{'max_calories'}) {
        $query_params->{'maxCalories'} = $self->{api_client}->to_query_value($args{'max_calories'});
    }

    # query params
    if ( exists $args{'min_fat'}) {
        $query_params->{'minFat'} = $self->{api_client}->to_query_value($args{'min_fat'});
    }

    # query params
    if ( exists $args{'max_fat'}) {
        $query_params->{'maxFat'} = $self->{api_client}->to_query_value($args{'max_fat'});
    }

    # query params
    if ( exists $args{'min_alcohol'}) {
        $query_params->{'minAlcohol'} = $self->{api_client}->to_query_value($args{'min_alcohol'});
    }

    # query params
    if ( exists $args{'max_alcohol'}) {
        $query_params->{'maxAlcohol'} = $self->{api_client}->to_query_value($args{'max_alcohol'});
    }

    # query params
    if ( exists $args{'min_caffeine'}) {
        $query_params->{'minCaffeine'} = $self->{api_client}->to_query_value($args{'min_caffeine'});
    }

    # query params
    if ( exists $args{'max_caffeine'}) {
        $query_params->{'maxCaffeine'} = $self->{api_client}->to_query_value($args{'max_caffeine'});
    }

    # query params
    if ( exists $args{'min_copper'}) {
        $query_params->{'minCopper'} = $self->{api_client}->to_query_value($args{'min_copper'});
    }

    # query params
    if ( exists $args{'max_copper'}) {
        $query_params->{'maxCopper'} = $self->{api_client}->to_query_value($args{'max_copper'});
    }

    # query params
    if ( exists $args{'min_calcium'}) {
        $query_params->{'minCalcium'} = $self->{api_client}->to_query_value($args{'min_calcium'});
    }

    # query params
    if ( exists $args{'max_calcium'}) {
        $query_params->{'maxCalcium'} = $self->{api_client}->to_query_value($args{'max_calcium'});
    }

    # query params
    if ( exists $args{'min_choline'}) {
        $query_params->{'minCholine'} = $self->{api_client}->to_query_value($args{'min_choline'});
    }

    # query params
    if ( exists $args{'max_choline'}) {
        $query_params->{'maxCholine'} = $self->{api_client}->to_query_value($args{'max_choline'});
    }

    # query params
    if ( exists $args{'min_cholesterol'}) {
        $query_params->{'minCholesterol'} = $self->{api_client}->to_query_value($args{'min_cholesterol'});
    }

    # query params
    if ( exists $args{'max_cholesterol'}) {
        $query_params->{'maxCholesterol'} = $self->{api_client}->to_query_value($args{'max_cholesterol'});
    }

    # query params
    if ( exists $args{'min_fluoride'}) {
        $query_params->{'minFluoride'} = $self->{api_client}->to_query_value($args{'min_fluoride'});
    }

    # query params
    if ( exists $args{'max_fluoride'}) {
        $query_params->{'maxFluoride'} = $self->{api_client}->to_query_value($args{'max_fluoride'});
    }

    # query params
    if ( exists $args{'min_saturated_fat'}) {
        $query_params->{'minSaturatedFat'} = $self->{api_client}->to_query_value($args{'min_saturated_fat'});
    }

    # query params
    if ( exists $args{'max_saturated_fat'}) {
        $query_params->{'maxSaturatedFat'} = $self->{api_client}->to_query_value($args{'max_saturated_fat'});
    }

    # query params
    if ( exists $args{'min_vitamin_a'}) {
        $query_params->{'minVitaminA'} = $self->{api_client}->to_query_value($args{'min_vitamin_a'});
    }

    # query params
    if ( exists $args{'max_vitamin_a'}) {
        $query_params->{'maxVitaminA'} = $self->{api_client}->to_query_value($args{'max_vitamin_a'});
    }

    # query params
    if ( exists $args{'min_vitamin_c'}) {
        $query_params->{'minVitaminC'} = $self->{api_client}->to_query_value($args{'min_vitamin_c'});
    }

    # query params
    if ( exists $args{'max_vitamin_c'}) {
        $query_params->{'maxVitaminC'} = $self->{api_client}->to_query_value($args{'max_vitamin_c'});
    }

    # query params
    if ( exists $args{'min_vitamin_d'}) {
        $query_params->{'minVitaminD'} = $self->{api_client}->to_query_value($args{'min_vitamin_d'});
    }

    # query params
    if ( exists $args{'max_vitamin_d'}) {
        $query_params->{'maxVitaminD'} = $self->{api_client}->to_query_value($args{'max_vitamin_d'});
    }

    # query params
    if ( exists $args{'min_vitamin_e'}) {
        $query_params->{'minVitaminE'} = $self->{api_client}->to_query_value($args{'min_vitamin_e'});
    }

    # query params
    if ( exists $args{'max_vitamin_e'}) {
        $query_params->{'maxVitaminE'} = $self->{api_client}->to_query_value($args{'max_vitamin_e'});
    }

    # query params
    if ( exists $args{'min_vitamin_k'}) {
        $query_params->{'minVitaminK'} = $self->{api_client}->to_query_value($args{'min_vitamin_k'});
    }

    # query params
    if ( exists $args{'max_vitamin_k'}) {
        $query_params->{'maxVitaminK'} = $self->{api_client}->to_query_value($args{'max_vitamin_k'});
    }

    # query params
    if ( exists $args{'min_vitamin_b1'}) {
        $query_params->{'minVitaminB1'} = $self->{api_client}->to_query_value($args{'min_vitamin_b1'});
    }

    # query params
    if ( exists $args{'max_vitamin_b1'}) {
        $query_params->{'maxVitaminB1'} = $self->{api_client}->to_query_value($args{'max_vitamin_b1'});
    }

    # query params
    if ( exists $args{'min_vitamin_b2'}) {
        $query_params->{'minVitaminB2'} = $self->{api_client}->to_query_value($args{'min_vitamin_b2'});
    }

    # query params
    if ( exists $args{'max_vitamin_b2'}) {
        $query_params->{'maxVitaminB2'} = $self->{api_client}->to_query_value($args{'max_vitamin_b2'});
    }

    # query params
    if ( exists $args{'min_vitamin_b5'}) {
        $query_params->{'minVitaminB5'} = $self->{api_client}->to_query_value($args{'min_vitamin_b5'});
    }

    # query params
    if ( exists $args{'max_vitamin_b5'}) {
        $query_params->{'maxVitaminB5'} = $self->{api_client}->to_query_value($args{'max_vitamin_b5'});
    }

    # query params
    if ( exists $args{'min_vitamin_b3'}) {
        $query_params->{'minVitaminB3'} = $self->{api_client}->to_query_value($args{'min_vitamin_b3'});
    }

    # query params
    if ( exists $args{'max_vitamin_b3'}) {
        $query_params->{'maxVitaminB3'} = $self->{api_client}->to_query_value($args{'max_vitamin_b3'});
    }

    # query params
    if ( exists $args{'min_vitamin_b6'}) {
        $query_params->{'minVitaminB6'} = $self->{api_client}->to_query_value($args{'min_vitamin_b6'});
    }

    # query params
    if ( exists $args{'max_vitamin_b6'}) {
        $query_params->{'maxVitaminB6'} = $self->{api_client}->to_query_value($args{'max_vitamin_b6'});
    }

    # query params
    if ( exists $args{'min_vitamin_b12'}) {
        $query_params->{'minVitaminB12'} = $self->{api_client}->to_query_value($args{'min_vitamin_b12'});
    }

    # query params
    if ( exists $args{'max_vitamin_b12'}) {
        $query_params->{'maxVitaminB12'} = $self->{api_client}->to_query_value($args{'max_vitamin_b12'});
    }

    # query params
    if ( exists $args{'min_fiber'}) {
        $query_params->{'minFiber'} = $self->{api_client}->to_query_value($args{'min_fiber'});
    }

    # query params
    if ( exists $args{'max_fiber'}) {
        $query_params->{'maxFiber'} = $self->{api_client}->to_query_value($args{'max_fiber'});
    }

    # query params
    if ( exists $args{'min_folate'}) {
        $query_params->{'minFolate'} = $self->{api_client}->to_query_value($args{'min_folate'});
    }

    # query params
    if ( exists $args{'max_folate'}) {
        $query_params->{'maxFolate'} = $self->{api_client}->to_query_value($args{'max_folate'});
    }

    # query params
    if ( exists $args{'min_folic_acid'}) {
        $query_params->{'minFolicAcid'} = $self->{api_client}->to_query_value($args{'min_folic_acid'});
    }

    # query params
    if ( exists $args{'max_folic_acid'}) {
        $query_params->{'maxFolicAcid'} = $self->{api_client}->to_query_value($args{'max_folic_acid'});
    }

    # query params
    if ( exists $args{'min_iodine'}) {
        $query_params->{'minIodine'} = $self->{api_client}->to_query_value($args{'min_iodine'});
    }

    # query params
    if ( exists $args{'max_iodine'}) {
        $query_params->{'maxIodine'} = $self->{api_client}->to_query_value($args{'max_iodine'});
    }

    # query params
    if ( exists $args{'min_iron'}) {
        $query_params->{'minIron'} = $self->{api_client}->to_query_value($args{'min_iron'});
    }

    # query params
    if ( exists $args{'max_iron'}) {
        $query_params->{'maxIron'} = $self->{api_client}->to_query_value($args{'max_iron'});
    }

    # query params
    if ( exists $args{'min_magnesium'}) {
        $query_params->{'minMagnesium'} = $self->{api_client}->to_query_value($args{'min_magnesium'});
    }

    # query params
    if ( exists $args{'max_magnesium'}) {
        $query_params->{'maxMagnesium'} = $self->{api_client}->to_query_value($args{'max_magnesium'});
    }

    # query params
    if ( exists $args{'min_manganese'}) {
        $query_params->{'minManganese'} = $self->{api_client}->to_query_value($args{'min_manganese'});
    }

    # query params
    if ( exists $args{'max_manganese'}) {
        $query_params->{'maxManganese'} = $self->{api_client}->to_query_value($args{'max_manganese'});
    }

    # query params
    if ( exists $args{'min_phosphorus'}) {
        $query_params->{'minPhosphorus'} = $self->{api_client}->to_query_value($args{'min_phosphorus'});
    }

    # query params
    if ( exists $args{'max_phosphorus'}) {
        $query_params->{'maxPhosphorus'} = $self->{api_client}->to_query_value($args{'max_phosphorus'});
    }

    # query params
    if ( exists $args{'min_potassium'}) {
        $query_params->{'minPotassium'} = $self->{api_client}->to_query_value($args{'min_potassium'});
    }

    # query params
    if ( exists $args{'max_potassium'}) {
        $query_params->{'maxPotassium'} = $self->{api_client}->to_query_value($args{'max_potassium'});
    }

    # query params
    if ( exists $args{'min_selenium'}) {
        $query_params->{'minSelenium'} = $self->{api_client}->to_query_value($args{'min_selenium'});
    }

    # query params
    if ( exists $args{'max_selenium'}) {
        $query_params->{'maxSelenium'} = $self->{api_client}->to_query_value($args{'max_selenium'});
    }

    # query params
    if ( exists $args{'min_sodium'}) {
        $query_params->{'minSodium'} = $self->{api_client}->to_query_value($args{'min_sodium'});
    }

    # query params
    if ( exists $args{'max_sodium'}) {
        $query_params->{'maxSodium'} = $self->{api_client}->to_query_value($args{'max_sodium'});
    }

    # query params
    if ( exists $args{'min_sugar'}) {
        $query_params->{'minSugar'} = $self->{api_client}->to_query_value($args{'min_sugar'});
    }

    # query params
    if ( exists $args{'max_sugar'}) {
        $query_params->{'maxSugar'} = $self->{api_client}->to_query_value($args{'max_sugar'});
    }

    # query params
    if ( exists $args{'min_zinc'}) {
        $query_params->{'minZinc'} = $self->{api_client}->to_query_value($args{'min_zinc'});
    }

    # query params
    if ( exists $args{'max_zinc'}) {
        $query_params->{'maxZinc'} = $self->{api_client}->to_query_value($args{'max_zinc'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_site_content
#
# Search Site Content
# 
# @param string $query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_site_content' } = { 
        summary => 'Search Site Content',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search_site_content {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_site_content");
    }

    # parse inputs
    my $_resource_path = '/food/site/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# summarize_recipe
#
# Summarize Recipe
# 
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'summarize_recipe' } = { 
        summary => 'Summarize Recipe',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub summarize_recipe {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling summarize_recipe");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/summary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# talk_to_chatbot
#
# Talk to Chatbot
# 
# @param string $text The request / question / answer from the user to the chat bot. (required)
# @param string $context_id An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The request / question / answer from the user to the chat bot.',
        required => '1',
    },
    'context_id' => {
        data_type => 'string',
        description => 'An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'talk_to_chatbot' } = { 
        summary => 'Talk to Chatbot',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub talk_to_chatbot {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling talk_to_chatbot");
    }

    # parse inputs
    my $_resource_path = '/food/converse';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'context_id'}) {
        $query_params->{'contextId'} = $self->{api_client}->to_query_value($args{'context_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# visualize_equipment
#
# Visualize Equipment
# 
# @param string $ingredient_list The ingredient list of the recipe, one ingredient per line. (required)
# @param double $servings The number of servings. (required)
# @param string $view Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment. (optional)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
# @param boolean $show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
{
    my $params = {
    'ingredient_list' => {
        data_type => 'string',
        description => 'The ingredient list of the recipe, one ingredient per line.',
        required => '1',
    },
    'servings' => {
        data_type => 'double',
        description => 'The number of servings.',
        required => '1',
    },
    'view' => {
        data_type => 'string',
        description => 'Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment.',
        required => '0',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    'show_backlink' => {
        data_type => 'boolean',
        description => 'Whether to show a backlink to spoonacular. If set false, this call counts against your quota.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_equipment' } = { 
        summary => 'Visualize Equipment',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_equipment {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_list' is set
    unless (exists $args{'ingredient_list'}) {
      croak("Missing the required parameter 'ingredient_list' when calling visualize_equipment");
    }

    # verify the required parameter 'servings' is set
    unless (exists $args{'servings'}) {
      croak("Missing the required parameter 'servings' when calling visualize_equipment");
    }

    # parse inputs
    my $_resource_path = '/recipes/visualizeEquipment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'ingredient_list'} ) {
                $form_params->{'ingredientList'} = $self->{api_client}->to_form_value($args{'ingredient_list'});
    }
    
    # form params
    if ( exists $args{'servings'} ) {
                $form_params->{'servings'} = $self->{api_client}->to_form_value($args{'servings'});
    }
    
    # form params
    if ( exists $args{'view'} ) {
                $form_params->{'view'} = $self->{api_client}->to_form_value($args{'view'});
    }
    
    # form params
    if ( exists $args{'default_css'} ) {
                $form_params->{'defaultCss'} = $self->{api_client}->to_form_value($args{'default_css'});
    }
    
    # form params
    if ( exists $args{'show_backlink'} ) {
                $form_params->{'showBacklink'} = $self->{api_client}->to_form_value($args{'show_backlink'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_ingredients
#
# Visualize Ingredients
# 
# @param string $ingredient_list The ingredient list of the recipe, one ingredient per line. (required)
# @param double $servings The number of servings. (required)
# @param string $measure The initial measure, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;. (optional)
# @param string $view Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment. (optional)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
# @param boolean $show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
{
    my $params = {
    'ingredient_list' => {
        data_type => 'string',
        description => 'The ingredient list of the recipe, one ingredient per line.',
        required => '1',
    },
    'servings' => {
        data_type => 'double',
        description => 'The number of servings.',
        required => '1',
    },
    'measure' => {
        data_type => 'string',
        description => 'The initial measure, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.',
        required => '0',
    },
    'view' => {
        data_type => 'string',
        description => 'Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment.',
        required => '0',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    'show_backlink' => {
        data_type => 'boolean',
        description => 'Whether to show a backlink to spoonacular. If set false, this call counts against your quota.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_ingredients' } = { 
        summary => 'Visualize Ingredients',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_ingredients {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_list' is set
    unless (exists $args{'ingredient_list'}) {
      croak("Missing the required parameter 'ingredient_list' when calling visualize_ingredients");
    }

    # verify the required parameter 'servings' is set
    unless (exists $args{'servings'}) {
      croak("Missing the required parameter 'servings' when calling visualize_ingredients");
    }

    # parse inputs
    my $_resource_path = '/recipes/visualizeIngredients';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'ingredient_list'} ) {
                $form_params->{'ingredientList'} = $self->{api_client}->to_form_value($args{'ingredient_list'});
    }
    
    # form params
    if ( exists $args{'servings'} ) {
                $form_params->{'servings'} = $self->{api_client}->to_form_value($args{'servings'});
    }
    
    # form params
    if ( exists $args{'measure'} ) {
                $form_params->{'measure'} = $self->{api_client}->to_form_value($args{'measure'});
    }
    
    # form params
    if ( exists $args{'view'} ) {
                $form_params->{'view'} = $self->{api_client}->to_form_value($args{'view'});
    }
    
    # form params
    if ( exists $args{'default_css'} ) {
                $form_params->{'defaultCss'} = $self->{api_client}->to_form_value($args{'default_css'});
    }
    
    # form params
    if ( exists $args{'show_backlink'} ) {
                $form_params->{'showBacklink'} = $self->{api_client}->to_form_value($args{'show_backlink'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_menu_item_nutrition_by_id
#
# Visualize Menu Item Nutrition by ID
# 
# @param double $id The menu item id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The menu item id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_menu_item_nutrition_by_id' } = { 
        summary => 'Visualize Menu Item Nutrition by ID',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_menu_item_nutrition_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_menu_item_nutrition_by_id");
    }

    # parse inputs
    my $_resource_path = '/food/menuItems/{id}/nutritionWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_price_breakdown
#
# Visualize Price Breakdown
# 
# @param string $ingredient_list The ingredient list of the recipe, one ingredient per line. (required)
# @param double $servings The number of servings. (required)
# @param double $mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
# @param boolean $show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
{
    my $params = {
    'ingredient_list' => {
        data_type => 'string',
        description => 'The ingredient list of the recipe, one ingredient per line.',
        required => '1',
    },
    'servings' => {
        data_type => 'double',
        description => 'The number of servings.',
        required => '1',
    },
    'mode' => {
        data_type => 'double',
        description => 'The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).',
        required => '0',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    'show_backlink' => {
        data_type => 'boolean',
        description => 'Whether to show a backlink to spoonacular. If set false, this call counts against your quota.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_price_breakdown' } = { 
        summary => 'Visualize Price Breakdown',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_price_breakdown {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_list' is set
    unless (exists $args{'ingredient_list'}) {
      croak("Missing the required parameter 'ingredient_list' when calling visualize_price_breakdown");
    }

    # verify the required parameter 'servings' is set
    unless (exists $args{'servings'}) {
      croak("Missing the required parameter 'servings' when calling visualize_price_breakdown");
    }

    # parse inputs
    my $_resource_path = '/recipes/visualizePriceEstimator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'ingredient_list'} ) {
                $form_params->{'ingredientList'} = $self->{api_client}->to_form_value($args{'ingredient_list'});
    }
    
    # form params
    if ( exists $args{'servings'} ) {
                $form_params->{'servings'} = $self->{api_client}->to_form_value($args{'servings'});
    }
    
    # form params
    if ( exists $args{'mode'} ) {
                $form_params->{'mode'} = $self->{api_client}->to_form_value($args{'mode'});
    }
    
    # form params
    if ( exists $args{'default_css'} ) {
                $form_params->{'defaultCss'} = $self->{api_client}->to_form_value($args{'default_css'});
    }
    
    # form params
    if ( exists $args{'show_backlink'} ) {
                $form_params->{'showBacklink'} = $self->{api_client}->to_form_value($args{'show_backlink'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_product_nutrition_by_id
#
# Visualize Product Nutrition by ID
# 
# @param double $id The id of the product. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the product.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_product_nutrition_by_id' } = { 
        summary => 'Visualize Product Nutrition by ID',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_product_nutrition_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_product_nutrition_by_id");
    }

    # parse inputs
    my $_resource_path = '/food/products/{id}/nutritionWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_equipment_by_id
#
# Visualize Recipe Equipment by ID
# 
# @param double $id The recipe id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_equipment_by_id' } = { 
        summary => 'Visualize Recipe Equipment by ID',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_equipment_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_equipment_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/equipmentWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_ingredients_by_id
#
# Visualize Recipe Ingredients by ID
# 
# @param double $id The recipe id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_ingredients_by_id' } = { 
        summary => 'Visualize Recipe Ingredients by ID',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_ingredients_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_ingredients_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/ingredientWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_nutrition
#
# Visualize Recipe Nutrition
# 
# @param string $ingredient_list The ingredient list of the recipe, one ingredient per line. (required)
# @param double $servings The number of servings. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
# @param boolean $show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
{
    my $params = {
    'ingredient_list' => {
        data_type => 'string',
        description => 'The ingredient list of the recipe, one ingredient per line.',
        required => '1',
    },
    'servings' => {
        data_type => 'double',
        description => 'The number of servings.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    'show_backlink' => {
        data_type => 'boolean',
        description => 'Whether to show a backlink to spoonacular. If set false, this call counts against your quota.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_nutrition' } = { 
        summary => 'Visualize Recipe Nutrition',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_nutrition {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_list' is set
    unless (exists $args{'ingredient_list'}) {
      croak("Missing the required parameter 'ingredient_list' when calling visualize_recipe_nutrition");
    }

    # verify the required parameter 'servings' is set
    unless (exists $args{'servings'}) {
      croak("Missing the required parameter 'servings' when calling visualize_recipe_nutrition");
    }

    # parse inputs
    my $_resource_path = '/recipes/visualizeNutrition';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'ingredient_list'} ) {
                $form_params->{'ingredientList'} = $self->{api_client}->to_form_value($args{'ingredient_list'});
    }
    
    # form params
    if ( exists $args{'servings'} ) {
                $form_params->{'servings'} = $self->{api_client}->to_form_value($args{'servings'});
    }
    
    # form params
    if ( exists $args{'default_css'} ) {
                $form_params->{'defaultCss'} = $self->{api_client}->to_form_value($args{'default_css'});
    }
    
    # form params
    if ( exists $args{'show_backlink'} ) {
                $form_params->{'showBacklink'} = $self->{api_client}->to_form_value($args{'show_backlink'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_nutrition_by_id
#
# Visualize Recipe Nutrition by ID
# 
# @param double $id The id of the product. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The id of the product.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_nutrition_by_id' } = { 
        summary => 'Visualize Recipe Nutrition by ID',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_nutrition_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_nutrition_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/nutritionWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_price_breakdown_by_id
#
# Visualize Recipe Price Breakdown by ID
# 
# @param double $id The recipe id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_price_breakdown_by_id' } = { 
        summary => 'Visualize Recipe Price Breakdown by ID',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_price_breakdown_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_price_breakdown_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/priceBreakdownWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
