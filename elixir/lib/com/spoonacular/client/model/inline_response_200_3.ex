# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.spoonacular.client.Model.InlineResponse2003 do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :"id",
    :"title",
    :"image",
    :"imageType",
    :"servings",
    :"readyInMinutes",
    :"license",
    :"sourceName",
    :"sourceUrl",
    :"spoonacularSourceUrl",
    :"aggregateLikes",
    :"healthScore",
    :"spoonacularScore",
    :"pricePerServing",
    :"analyzedInstructions",
    :"cheap",
    :"creditsText",
    :"cuisines",
    :"dairyFree",
    :"diets",
    :"gaps",
    :"glutenFree",
    :"instructions",
    :"ketogenic",
    :"lowFodmap",
    :"occasions",
    :"sustainable",
    :"vegan",
    :"vegetarian",
    :"veryHealthy",
    :"veryPopular",
    :"whole30",
    :"weightWatcherSmartPoints",
    :"dishTypes",
    :"extendedIngredients",
    :"summary",
    :"winePairing"
  ]

  @type t :: %__MODULE__{
    :"id" => integer(),
    :"title" => String.t,
    :"image" => String.t,
    :"imageType" => String.t,
    :"servings" => float(),
    :"readyInMinutes" => integer(),
    :"license" => String.t,
    :"sourceName" => String.t,
    :"sourceUrl" => String.t,
    :"spoonacularSourceUrl" => String.t,
    :"aggregateLikes" => integer(),
    :"healthScore" => float(),
    :"spoonacularScore" => float(),
    :"pricePerServing" => float(),
    :"analyzedInstructions" => [Map],
    :"cheap" => boolean(),
    :"creditsText" => String.t,
    :"cuisines" => [String.t],
    :"dairyFree" => boolean(),
    :"diets" => [String.t],
    :"gaps" => String.t,
    :"glutenFree" => boolean(),
    :"instructions" => String.t,
    :"ketogenic" => boolean(),
    :"lowFodmap" => boolean(),
    :"occasions" => [String.t],
    :"sustainable" => boolean(),
    :"vegan" => boolean(),
    :"vegetarian" => boolean(),
    :"veryHealthy" => boolean(),
    :"veryPopular" => boolean(),
    :"whole30" => boolean(),
    :"weightWatcherSmartPoints" => float(),
    :"dishTypes" => [String.t],
    :"extendedIngredients" => [InlineResponse2003ExtendedIngredients],
    :"summary" => String.t,
    :"winePairing" => InlineResponse2003WinePairing
  }
end

defimpl Poison.Decoder, for: com.spoonacular.client.Model.InlineResponse2003 do
  import com.spoonacular.client.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"extendedIngredients", :list, com.spoonacular.client.Model.InlineResponse2003ExtendedIngredients, options)
    |> deserialize(:"winePairing", :struct, com.spoonacular.client.Model.InlineResponse2003WinePairing, options)
  end
end

