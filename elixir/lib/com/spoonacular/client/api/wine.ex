# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.spoonacular.client.Api.Wine do
  @moduledoc """
  API calls for all endpoints tagged `Wine`.
  """

  alias com.spoonacular.client.Connection
  import com.spoonacular.client.RequestBuilder


  @doc """
  Dish Pairing for Wine
  Find a dish that goes well with a given wine.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - wine (String.t): The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20043{}} on success
  {:error, info} on failure
  """
  @spec get_dish_pairing_for_wine(Tesla.Env.client, String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20043.t} | {:error, Tesla.Env.t}
  def get_dish_pairing_for_wine(connection, wine, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/wine/dishes")
    |> add_param(:query, :"wine", wine)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20043{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Wine Description
  Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - wine (String.t): The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20045{}} on success
  {:error, info} on failure
  """
  @spec get_wine_description(Tesla.Env.client, String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20045.t} | {:error, Tesla.Env.t}
  def get_wine_description(connection, wine, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/wine/description")
    |> add_param(:query, :"wine", wine)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20045{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Wine Pairing
  Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - food (String.t): The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
  - opts (KeywordList): [optional] Optional parameters
    - :max_price (float()): The maximum price for the specific wine recommendation in USD.
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20044{}} on success
  {:error, info} on failure
  """
  @spec get_wine_pairing(Tesla.Env.client, String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20044.t} | {:error, Tesla.Env.t}
  def get_wine_pairing(connection, food, opts \\ []) do
    optional_params = %{
      :"maxPrice" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/wine/pairing")
    |> add_param(:query, :"food", food)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20044{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Wine Recommendation
  Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - wine (String.t): The type of wine to get a specific product recommendation for.
  - opts (KeywordList): [optional] Optional parameters
    - :max_price (float()): The maximum price for the specific wine recommendation in USD.
    - :min_rating (float()): The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
    - :number (float()): The number of wine recommendations expected (between 1 and 100).
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20046{}} on success
  {:error, info} on failure
  """
  @spec get_wine_recommendation(Tesla.Env.client, String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20046.t} | {:error, Tesla.Env.t}
  def get_wine_recommendation(connection, wine, opts \\ []) do
    optional_params = %{
      :"maxPrice" => :query,
      :"minRating" => :query,
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/wine/recommendation")
    |> add_param(:query, :"wine", wine)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20046{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end
end
