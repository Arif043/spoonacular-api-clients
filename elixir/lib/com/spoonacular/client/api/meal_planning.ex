# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.spoonacular.client.Api.MealPlanning do
  @moduledoc """
  API calls for all endpoints tagged `MealPlanning`.
  """

  alias com.spoonacular.client.Connection
  import com.spoonacular.client.RequestBuilder


  @doc """
  Add to Meal Plan
  Add an item to the user's meal plan.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - hash (String.t): The private hash for the username.
  - inline_object4 (InlineObject4): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec add_to_meal_plan(Tesla.Env.client, String.t, String.t, com.spoonacular.client.Model.InlineObject4.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def add_to_meal_plan(connection, username, hash, inline_object4, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/mealplanner/#{username}/items")
    |> add_param(:query, :"hash", hash)
    |> add_param(:body, :body, inline_object4)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Add to Shopping List
  Add an item to the current shopping list of a user.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - hash (String.t): The private hash for the username.
  - inline_object7 (InlineObject7): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20041{}} on success
  {:error, info} on failure
  """
  @spec add_to_shopping_list(Tesla.Env.client, String.t, String.t, com.spoonacular.client.Model.InlineObject7.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20041.t} | {:error, Tesla.Env.t}
  def add_to_shopping_list(connection, username, hash, inline_object7, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/mealplanner/#{username}/shopping-list/items")
    |> add_param(:query, :"hash", hash)
    |> add_param(:body, :body, inline_object7)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20041{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Clear Meal Plan Day
  Delete all planned items from the user's meal plan for a specific day.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - date (String.t): The date in the format yyyy-mm-dd.
  - hash (String.t): The private hash for the username.
  - inline_object3 (InlineObject3): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec clear_meal_plan_day(Tesla.Env.client, String.t, String.t, String.t, com.spoonacular.client.Model.InlineObject3.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def clear_meal_plan_day(connection, username, date, hash, inline_object3, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/mealplanner/#{username}/day/#{date}")
    |> add_param(:query, :"hash", hash)
    |> add_param(:body, :body, inline_object3)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Connect User
  In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - body (Map): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20042{}} on success
  {:error, info} on failure
  """
  @spec connect_user(Tesla.Env.client, Map, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20042.t} | {:error, Tesla.Env.t}
  def connect_user(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/users/connect")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20042{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Delete from Meal Plan
  Delete an item from the user's meal plan.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - id (float()): The shopping list item id.
  - hash (String.t): The private hash for the username.
  - inline_object5 (InlineObject5): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec delete_from_meal_plan(Tesla.Env.client, String.t, float(), String.t, com.spoonacular.client.Model.InlineObject5.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def delete_from_meal_plan(connection, username, id, hash, inline_object5, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/mealplanner/#{username}/items/#{id}")
    |> add_param(:query, :"hash", hash)
    |> add_param(:body, :body, inline_object5)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Delete from Shopping List
  Delete an item from the current shopping list of the user.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - id (integer()): The item's id.
  - hash (String.t): The private hash for the username.
  - inline_object8 (InlineObject8): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec delete_from_shopping_list(Tesla.Env.client, String.t, integer(), String.t, com.spoonacular.client.Model.InlineObject8.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def delete_from_shopping_list(connection, username, id, hash, inline_object8, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/mealplanner/#{username}/shopping-list/items/#{id}")
    |> add_param(:query, :"hash", hash)
    |> add_param(:body, :body, inline_object8)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Generate Meal Plan
  Generate a meal plan with three meals per day (breakfast, lunch, and dinner).

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :time_frame (String.t): Either for one \"day\" or an entire \"week\".
    - :target_calories (float()): What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
    - :diet (String.t): Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
    - :exclude (String.t): A comma-separated list of allergens or ingredients that must be excluded.
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20037{}} on success
  {:error, info} on failure
  """
  @spec generate_meal_plan(Tesla.Env.client, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20037.t} | {:error, Tesla.Env.t}
  def generate_meal_plan(connection, opts \\ []) do
    optional_params = %{
      :"timeFrame" => :query,
      :"targetCalories" => :query,
      :"diet" => :query,
      :"exclude" => :query
    }
    %{}
    |> method(:get)
    |> url("/mealplanner/generate")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20037{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Generate Shopping List
  Generate the shopping list for a user from the meal planner in a given time frame.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - start_date (String.t): The start date in the format yyyy-mm-dd.
  - end_date (String.t): The end date in the format yyyy-mm-dd.
  - hash (String.t): The private hash for the username.
  - inline_object6 (InlineObject6): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20041{}} on success
  {:error, info} on failure
  """
  @spec generate_shopping_list(Tesla.Env.client, String.t, String.t, String.t, String.t, com.spoonacular.client.Model.InlineObject6.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20041.t} | {:error, Tesla.Env.t}
  def generate_shopping_list(connection, username, start_date, end_date, hash, inline_object6, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/mealplanner/#{username}/shopping-list/#{start_date}/#{end_date}")
    |> add_param(:query, :"hash", hash)
    |> add_param(:body, :body, inline_object6)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20041{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Meal Plan Template
  Get information about a meal plan template.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - id (integer()): The item's id.
  - hash (String.t): The private hash for the username.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20040{}} on success
  {:error, info} on failure
  """
  @spec get_meal_plan_template(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20040.t} | {:error, Tesla.Env.t}
  def get_meal_plan_template(connection, username, id, hash, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mealplanner/#{username}/templates/#{id}")
    |> add_param(:query, :"hash", hash)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20040{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Meal Plan Templates
  Get meal plan templates from user or public ones.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - hash (String.t): The private hash for the username.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20039{}} on success
  {:error, info} on failure
  """
  @spec get_meal_plan_templates(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20039.t} | {:error, Tesla.Env.t}
  def get_meal_plan_templates(connection, username, hash, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mealplanner/#{username}/templates")
    |> add_param(:query, :"hash", hash)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20039{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Meal Plan Week
  Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - start_date (String.t): The start date of the meal planned week in the format yyyy-mm-dd.
  - hash (String.t): The private hash for the username.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20038{}} on success
  {:error, info} on failure
  """
  @spec get_meal_plan_week(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20038.t} | {:error, Tesla.Env.t}
  def get_meal_plan_week(connection, username, start_date, hash, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mealplanner/#{username}/week/#{start_date}")
    |> add_param(:query, :"hash", hash)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20038{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Shopping List
  Get the current shopping list for the given user.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - username (String.t): The username.
  - hash (String.t): The private hash for the username.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.InlineResponse20041{}} on success
  {:error, info} on failure
  """
  @spec get_shopping_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, com.spoonacular.client.Model.InlineResponse20041.t} | {:error, Tesla.Env.t}
  def get_shopping_list(connection, username, hash, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mealplanner/#{username}/shopping-list")
    |> add_param(:query, :"hash", hash)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.spoonacular.client.Model.InlineResponse20041{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end
end
