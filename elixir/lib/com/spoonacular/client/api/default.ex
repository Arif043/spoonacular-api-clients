# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.spoonacular.client.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias com.spoonacular.client.Connection
  import com.spoonacular.client.RequestBuilder


  @doc """
  Analyze a Recipe Search Query
  Parse a recipe search query to find out its intention.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - q (String.t): The recipe search query.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec analyze_a_recipe_search_query(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def analyze_a_recipe_search_query(connection, q, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/queries/analyze")
    |> add_param(:query, :"q", q)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Analyze Recipe Instructions
  Extract ingredients and equipment from the recipe's instructions.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - instructions (String.t): The instructions to be analyzed.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec analyze_recipe_instructions(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def analyze_recipe_instructions(connection, instructions, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/recipes/analyzeInstructions")
    |> add_param(:form, :"instructions", instructions)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Autocomplete Ingredient Search
  Autocomplete the entry of an ingredient.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The partial or full ingredient name.
  - opts (KeywordList): [optional] Optional parameters
    - :number (float()): The number of results to return (between 1 and 100).
    - :meta_information (boolean()): Whether to return more meta information about the ingredients.
    - :intolerances (boolean()): A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec autocomplete_ingredient_search(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def autocomplete_ingredient_search(connection, query, opts \\ []) do
    optional_params = %{
      :"number" => :query,
      :"metaInformation" => :query,
      :"intolerances" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/ingredients/autocomplete")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Autocomplete Menu Item Search
  Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The (partial) search query.
  - opts (KeywordList): [optional] Optional parameters
    - :number (float()): The number of results to return (between 1 and 25).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec autocomplete_menu_item_search(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def autocomplete_menu_item_search(connection, query, opts \\ []) do
    optional_params = %{
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/menuItems/suggest")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Autocomplete Product Search
  Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The (partial) search query.
  - opts (KeywordList): [optional] Optional parameters
    - :number (float()): The number of results to return (between 1 and 25).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec autocomplete_product_search(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def autocomplete_product_search(connection, query, opts \\ []) do
    optional_params = %{
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/products/suggest")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Autocomplete Recipe Search
  Autocomplete a partial input to suggest possible recipe names.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The query to be autocompleted.
  - opts (KeywordList): [optional] Optional parameters
    - :number (float()): The number of results to return (between 1 and 25).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec autocomplete_recipe_search(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def autocomplete_recipe_search(connection, query, opts \\ []) do
    optional_params = %{
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/autocomplete")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Classify Cuisine
  Classify the recipe's cuisine.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - title (String.t): The title of the recipe.
  - ingredient_list (String.t): The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec classify_cuisine(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def classify_cuisine(connection, title, ingredient_list, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/recipes/cuisine")
    |> add_param(:form, :"title", title)
    |> add_param(:form, :"ingredientList", ingredient_list)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Classify Grocery Product
  This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - inline_object8 (InlineObject8): 
  - opts (KeywordList): [optional] Optional parameters
    - :locale (String.t): The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec classify_grocery_product(Tesla.Env.client, com.spoonacular.client.Model.InlineObject8.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def classify_grocery_product(connection, inline_object8, opts \\ []) do
    optional_params = %{
      :"locale" => :query
    }
    %{}
    |> method(:post)
    |> url("/food/products/classify")
    |> add_param(:body, :body, inline_object8)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Classify Grocery Product Bulk
  Provide a set of product jsons, get back classified products.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - body (Map): 
  - opts (KeywordList): [optional] Optional parameters
    - :locale (String.t): The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec classify_grocery_product_bulk(Tesla.Env.client, Map, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def classify_grocery_product_bulk(connection, body, opts \\ []) do
    optional_params = %{
      :"locale" => :query
    }
    %{}
    |> method(:post)
    |> url("/food/products/classifyBatch")
    |> add_param(:body, :body, body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Convert Amounts
  Convert amounts like \"2 cups of flour to grams\".

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredient_name (String.t): The ingredient which you want to convert.
  - source_amount (float()): The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
  - source_unit (String.t): The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  - target_unit (String.t): The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec convert_amounts(Tesla.Env.client, String.t, float(), String.t, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def convert_amounts(connection, ingredient_name, source_amount, source_unit, target_unit, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/convert")
    |> add_param(:query, :"ingredientName", ingredient_name)
    |> add_param(:query, :"sourceAmount", source_amount)
    |> add_param(:query, :"sourceUnit", source_unit)
    |> add_param(:query, :"targetUnit", target_unit)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Create Recipe Card
  Generate a recipe card for a recipe.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - title (String.t): The title of the recipe.
  - image (String.t): The binary image of the recipe as jpg.
  - ingredients (String.t): The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  - instructions (String.t): The instructions to make the recipe. One step per line (separate lines with \\\\n).
  - ready_in_minutes (float()): The number of minutes it takes to get the recipe on the table.
  - servings (float()): The number of servings the recipe makes.
  - mask (String.t): The mask to put over the recipe image (\\\"ellipseMask\\\", \\\"diamondMask\\\", \\\"starMask\\\", \\\"heartMask\\\", \\\"potMask\\\", \\\"fishMask\\\").
  - background_image (String.t): The background image (\\\"none\\\",\\\"background1\\\", or \\\"background2\\\").
  - opts (KeywordList): [optional] Optional parameters
    - :author (String.t): The author of the recipe.
    - :background_color (String.t): The background color for the recipe card as a hex-string.
    - :font_color (String.t): The font color for the recipe card as a hex-string.
    - :source (String.t): The source of the recipe.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec create_recipe_card(Tesla.Env.client, String.t, String.t, String.t, String.t, float(), float(), String.t, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def create_recipe_card(connection, title, image, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts \\ []) do
    optional_params = %{
      :"author" => :form,
      :"backgroundColor" => :form,
      :"fontColor" => :form,
      :"source" => :form
    }
    %{}
    |> method(:post)
    |> url("/recipes/visualizeRecipe")
    |> add_param(:form, :"title", title)
    |> add_param(:file, :"image", image)
    |> add_param(:form, :"ingredients", ingredients)
    |> add_param(:form, :"instructions", instructions)
    |> add_param(:form, :"readyInMinutes", ready_in_minutes)
    |> add_param(:form, :"servings", servings)
    |> add_param(:form, :"mask", mask)
    |> add_param(:form, :"backgroundImage", background_image)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Detect Food in Text
  Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - text (String.t): The text in which food items, such as dish names and ingredients, should be detected in.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec detect_food_in_text(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def detect_food_in_text(connection, text, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/food/detect")
    |> add_param(:form, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Extract Recipe from Website
  This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - url (String.t): The URL of the recipe page.
  - opts (KeywordList): [optional] Optional parameters
    - :force_extraction (boolean()): If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec extract_recipe_from_website(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def extract_recipe_from_website(connection, url, opts \\ []) do
    optional_params = %{
      :"forceExtraction" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/extract")
    |> add_param(:query, :"url", url)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Generate Meal Plan
  Generate a meal plan with three meals per day (breakfast, lunch, and dinner).

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :time_frame (String.t): Either for one \"day\" or an entire \"week\".
    - :target_calories (float()): What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
    - :diet (String.t): Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
    - :exclude (String.t): A comma-separated list of allergens or ingredients that must be excluded.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec generate_meal_plan(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def generate_meal_plan(connection, opts \\ []) do
    optional_params = %{
      :"timeFrame" => :query,
      :"targetCalories" => :query,
      :"diet" => :query,
      :"exclude" => :query
    }
    %{}
    |> method(:get)
    |> url("/mealplanner/generate")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get a Random Food Joke
  Get a random joke that is related to food. Caution: this is an endpoint for adults!

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_a_random_food_joke(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_a_random_food_joke(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/jokes/random")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Analyzed Recipe Instructions
  Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
    - :step_breakdown (boolean()): Whether to break down the recipe steps even more.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_analyzed_recipe_instructions(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_analyzed_recipe_instructions(connection, id, opts \\ []) do
    optional_params = %{
      :"stepBreakdown" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/analyzedInstructions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Comparable Products
  Find comparable products to the given one.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - upc (float()): The UPC of the product for which you want to find comparable products.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_comparable_products(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_comparable_products(connection, upc, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/products/upc/#{upc}/comparable")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Conversation Suggests
  This endpoint returns suggestions for things the user can say or ask the chatbot.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
  - opts (KeywordList): [optional] Optional parameters
    - :number (float()): The number of suggestions to return (between 1 and 25).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_conversation_suggests(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_conversation_suggests(connection, query, opts \\ []) do
    optional_params = %{
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/converse/suggest")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Dish Pairing for Wine
  Find a dish that goes well with a given wine.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - wine (String.t): The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_dish_pairing_for_wine(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_dish_pairing_for_wine(connection, wine, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/wine/dishes")
    |> add_param(:query, :"wine", wine)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Ingredient Information
  Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The ingredient id.
  - opts (KeywordList): [optional] Optional parameters
    - :amount (float()): The amount of this ingredient.
    - :unit (String.t): The unit for the given amount.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_ingredient_information(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_ingredient_information(connection, id, opts \\ []) do
    optional_params = %{
      :"amount" => :query,
      :"unit" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/ingredients/#{id}/information")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Ingredient Substitutes
  Search for substitutes for a given ingredient.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredient_name (String.t): The name of the ingredient you want to replace.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_ingredient_substitutes(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_ingredient_substitutes(connection, ingredient_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/ingredients/substitutes")
    |> add_param(:query, :"ingredientName", ingredient_name)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Ingredient Substitutes by ID
  Search for substitutes for a given ingredient.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The id of the ingredient you want substitutes for.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_ingredient_substitutes_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_ingredient_substitutes_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/ingredients/#{id}/substitutes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Menu Item Information
  Use a menu item id to get all available information about a menu item, such as nutrition.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The menu item id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_menu_item_information(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_menu_item_information(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/menuItems/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Product Information
  Use a product id to get full information about a product, such as ingredients, nutrition, etc.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The id of the packaged food.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_product_information(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_product_information(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/products/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Random Food Trivia
  Returns random food trivia.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_random_food_trivia(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_random_food_trivia(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/trivia/random")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Random Recipes
  Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :limit_license (boolean()): Whether the recipes should have an open license that allows display with proper attribution.
    - :tags (String.t): The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
    - :number (float()): The number of random recipes to be returned (between 1 and 100).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_random_recipes(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_random_recipes(connection, opts \\ []) do
    optional_params = %{
      :"limitLicense" => :query,
      :"tags" => :query,
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/random")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Recipe Equipment by ID
  Get a recipe's equipment list.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_recipe_equipment_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_recipe_equipment_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/equipmentWidget.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Recipe Information
  Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The id of the recipe.
  - opts (KeywordList): [optional] Optional parameters
    - :include_nutrition (boolean()): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_recipe_information(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_recipe_information(connection, id, opts \\ []) do
    optional_params = %{
      :"includeNutrition" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/information")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Recipe Information Bulk
  Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ids (String.t): A comma-separated list of recipe ids.
  - opts (KeywordList): [optional] Optional parameters
    - :include_nutrition (boolean()): Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_recipe_information_bulk(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_recipe_information_bulk(connection, ids, opts \\ []) do
    optional_params = %{
      :"includeNutrition" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/informationBulk")
    |> add_param(:query, :"ids", ids)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Recipe Ingredients by ID
  Get a recipe's ingredient list.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_recipe_ingredients_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_recipe_ingredients_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/ingredientWidget.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Recipe Nutrition Widget by ID
  Get a recipe's nutrition widget data.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_recipe_nutrition_widget_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_recipe_nutrition_widget_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/nutritionWidget.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Recipe Price Breakdown by ID
  Get a recipe's price breakdown data.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_recipe_price_breakdown_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_recipe_price_breakdown_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/priceBreakdownWidget.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Similar Recipes
  Find recipes which are similar to the given one.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The id of the source recipe for which similar recipes should be found.
  - opts (KeywordList): [optional] Optional parameters
    - :number (float()): The number of random recipes to be returned (between 1 and 100).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_similar_recipes(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_similar_recipes(connection, id, opts \\ []) do
    optional_params = %{
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/similar")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Wine Description
  Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - wine (String.t): The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_wine_description(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_wine_description(connection, wine, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/wine/description")
    |> add_param(:query, :"wine", wine)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Wine Pairing
  Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - food (String.t): The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
  - opts (KeywordList): [optional] Optional parameters
    - :max_price (float()): The maximum price for the specific wine recommendation in USD.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_wine_pairing(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_wine_pairing(connection, food, opts \\ []) do
    optional_params = %{
      :"maxPrice" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/wine/pairing")
    |> add_param(:query, :"food", food)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get Wine Recommendation
  Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - wine (String.t): The type of wine to get a specific product recommendation for.
  - opts (KeywordList): [optional] Optional parameters
    - :max_price (float()): The maximum price for the specific wine recommendation in USD.
    - :min_rating (float()): The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
    - :number (float()): The number of wine recommendations expected (between 1 and 100).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec get_wine_recommendation(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def get_wine_recommendation(connection, wine, opts \\ []) do
    optional_params = %{
      :"maxPrice" => :query,
      :"minRating" => :query,
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/wine/recommendation")
    |> add_param(:query, :"wine", wine)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Guess Nutrition by Dish Name
  Estimate the macronutrients of a dish based on its title.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - title (String.t): The title of the dish.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec guess_nutrition_by_dish_name(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def guess_nutrition_by_dish_name(connection, title, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/guessNutrition")
    |> add_param(:query, :"title", title)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Map Ingredients to Grocery Products
  Map a set of ingredients to products you can buy in the grocery store.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - body (Map): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec map_ingredients_to_grocery_products(Tesla.Env.client, Map, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def map_ingredients_to_grocery_products(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/food/ingredients/map")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Parse Ingredients
  Extract an ingredient from plain text.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredient_list (String.t): The ingredient list of the recipe, one ingredient per line.
  - servings (float()): The number of servings that you can make from the ingredients.
  - opts (KeywordList): [optional] Optional parameters
    - :include_nutrition (boolean()): Whether nutrition data should be added to correctly parsed ingredients.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec parse_ingredients(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def parse_ingredients(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :"includeNutrition" => :form
    }
    %{}
    |> method(:post)
    |> url("/recipes/parseIngredients")
    |> add_param(:form, :"ingredientList", ingredient_list)
    |> add_param(:form, :"servings", servings)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Quick Answer
  Answer a nutrition related natural language question.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - q (String.t): The nutrition related question.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec quick_answer(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def quick_answer(connection, q, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/quickAnswer")
    |> add_param(:query, :"q", q)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Food Videos
  Find recipe and other food related videos.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The search query.
  - opts (KeywordList): [optional] Optional parameters
    - :type (String.t): The type of the recipes. See a full list of supported meal types.
    - :cuisine (String.t): The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
    - :diet (String.t): The diet for which the recipes must be suitable. See a full list of supported diets.
    - :include_ingredients (String.t): A comma-separated list of ingredients that the recipes should contain.
    - :exclude_ingredients (String.t): A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    - :min_length (float()): Minimum video length in seconds.
    - :max_length (float()): Maximum video length in seconds.
    - :offset (float()): The number of results to skip (between 0 and 900).
    - :number (float()): The number of results to return (between 1 and 100).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_food_videos(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_food_videos(connection, query, opts \\ []) do
    optional_params = %{
      :"type" => :query,
      :"cuisine" => :query,
      :"diet" => :query,
      :"includeIngredients" => :query,
      :"excludeIngredients" => :query,
      :"minLength" => :query,
      :"maxLength" => :query,
      :"offset" => :query,
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/videos/search")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Grocery Products
  Search packaged food products, such as frozen pizza or Greek yogurt.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The search query.
  - opts (KeywordList): [optional] Optional parameters
    - :min_calories (float()): The minimum amount of calories the product must have.
    - :max_calories (float()): The maximum amount of calories the product can have.
    - :min_carbs (float()): The minimum amount of carbohydrates in grams the product must have.
    - :max_carbs (float()): The maximum amount of carbohydrates in grams the product can have.
    - :min_protein (float()): The minimum amount of protein in grams the product must have.
    - :max_protein (float()): The maximum amount of protein in grams the product can have.
    - :min_fat (float()): The minimum amount of fat in grams the product must have.
    - :max_fat (float()): The maximum amount of fat in grams the product can have.
    - :offset (float()): The offset number for paging (between 0 and 990).
    - :number (float()): The number of expected results (between 1 and 100).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_grocery_products(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_grocery_products(connection, query, opts \\ []) do
    optional_params = %{
      :"minCalories" => :query,
      :"maxCalories" => :query,
      :"minCarbs" => :query,
      :"maxCarbs" => :query,
      :"minProtein" => :query,
      :"maxProtein" => :query,
      :"minFat" => :query,
      :"maxFat" => :query,
      :"offset" => :query,
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/products/search")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Grocery Products by UPC
  Get information about a packaged food using its UPC.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - upc (float()): The product's UPC.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_grocery_products_by_upc(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_grocery_products_by_upc(connection, upc, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/products/upc/#{upc}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Menu Items
  Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The search query.
  - opts (KeywordList): [optional] Optional parameters
    - :min_calories (float()): The minimum amount of calories the menu item must have.
    - :max_calories (float()): The maximum amount of calories the menu item can have.
    - :min_carbs (float()): The minimum amount of carbohydrates in grams the menu item must have.
    - :max_carbs (float()): The maximum amount of carbohydrates in grams the menu item can have.
    - :min_protein (float()): The minimum amount of protein in grams the menu item must have.
    - :max_protein (float()): The maximum amount of protein in grams the menu item can have.
    - :min_fat (float()): The minimum amount of fat in grams the menu item must have.
    - :max_fat (float()): The maximum amount of fat in grams the menu item can have.
    - :offset (float()): The offset number for paging (between 0 and 990).
    - :number (float()): The number of expected results (between 1 and 10).
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_menu_items(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_menu_items(connection, query, opts \\ []) do
    optional_params = %{
      :"minCalories" => :query,
      :"maxCalories" => :query,
      :"minCarbs" => :query,
      :"maxCarbs" => :query,
      :"minProtein" => :query,
      :"maxProtein" => :query,
      :"minFat" => :query,
      :"maxFat" => :query,
      :"offset" => :query,
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/menuItems/search")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Recipes
  Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \"Search Recipes Complex\" endpoint for much more flexibility.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The (natural language) recipe search query.
  - opts (KeywordList): [optional] Optional parameters
    - :cuisine (String.t): The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
    - :diet (String.t): The diet for which the recipes must be suitable. See a full list of supported diets.
    - :exclude_ingredients (String.t): A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    - :intolerances (String.t): A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. Please note: due to the automatic nature of the recipe analysis, the API cannot be 100% accurate in all cases. Please advise your users to seek professional help with medical issues.
    - :offset (float()): The number of results to skip (between 0 and 900).
    - :number (float()): The number of results to return (between 1 and 100).
    - :limit_license (boolean()): Whether the recipes should have an open license that allows display with proper attribution.
    - :instructions_required (boolean()): Whether the recipes must have instructions.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_recipes(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_recipes(connection, query, opts \\ []) do
    optional_params = %{
      :"cuisine" => :query,
      :"diet" => :query,
      :"excludeIngredients" => :query,
      :"intolerances" => :query,
      :"offset" => :query,
      :"number" => :query,
      :"limitLicense" => :query,
      :"instructionsRequired" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/search")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Recipes by Ingredients
  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredients (String.t): A comma-separated list of ingredients that the recipes should contain.
  - opts (KeywordList): [optional] Optional parameters
    - :number (float()): The maximum number of recipes to return (between 1 and 100). Defaults to 10.
    - :limit_license (boolean()): Whether the recipes should have an open license that allows display with proper attribution.
    - :ranking (float()): Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
    - :ignore_pantry (boolean()): Whether to ignore typical pantry items, such as water, salt, flour, etc.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_recipes_by_ingredients(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_recipes_by_ingredients(connection, ingredients, opts \\ []) do
    optional_params = %{
      :"number" => :query,
      :"limitLicense" => :query,
      :"ranking" => :query,
      :"ignorePantry" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/findByIngredients")
    |> add_param(:query, :"ingredients", ingredients)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Recipes by Nutrients
  Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :min_carbs (float()): The minimum amount of carbohydrates in grams the recipe must have.
    - :max_carbs (float()): The maximum amount of carbohydrates in grams the recipe can have.
    - :min_protein (float()): The minimum amount of protein in grams the recipe must have.
    - :max_protein (float()): The maximum amount of protein in grams the recipe can have.
    - :min_calories (float()): The minimum amount of calories the recipe must have.
    - :max_calories (float()): The maximum amount of calories the recipe can have.
    - :min_fat (float()): The minimum amount of fat in grams the recipe must have.
    - :max_fat (float()): The maximum amount of fat in grams the recipe can have.
    - :min_alcohol (float()): The minimum amount of alcohol in grams the recipe must have.
    - :max_alcohol (float()): The maximum amount of alcohol in grams the recipe can have.
    - :min_caffeine (float()): The minimum amount of caffeine in milligrams the recipe must have.
    - :max_caffeine (float()): The maximum amount of caffeine in milligrams the recipe can have.
    - :min_copper (float()): The minimum amount of copper in milligrams the recipe must have.
    - :max_copper (float()): The maximum amount of copper in milligrams the recipe can have.
    - :min_calcium (float()): The minimum amount of calcium in milligrams the recipe must have.
    - :max_calcium (float()): The maximum amount of calcium in milligrams the recipe can have.
    - :min_choline (float()): The minimum amount of choline in milligrams the recipe must have.
    - :max_choline (float()): The maximum amount of choline in milligrams the recipe can have.
    - :min_cholesterol (float()): The minimum amount of cholesterol in milligrams the recipe must have.
    - :max_cholesterol (float()): The maximum amount of cholesterol in milligrams the recipe can have.
    - :min_fluoride (float()): The minimum amount of fluoride in milligrams the recipe must have.
    - :max_fluoride (float()): The maximum amount of fluoride in milligrams the recipe can have.
    - :min_saturated_fat (float()): The minimum amount of saturated fat in grams the recipe must have.
    - :max_saturated_fat (float()): The maximum amount of saturated fat in grams the recipe can have.
    - :min_vitamin_a (float()): The minimum amount of Vitamin A in IU the recipe must have.
    - :max_vitamin_a (float()): The maximum amount of Vitamin A in IU the recipe can have.
    - :min_vitamin_c (float()): The minimum amount of Vitamin C in milligrams the recipe must have.
    - :max_vitamin_c (float()): The maximum amount of Vitamin C in milligrams the recipe can have.
    - :min_vitamin_d (float()): The minimum amount of Vitamin D in micrograms the recipe must have.
    - :max_vitamin_d (float()): The maximum amount of Vitamin D in micrograms the recipe can have.
    - :min_vitamin_e (float()): The minimum amount of Vitamin E in milligrams the recipe must have.
    - :max_vitamin_e (float()): The maximum amount of Vitamin E in milligrams the recipe can have.
    - :min_vitamin_k (float()): The minimum amount of Vitamin K in micrograms the recipe must have.
    - :max_vitamin_k (float()): The maximum amount of Vitamin K in micrograms the recipe can have.
    - :min_vitamin_b1 (float()): The minimum amount of Vitamin B1 in milligrams the recipe must have.
    - :max_vitamin_b1 (float()): The maximum amount of Vitamin B1 in milligrams the recipe can have.
    - :min_vitamin_b2 (float()): The minimum amount of Vitamin B2 in milligrams the recipe must have.
    - :max_vitamin_b2 (float()): The maximum amount of Vitamin B2 in milligrams the recipe can have.
    - :min_vitamin_b5 (float()): The minimum amount of Vitamin B5 in milligrams the recipe must have.
    - :max_vitamin_b5 (float()): The maximum amount of Vitamin B5 in milligrams the recipe can have.
    - :min_vitamin_b3 (float()): The minimum amount of Vitamin B3 in milligrams the recipe must have.
    - :max_vitamin_b3 (float()): The maximum amount of Vitamin B3 in milligrams the recipe can have.
    - :min_vitamin_b6 (float()): The minimum amount of Vitamin B6 in milligrams the recipe must have.
    - :max_vitamin_b6 (float()): The maximum amount of Vitamin B6 in milligrams the recipe can have.
    - :min_vitamin_b12 (float()): The minimum amount of Vitamin B12 in micrograms the recipe must have.
    - :max_vitamin_b12 (float()): The maximum amount of Vitamin B12 in micrograms the recipe can have.
    - :min_fiber (float()): The minimum amount of fiber in grams the recipe must have.
    - :max_fiber (float()): The maximum amount of fiber in grams the recipe can have.
    - :min_folate (float()): The minimum amount of folate in grams the recipe must have.
    - :max_folate (float()): The maximum amount of folate in grams the recipe can have.
    - :min_folic_acid (float()): The minimum amount of folic acid in grams the recipe must have.
    - :max_folic_acid (float()): The maximum amount of folic acid in grams the recipe can have.
    - :min_iodine (float()): The minimum amount of iodine in grams the recipe must have.
    - :max_iodine (float()): The maximum amount of iodine in grams the recipe can have.
    - :min_iron (float()): The minimum amount of iron in milligrams the recipe must have.
    - :max_iron (float()): The maximum amount of iron in milligrams the recipe can have.
    - :min_magnesium (float()): The minimum amount of magnesium in milligrams the recipe must have.
    - :max_magnesium (float()): The maximum amount of magnesium in milligrams the recipe can have.
    - :min_manganese (float()): The minimum amount of manganese in milligrams the recipe must have.
    - :max_manganese (float()): The maximum amount of manganese in milligrams the recipe can have.
    - :min_phosphorus (float()): The minimum amount of phosphorus in milligrams the recipe must have.
    - :max_phosphorus (float()): The maximum amount of phosphorus in milligrams the recipe can have.
    - :min_potassium (float()): The minimum amount of potassium in milligrams the recipe must have.
    - :max_potassium (float()): The maximum amount of potassium in milligrams the recipe can have.
    - :min_selenium (float()): The minimum amount of selenium in grams the recipe must have.
    - :max_selenium (float()): The maximum amount of selenium in grams the recipe can have.
    - :min_sodium (float()): The minimum amount of sodium in milligrams the recipe must have.
    - :max_sodium (float()): The maximum amount of sodium in milligrams the recipe can have.
    - :min_sugar (float()): The minimum amount of sugar in grams the recipe must have.
    - :max_sugar (float()): The maximum amount of sugar in grams the recipe can have.
    - :min_zinc (float()): The minimum amount of zinc in milligrams the recipe must have.
    - :max_zinc (float()): The maximum amount of zinc in milligrams the recipe can have.
    - :offset (float()): The offset number for paging (between 0 and 990).
    - :number (float()): The number of expected results (between 1 and 100).
    - :random (boolean()): If true, every request will give you a random set of recipes within the requested limits.
    - :limit_license (boolean()): Whether the recipes should have an open license that allows display with proper attribution.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_recipes_by_nutrients(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_recipes_by_nutrients(connection, opts \\ []) do
    optional_params = %{
      :"minCarbs" => :query,
      :"maxCarbs" => :query,
      :"minProtein" => :query,
      :"maxProtein" => :query,
      :"minCalories" => :query,
      :"maxCalories" => :query,
      :"minFat" => :query,
      :"maxFat" => :query,
      :"minAlcohol" => :query,
      :"maxAlcohol" => :query,
      :"minCaffeine" => :query,
      :"maxCaffeine" => :query,
      :"minCopper" => :query,
      :"maxCopper" => :query,
      :"minCalcium" => :query,
      :"maxCalcium" => :query,
      :"minCholine" => :query,
      :"maxCholine" => :query,
      :"minCholesterol" => :query,
      :"maxCholesterol" => :query,
      :"minFluoride" => :query,
      :"maxFluoride" => :query,
      :"minSaturatedFat" => :query,
      :"maxSaturatedFat" => :query,
      :"minVitaminA" => :query,
      :"maxVitaminA" => :query,
      :"minVitaminC" => :query,
      :"maxVitaminC" => :query,
      :"minVitaminD" => :query,
      :"maxVitaminD" => :query,
      :"minVitaminE" => :query,
      :"maxVitaminE" => :query,
      :"minVitaminK" => :query,
      :"maxVitaminK" => :query,
      :"minVitaminB1" => :query,
      :"maxVitaminB1" => :query,
      :"minVitaminB2" => :query,
      :"maxVitaminB2" => :query,
      :"minVitaminB5" => :query,
      :"maxVitaminB5" => :query,
      :"minVitaminB3" => :query,
      :"maxVitaminB3" => :query,
      :"minVitaminB6" => :query,
      :"maxVitaminB6" => :query,
      :"minVitaminB12" => :query,
      :"maxVitaminB12" => :query,
      :"minFiber" => :query,
      :"maxFiber" => :query,
      :"minFolate" => :query,
      :"maxFolate" => :query,
      :"minFolicAcid" => :query,
      :"maxFolicAcid" => :query,
      :"minIodine" => :query,
      :"maxIodine" => :query,
      :"minIron" => :query,
      :"maxIron" => :query,
      :"minMagnesium" => :query,
      :"maxMagnesium" => :query,
      :"minManganese" => :query,
      :"maxManganese" => :query,
      :"minPhosphorus" => :query,
      :"maxPhosphorus" => :query,
      :"minPotassium" => :query,
      :"maxPotassium" => :query,
      :"minSelenium" => :query,
      :"maxSelenium" => :query,
      :"minSodium" => :query,
      :"maxSodium" => :query,
      :"minSugar" => :query,
      :"maxSugar" => :query,
      :"minZinc" => :query,
      :"maxZinc" => :query,
      :"offset" => :query,
      :"number" => :query,
      :"random" => :query,
      :"limitLicense" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/findByNutrients")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Recipes Complex
  Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The (natural language) recipe search query.
  - opts (KeywordList): [optional] Optional parameters
    - :cuisine (String.t): The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
    - :exclude_cuisine (String.t): The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
    - :diet (String.t): The diet for which the recipes must be suitable. See a full list of supported diets.
    - :intolerances (String.t): A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    - :equipment (String.t): The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
    - :include_ingredients (String.t): A comma-separated list of ingredients that should/must be used in the recipes.
    - :exclude_ingredients (String.t): A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    - :type (String.t): The type of recipe. See a full list of supported meal types.
    - :instructions_required (boolean()): Whether the recipes must have instructions.
    - :fill_ingredients (boolean()): Add information about the used and missing ingredients in each recipe.
    - :add_recipe_information (boolean()): If set to true, you get more information about the recipes returned. This saves you from needing to call to get recipe information.
    - :author (String.t): The username of the recipe author.
    - :tags (String.t): User defined tags that have to match.
    - :title_match (String.t): Enter text that must be found in the title of the recipes.
    - :max_ready_time (float()): The maximum time in minutes it should take to prepare and cook the recipe.
    - :ignore_pantry (boolean()): Whether to ignore typical pantry items, such as water, salt, flour, etc.
    - :sort (String.t): The strategy to sort recipes by. See a full list of supported sorting options.
    - :sort_direction (String.t): The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
    - :min_carbs (float()): The minimum amount of carbohydrates in grams the recipe must have.
    - :max_carbs (float()): The maximum amount of carbohydrates in grams the recipe can have.
    - :min_protein (float()): The minimum amount of protein in grams the recipe must have.
    - :max_protein (float()): The maximum amount of protein in grams the recipe can have.
    - :min_calories (float()): The minimum amount of calories the recipe must have.
    - :max_calories (float()): The maximum amount of calories the recipe can have.
    - :min_fat (float()): The minimum amount of fat in grams the recipe must have.
    - :max_fat (float()): The maximum amount of fat in grams the recipe can have.
    - :min_alcohol (float()): The minimum amount of alcohol in grams the recipe must have.
    - :max_alcohol (float()): The maximum amount of alcohol in grams the recipe can have.
    - :min_caffeine (float()): The minimum amount of caffeine in milligrams the recipe must have.
    - :max_caffeine (float()): The maximum amount of caffeine in milligrams the recipe can have.
    - :min_copper (float()): The minimum amount of copper in milligrams the recipe must have.
    - :max_copper (float()): The maximum amount of copper in milligrams the recipe can have.
    - :min_calcium (float()): The minimum amount of calcium in milligrams the recipe must have.
    - :max_calcium (float()): The maximum amount of calcium in milligrams the recipe can have.
    - :min_choline (float()): The minimum amount of choline in milligrams the recipe must have.
    - :max_choline (float()): The maximum amount of choline in milligrams the recipe can have.
    - :min_cholesterol (float()): The minimum amount of cholesterol in milligrams the recipe must have.
    - :max_cholesterol (float()): The maximum amount of cholesterol in milligrams the recipe can have.
    - :min_fluoride (float()): The minimum amount of fluoride in milligrams the recipe must have.
    - :max_fluoride (float()): The maximum amount of fluoride in milligrams the recipe can have.
    - :min_saturated_fat (float()): The minimum amount of saturated fat in grams the recipe must have.
    - :max_saturated_fat (float()): The maximum amount of saturated fat in grams the recipe can have.
    - :min_vitamin_a (float()): The minimum amount of Vitamin A in IU the recipe must have.
    - :max_vitamin_a (float()): The maximum amount of Vitamin A in IU the recipe can have.
    - :min_vitamin_c (float()): The minimum amount of Vitamin C milligrams the recipe must have.
    - :max_vitamin_c (float()): The maximum amount of Vitamin C in milligrams the recipe can have.
    - :min_vitamin_d (float()): The minimum amount of Vitamin D in micrograms the recipe must have.
    - :max_vitamin_d (float()): The maximum amount of Vitamin D in micrograms the recipe can have.
    - :min_vitamin_e (float()): The minimum amount of Vitamin E in milligrams the recipe must have.
    - :max_vitamin_e (float()): The maximum amount of Vitamin E in milligrams the recipe can have.
    - :min_vitamin_k (float()): The minimum amount of Vitamin K in micrograms the recipe must have.
    - :max_vitamin_k (float()): The maximum amount of Vitamin K in micrograms the recipe can have.
    - :min_vitamin_b1 (float()): The minimum amount of Vitamin B1 in milligrams the recipe must have.
    - :max_vitamin_b1 (float()): The maximum amount of Vitamin B1 in milligrams the recipe can have.
    - :min_vitamin_b2 (float()): The minimum amount of Vitamin B2 in milligrams the recipe must have.
    - :max_vitamin_b2 (float()): The maximum amount of Vitamin B2 in milligrams the recipe can have.
    - :min_vitamin_b5 (float()): The minimum amount of Vitamin B5 in milligrams the recipe must have.
    - :max_vitamin_b5 (float()): The maximum amount of Vitamin B5 in milligrams the recipe can have.
    - :min_vitamin_b3 (float()): The minimum amount of Vitamin B3 in milligrams the recipe must have.
    - :max_vitamin_b3 (float()): The maximum amount of Vitamin B3 in milligrams the recipe can have.
    - :min_vitamin_b6 (float()): The minimum amount of Vitamin B6 in milligrams the recipe must have.
    - :max_vitamin_b6 (float()): The maximum amount of Vitamin B6 in milligrams the recipe can have.
    - :min_vitamin_b12 (float()): The minimum amount of Vitamin B12 in micrograms the recipe must have.
    - :max_vitamin_b12 (float()): The maximum amount of Vitamin B12 in micrograms the recipe can have.
    - :min_fiber (float()): The minimum amount of fiber in grams the recipe must have.
    - :max_fiber (float()): The maximum amount of fiber in grams the recipe can have.
    - :min_folate (float()): The minimum amount of folate in grams the recipe must have.
    - :max_folate (float()): The maximum amount of folate in grams the recipe can have.
    - :min_folic_acid (float()): The minimum amount of folic acid in grams the recipe must have.
    - :max_folic_acid (float()): The maximum amount of folic acid in grams the recipe can have.
    - :min_iodine (float()): The minimum amount of iodine in grams the recipe must have.
    - :max_iodine (float()): The maximum amount of iodine in grams the recipe can have.
    - :min_iron (float()): The minimum amount of iron in milligrams the recipe must have.
    - :max_iron (float()): The maximum amount of iron in milligrams the recipe can have.
    - :min_magnesium (float()): The minimum amount of magnesium in milligrams the recipe must have.
    - :max_magnesium (float()): The maximum amount of magnesium in milligrams the recipe can have.
    - :min_manganese (float()): The minimum amount of manganese in milligrams the recipe must have.
    - :max_manganese (float()): The maximum amount of manganese in milligrams the recipe can have.
    - :min_phosphorus (float()): The minimum amount of phosphorus in milligrams the recipe must have.
    - :max_phosphorus (float()): The maximum amount of phosphorus in milligrams the recipe can have.
    - :min_potassium (float()): The minimum amount of potassium in milligrams the recipe must have.
    - :max_potassium (float()): The maximum amount of potassium in milligrams the recipe can have.
    - :min_selenium (float()): The minimum amount of selenium in grams the recipe must have.
    - :max_selenium (float()): The maximum amount of selenium in grams the recipe can have.
    - :min_sodium (float()): The minimum amount of sodium in milligrams the recipe must have.
    - :max_sodium (float()): The maximum amount of sodium in milligrams the recipe can have.
    - :min_sugar (float()): The minimum amount of sugar in grams the recipe must have.
    - :max_sugar (float()): The maximum amount of sugar in grams the recipe can have.
    - :min_zinc (float()): The minimum amount of zinc in milligrams the recipe must have.
    - :max_zinc (float()): The maximum amount of zinc in milligrams the recipe can have.
    - :offset (float()): The offset number for paging (between 0 and 990).
    - :number (float()): The number of expected results (between 1 and 10).
    - :limit_license (boolean()): Whether the recipes should have an open license that allows display with proper attribution.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_recipes_complex(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_recipes_complex(connection, query, opts \\ []) do
    optional_params = %{
      :"cuisine" => :query,
      :"excludeCuisine" => :query,
      :"diet" => :query,
      :"intolerances" => :query,
      :"equipment" => :query,
      :"includeIngredients" => :query,
      :"excludeIngredients" => :query,
      :"type" => :query,
      :"instructionsRequired" => :query,
      :"fillIngredients" => :query,
      :"addRecipeInformation" => :query,
      :"author" => :query,
      :"tags" => :query,
      :"titleMatch" => :query,
      :"maxReadyTime" => :query,
      :"ignorePantry" => :query,
      :"sort" => :query,
      :"sortDirection" => :query,
      :"minCarbs" => :query,
      :"maxCarbs" => :query,
      :"minProtein" => :query,
      :"maxProtein" => :query,
      :"minCalories" => :query,
      :"maxCalories" => :query,
      :"minFat" => :query,
      :"maxFat" => :query,
      :"minAlcohol" => :query,
      :"maxAlcohol" => :query,
      :"minCaffeine" => :query,
      :"maxCaffeine" => :query,
      :"minCopper" => :query,
      :"maxCopper" => :query,
      :"minCalcium" => :query,
      :"maxCalcium" => :query,
      :"minCholine" => :query,
      :"maxCholine" => :query,
      :"minCholesterol" => :query,
      :"maxCholesterol" => :query,
      :"minFluoride" => :query,
      :"maxFluoride" => :query,
      :"minSaturatedFat" => :query,
      :"maxSaturatedFat" => :query,
      :"minVitaminA" => :query,
      :"maxVitaminA" => :query,
      :"minVitaminC" => :query,
      :"maxVitaminC" => :query,
      :"minVitaminD" => :query,
      :"maxVitaminD" => :query,
      :"minVitaminE" => :query,
      :"maxVitaminE" => :query,
      :"minVitaminK" => :query,
      :"maxVitaminK" => :query,
      :"minVitaminB1" => :query,
      :"maxVitaminB1" => :query,
      :"minVitaminB2" => :query,
      :"maxVitaminB2" => :query,
      :"minVitaminB5" => :query,
      :"maxVitaminB5" => :query,
      :"minVitaminB3" => :query,
      :"maxVitaminB3" => :query,
      :"minVitaminB6" => :query,
      :"maxVitaminB6" => :query,
      :"minVitaminB12" => :query,
      :"maxVitaminB12" => :query,
      :"minFiber" => :query,
      :"maxFiber" => :query,
      :"minFolate" => :query,
      :"maxFolate" => :query,
      :"minFolicAcid" => :query,
      :"maxFolicAcid" => :query,
      :"minIodine" => :query,
      :"maxIodine" => :query,
      :"minIron" => :query,
      :"maxIron" => :query,
      :"minMagnesium" => :query,
      :"maxMagnesium" => :query,
      :"minManganese" => :query,
      :"maxManganese" => :query,
      :"minPhosphorus" => :query,
      :"maxPhosphorus" => :query,
      :"minPotassium" => :query,
      :"maxPotassium" => :query,
      :"minSelenium" => :query,
      :"maxSelenium" => :query,
      :"minSodium" => :query,
      :"maxSodium" => :query,
      :"minSugar" => :query,
      :"maxSugar" => :query,
      :"minZinc" => :query,
      :"maxZinc" => :query,
      :"offset" => :query,
      :"number" => :query,
      :"limitLicense" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/complexSearch")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Search Site Content
  Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - query (String.t): The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec search_site_content(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def search_site_content(connection, query, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/food/site/search")
    |> add_param(:query, :"query", query)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Summarize Recipe
  Automatically generate a short description that summarizes key information about the recipe.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec summarize_recipe(Tesla.Env.client, float(), keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def summarize_recipe(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/summary")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Talk to Chatbot
  This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - text (String.t): The request / question / answer from the user to the chatbot.
  - opts (KeywordList): [optional] Optional parameters
    - :context_id (String.t): An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
  ## Returns

  {:ok, %com.spoonacular.client.Model.Map{}} on success
  {:error, info} on failure
  """
  @spec talk_to_chatbot(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def talk_to_chatbot(connection, text, opts \\ []) do
    optional_params = %{
      :"contextId" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/converse")
    |> add_param(:query, :"text", text)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Equipment
  Visualize the equipment used to make a recipe.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredient_list (String.t): The ingredient list of the recipe, one ingredient per line.
  - servings (float()): The number of servings.
  - opts (KeywordList): [optional] Optional parameters
    - :view (String.t): How to visualize the equipment, either \\\"grid\\\" or \\\"list\\\".
    - :default_css (boolean()): Whether the default CSS should be added to the response.
    - :show_backlink (boolean()): Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_equipment(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_equipment(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :"view" => :form,
      :"defaultCss" => :form,
      :"showBacklink" => :form
    }
    %{}
    |> method(:post)
    |> url("/recipes/visualizeEquipment")
    |> add_param(:form, :"ingredientList", ingredient_list)
    |> add_param(:form, :"servings", servings)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Ingredients
  Visualize ingredients of a recipe.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredient_list (String.t): The ingredient list of the recipe, one ingredient per line.
  - servings (float()): The number of servings.
  - opts (KeywordList): [optional] Optional parameters
    - :measure (String.t): The original system of measurement, either \\\"metric\\\" or \\\"us\\\".
    - :view (String.t): How to visualize the ingredients, either \\\"grid\\\" or \\\"list\\\".
    - :default_css (boolean()): Whether the default CSS should be added to the response.
    - :show_backlink (boolean()): Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_ingredients(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_ingredients(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :"measure" => :form,
      :"view" => :form,
      :"defaultCss" => :form,
      :"showBacklink" => :form
    }
    %{}
    |> method(:post)
    |> url("/recipes/visualizeIngredients")
    |> add_param(:form, :"ingredientList", ingredient_list)
    |> add_param(:form, :"servings", servings)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Menu Item Nutrition by ID
  Visualize a menu item's nutritional information as HTML including CSS.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The menu item id.
  - opts (KeywordList): [optional] Optional parameters
    - :default_css (boolean()): Whether the default CSS should be added to the response.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_menu_item_nutrition_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_menu_item_nutrition_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"defaultCss" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/menuItems/#{id}/nutritionWidget")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Price Breakdown
  Visualize the price breakdown of a recipe.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredient_list (String.t): The ingredient list of the recipe, one ingredient per line.
  - servings (float()): The number of servings.
  - opts (KeywordList): [optional] Optional parameters
    - :mode (float()): The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
    - :default_css (boolean()): Whether the default CSS should be added to the response.
    - :show_backlink (boolean()): Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_price_breakdown(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_price_breakdown(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :"mode" => :form,
      :"defaultCss" => :form,
      :"showBacklink" => :form
    }
    %{}
    |> method(:post)
    |> url("/recipes/visualizePriceEstimator")
    |> add_param(:form, :"ingredientList", ingredient_list)
    |> add_param(:form, :"servings", servings)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Product Nutrition by ID
  Visualize a product's nutritional information as HTML including CSS.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The id of the product.
  - opts (KeywordList): [optional] Optional parameters
    - :default_css (boolean()): Whether the default CSS should be added to the response.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_product_nutrition_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_product_nutrition_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"defaultCss" => :query
    }
    %{}
    |> method(:get)
    |> url("/food/products/#{id}/nutritionWidget")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Recipe Equipment by ID
  Visualize a recipe's equipment list.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
    - :default_css (boolean()): Whether the default CSS should be added to the response.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_recipe_equipment_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_equipment_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"defaultCss" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/equipmentWidget")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Recipe Ingredients by ID
  Visualize a recipe's ingredient list.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
    - :default_css (boolean()): Whether the default CSS should be added to the response.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_recipe_ingredients_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_ingredients_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"defaultCss" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/ingredientWidget")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Recipe Nutrition
  Visualize a recipe's nutritional information as HTML including CSS

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - ingredient_list (String.t): The ingredient list of the recipe, one ingredient per line.
  - servings (float()): The number of servings.
  - opts (KeywordList): [optional] Optional parameters
    - :default_css (boolean()): Whether the default CSS should be added to the response.
    - :show_backlink (boolean()): Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_recipe_nutrition(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_nutrition(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :"defaultCss" => :form,
      :"showBacklink" => :form
    }
    %{}
    |> method(:post)
    |> url("/recipes/visualizeNutrition")
    |> add_param(:form, :"ingredientList", ingredient_list)
    |> add_param(:form, :"servings", servings)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Recipe Nutrition by ID
  Visualize a recipe's nutritional information as HTML including CSS.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
    - :default_css (boolean()): Whether the default CSS should be added to the response.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_recipe_nutrition_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_nutrition_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"defaultCss" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/nutritionWidget")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Visualize Recipe Price Breakdown by ID
  Visualize a recipe's price breakdown.

  ## Parameters

  - connection (com.spoonacular.client.Connection): Connection to server
  - id (float()): The recipe id.
  - opts (KeywordList): [optional] Optional parameters
    - :default_css (boolean()): Whether the default CSS should be added to the response.
  ## Returns

  {:ok, %com.spoonacular.client.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec visualize_recipe_price_breakdown_by_id(Tesla.Env.client, float(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_price_breakdown_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"defaultCss" => :query
    }
    %{}
    |> method(:get)
    |> url("/recipes/#{id}/priceBreakdownWidget")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end
end
