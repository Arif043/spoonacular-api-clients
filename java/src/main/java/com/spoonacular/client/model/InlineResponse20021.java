/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.InlineResponse20021Calories;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse20021
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-09-28T20:40:32.759+02:00[Europe/Berlin]")
public class InlineResponse20021 {
  public static final String SERIALIZED_NAME_CALORIES = "calories";
  @SerializedName(SERIALIZED_NAME_CALORIES)
  private InlineResponse20021Calories calories = null;

  public static final String SERIALIZED_NAME_CARBS = "carbs";
  @SerializedName(SERIALIZED_NAME_CARBS)
  private InlineResponse20021Calories carbs = null;

  public static final String SERIALIZED_NAME_FAT = "fat";
  @SerializedName(SERIALIZED_NAME_FAT)
  private InlineResponse20021Calories fat = null;

  public static final String SERIALIZED_NAME_PROTEIN = "protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private InlineResponse20021Calories protein = null;

  public static final String SERIALIZED_NAME_RECIPES_USED = "recipesUsed";
  @SerializedName(SERIALIZED_NAME_RECIPES_USED)
  private Integer recipesUsed;

  public InlineResponse20021 calories(InlineResponse20021Calories calories) {
    this.calories = calories;
    return this;
  }

   /**
   * Get calories
   * @return calories
  **/
  @ApiModelProperty(required = true, value = "")
  public InlineResponse20021Calories getCalories() {
    return calories;
  }

  public void setCalories(InlineResponse20021Calories calories) {
    this.calories = calories;
  }

  public InlineResponse20021 carbs(InlineResponse20021Calories carbs) {
    this.carbs = carbs;
    return this;
  }

   /**
   * Get carbs
   * @return carbs
  **/
  @ApiModelProperty(required = true, value = "")
  public InlineResponse20021Calories getCarbs() {
    return carbs;
  }

  public void setCarbs(InlineResponse20021Calories carbs) {
    this.carbs = carbs;
  }

  public InlineResponse20021 fat(InlineResponse20021Calories fat) {
    this.fat = fat;
    return this;
  }

   /**
   * Get fat
   * @return fat
  **/
  @ApiModelProperty(required = true, value = "")
  public InlineResponse20021Calories getFat() {
    return fat;
  }

  public void setFat(InlineResponse20021Calories fat) {
    this.fat = fat;
  }

  public InlineResponse20021 protein(InlineResponse20021Calories protein) {
    this.protein = protein;
    return this;
  }

   /**
   * Get protein
   * @return protein
  **/
  @ApiModelProperty(required = true, value = "")
  public InlineResponse20021Calories getProtein() {
    return protein;
  }

  public void setProtein(InlineResponse20021Calories protein) {
    this.protein = protein;
  }

  public InlineResponse20021 recipesUsed(Integer recipesUsed) {
    this.recipesUsed = recipesUsed;
    return this;
  }

   /**
   * Get recipesUsed
   * @return recipesUsed
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getRecipesUsed() {
    return recipesUsed;
  }

  public void setRecipesUsed(Integer recipesUsed) {
    this.recipesUsed = recipesUsed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20021 inlineResponse20021 = (InlineResponse20021) o;
    return Objects.equals(this.calories, inlineResponse20021.calories) &&
        Objects.equals(this.carbs, inlineResponse20021.carbs) &&
        Objects.equals(this.fat, inlineResponse20021.fat) &&
        Objects.equals(this.protein, inlineResponse20021.protein) &&
        Objects.equals(this.recipesUsed, inlineResponse20021.recipesUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calories, carbs, fat, protein, recipesUsed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20021 {\n");
    sb.append("    calories: ").append(toIndentedString(calories)).append("\n");
    sb.append("    carbs: ").append(toIndentedString(carbs)).append("\n");
    sb.append("    fat: ").append(toIndentedString(fat)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("    recipesUsed: ").append(toIndentedString(recipesUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

