/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.spoonacular.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0-SNAPSHOT")
public class TasteInformation {
  public static final String SERIALIZED_NAME_SWEETNESS = "sweetness";
  @SerializedName(SERIALIZED_NAME_SWEETNESS)
  private BigDecimal sweetness;

  public static final String SERIALIZED_NAME_SALTINESS = "saltiness";
  @SerializedName(SERIALIZED_NAME_SALTINESS)
  private BigDecimal saltiness;

  public static final String SERIALIZED_NAME_SOURNESS = "sourness";
  @SerializedName(SERIALIZED_NAME_SOURNESS)
  private BigDecimal sourness;

  public static final String SERIALIZED_NAME_BITTERNESS = "bitterness";
  @SerializedName(SERIALIZED_NAME_BITTERNESS)
  private BigDecimal bitterness;

  public static final String SERIALIZED_NAME_SAVORINESS = "savoriness";
  @SerializedName(SERIALIZED_NAME_SAVORINESS)
  private BigDecimal savoriness;

  public static final String SERIALIZED_NAME_FATTINESS = "fattiness";
  @SerializedName(SERIALIZED_NAME_FATTINESS)
  private BigDecimal fattiness;

  public static final String SERIALIZED_NAME_SPICINESS = "spiciness";
  @SerializedName(SERIALIZED_NAME_SPICINESS)
  private BigDecimal spiciness;

  public TasteInformation() {
  }

  public TasteInformation sweetness(BigDecimal sweetness) {
    this.sweetness = sweetness;
    return this;
  }

  /**
   * Get sweetness
   * @return sweetness
   */
  @javax.annotation.Nonnull
  public BigDecimal getSweetness() {
    return sweetness;
  }

  public void setSweetness(BigDecimal sweetness) {
    this.sweetness = sweetness;
  }


  public TasteInformation saltiness(BigDecimal saltiness) {
    this.saltiness = saltiness;
    return this;
  }

  /**
   * Get saltiness
   * @return saltiness
   */
  @javax.annotation.Nonnull
  public BigDecimal getSaltiness() {
    return saltiness;
  }

  public void setSaltiness(BigDecimal saltiness) {
    this.saltiness = saltiness;
  }


  public TasteInformation sourness(BigDecimal sourness) {
    this.sourness = sourness;
    return this;
  }

  /**
   * Get sourness
   * @return sourness
   */
  @javax.annotation.Nonnull
  public BigDecimal getSourness() {
    return sourness;
  }

  public void setSourness(BigDecimal sourness) {
    this.sourness = sourness;
  }


  public TasteInformation bitterness(BigDecimal bitterness) {
    this.bitterness = bitterness;
    return this;
  }

  /**
   * Get bitterness
   * @return bitterness
   */
  @javax.annotation.Nonnull
  public BigDecimal getBitterness() {
    return bitterness;
  }

  public void setBitterness(BigDecimal bitterness) {
    this.bitterness = bitterness;
  }


  public TasteInformation savoriness(BigDecimal savoriness) {
    this.savoriness = savoriness;
    return this;
  }

  /**
   * Get savoriness
   * @return savoriness
   */
  @javax.annotation.Nonnull
  public BigDecimal getSavoriness() {
    return savoriness;
  }

  public void setSavoriness(BigDecimal savoriness) {
    this.savoriness = savoriness;
  }


  public TasteInformation fattiness(BigDecimal fattiness) {
    this.fattiness = fattiness;
    return this;
  }

  /**
   * Get fattiness
   * @return fattiness
   */
  @javax.annotation.Nonnull
  public BigDecimal getFattiness() {
    return fattiness;
  }

  public void setFattiness(BigDecimal fattiness) {
    this.fattiness = fattiness;
  }


  public TasteInformation spiciness(BigDecimal spiciness) {
    this.spiciness = spiciness;
    return this;
  }

  /**
   * Get spiciness
   * @return spiciness
   */
  @javax.annotation.Nonnull
  public BigDecimal getSpiciness() {
    return spiciness;
  }

  public void setSpiciness(BigDecimal spiciness) {
    this.spiciness = spiciness;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TasteInformation tasteInformation = (TasteInformation) o;
    return Objects.equals(this.sweetness, tasteInformation.sweetness) &&
        Objects.equals(this.saltiness, tasteInformation.saltiness) &&
        Objects.equals(this.sourness, tasteInformation.sourness) &&
        Objects.equals(this.bitterness, tasteInformation.bitterness) &&
        Objects.equals(this.savoriness, tasteInformation.savoriness) &&
        Objects.equals(this.fattiness, tasteInformation.fattiness) &&
        Objects.equals(this.spiciness, tasteInformation.spiciness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sweetness, saltiness, sourness, bitterness, savoriness, fattiness, spiciness);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TasteInformation {\n");
    sb.append("    sweetness: ").append(toIndentedString(sweetness)).append("\n");
    sb.append("    saltiness: ").append(toIndentedString(saltiness)).append("\n");
    sb.append("    sourness: ").append(toIndentedString(sourness)).append("\n");
    sb.append("    bitterness: ").append(toIndentedString(bitterness)).append("\n");
    sb.append("    savoriness: ").append(toIndentedString(savoriness)).append("\n");
    sb.append("    fattiness: ").append(toIndentedString(fattiness)).append("\n");
    sb.append("    spiciness: ").append(toIndentedString(spiciness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sweetness");
    openapiFields.add("saltiness");
    openapiFields.add("sourness");
    openapiFields.add("bitterness");
    openapiFields.add("savoriness");
    openapiFields.add("fattiness");
    openapiFields.add("spiciness");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sweetness");
    openapiRequiredFields.add("saltiness");
    openapiRequiredFields.add("sourness");
    openapiRequiredFields.add("bitterness");
    openapiRequiredFields.add("savoriness");
    openapiRequiredFields.add("fattiness");
    openapiRequiredFields.add("spiciness");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TasteInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TasteInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TasteInformation is not found in the empty JSON string", TasteInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TasteInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TasteInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TasteInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TasteInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TasteInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TasteInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TasteInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<TasteInformation>() {
           @Override
           public void write(JsonWriter out, TasteInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TasteInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TasteInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TasteInformation
   * @throws IOException if the JSON string is invalid with respect to TasteInformation
   */
  public static TasteInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TasteInformation.class);
  }

  /**
   * Convert an instance of TasteInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

