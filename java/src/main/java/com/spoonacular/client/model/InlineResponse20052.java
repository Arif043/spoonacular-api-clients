/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse20052
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-03T15:10:59.332+02:00[Europe/Berlin]")
public class InlineResponse20052 {
  public static final String SERIALIZED_NAME_ARTICLES = "Articles";
  @SerializedName(SERIALIZED_NAME_ARTICLES)
  private List<Object> articles = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROCERY_PRODUCTS = "Grocery Products";
  @SerializedName(SERIALIZED_NAME_GROCERY_PRODUCTS)
  private List<Object> groceryProducts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MENU_ITEMS = "Menu Items";
  @SerializedName(SERIALIZED_NAME_MENU_ITEMS)
  private List<Object> menuItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPES = "Recipes";
  @SerializedName(SERIALIZED_NAME_RECIPES)
  private List<Object> recipes = new ArrayList<>();

  public InlineResponse20052 articles(List<Object> articles) {
    this.articles = articles;
    return this;
  }

  public InlineResponse20052 addArticlesItem(Object articlesItem) {
    this.articles.add(articlesItem);
    return this;
  }

   /**
   * Get articles
   * @return articles
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Object> getArticles() {
    return articles;
  }

  public void setArticles(List<Object> articles) {
    this.articles = articles;
  }

  public InlineResponse20052 groceryProducts(List<Object> groceryProducts) {
    this.groceryProducts = groceryProducts;
    return this;
  }

  public InlineResponse20052 addGroceryProductsItem(Object groceryProductsItem) {
    this.groceryProducts.add(groceryProductsItem);
    return this;
  }

   /**
   * Get groceryProducts
   * @return groceryProducts
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Object> getGroceryProducts() {
    return groceryProducts;
  }

  public void setGroceryProducts(List<Object> groceryProducts) {
    this.groceryProducts = groceryProducts;
  }

  public InlineResponse20052 menuItems(List<Object> menuItems) {
    this.menuItems = menuItems;
    return this;
  }

  public InlineResponse20052 addMenuItemsItem(Object menuItemsItem) {
    this.menuItems.add(menuItemsItem);
    return this;
  }

   /**
   * Get menuItems
   * @return menuItems
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Object> getMenuItems() {
    return menuItems;
  }

  public void setMenuItems(List<Object> menuItems) {
    this.menuItems = menuItems;
  }

  public InlineResponse20052 recipes(List<Object> recipes) {
    this.recipes = recipes;
    return this;
  }

  public InlineResponse20052 addRecipesItem(Object recipesItem) {
    this.recipes.add(recipesItem);
    return this;
  }

   /**
   * Get recipes
   * @return recipes
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Object> getRecipes() {
    return recipes;
  }

  public void setRecipes(List<Object> recipes) {
    this.recipes = recipes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20052 inlineResponse20052 = (InlineResponse20052) o;
    return Objects.equals(this.articles, inlineResponse20052.articles) &&
        Objects.equals(this.groceryProducts, inlineResponse20052.groceryProducts) &&
        Objects.equals(this.menuItems, inlineResponse20052.menuItems) &&
        Objects.equals(this.recipes, inlineResponse20052.recipes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(articles, groceryProducts, menuItems, recipes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20052 {\n");
    sb.append("    articles: ").append(toIndentedString(articles)).append("\n");
    sb.append("    groceryProducts: ").append(toIndentedString(groceryProducts)).append("\n");
    sb.append("    menuItems: ").append(toIndentedString(menuItems)).append("\n");
    sb.append("    recipes: ").append(toIndentedString(recipes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

