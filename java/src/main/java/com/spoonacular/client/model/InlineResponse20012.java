/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse20012
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-09-28T20:40:32.759+02:00[Europe/Berlin]")
public class InlineResponse20012 {
  public static final String SERIALIZED_NAME_CALORIES = "calories";
  @SerializedName(SERIALIZED_NAME_CALORIES)
  private String calories;

  public static final String SERIALIZED_NAME_CARBS = "carbs";
  @SerializedName(SERIALIZED_NAME_CARBS)
  private String carbs;

  public static final String SERIALIZED_NAME_FAT = "fat";
  @SerializedName(SERIALIZED_NAME_FAT)
  private String fat;

  public static final String SERIALIZED_NAME_PROTEIN = "protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private String protein;

  public static final String SERIALIZED_NAME_BAD = "bad";
  @SerializedName(SERIALIZED_NAME_BAD)
  private List<Object> bad = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOD = "good";
  @SerializedName(SERIALIZED_NAME_GOOD)
  private List<Object> good = new ArrayList<>();

  public InlineResponse20012 calories(String calories) {
    this.calories = calories;
    return this;
  }

   /**
   * Get calories
   * @return calories
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCalories() {
    return calories;
  }

  public void setCalories(String calories) {
    this.calories = calories;
  }

  public InlineResponse20012 carbs(String carbs) {
    this.carbs = carbs;
    return this;
  }

   /**
   * Get carbs
   * @return carbs
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCarbs() {
    return carbs;
  }

  public void setCarbs(String carbs) {
    this.carbs = carbs;
  }

  public InlineResponse20012 fat(String fat) {
    this.fat = fat;
    return this;
  }

   /**
   * Get fat
   * @return fat
  **/
  @ApiModelProperty(required = true, value = "")
  public String getFat() {
    return fat;
  }

  public void setFat(String fat) {
    this.fat = fat;
  }

  public InlineResponse20012 protein(String protein) {
    this.protein = protein;
    return this;
  }

   /**
   * Get protein
   * @return protein
  **/
  @ApiModelProperty(required = true, value = "")
  public String getProtein() {
    return protein;
  }

  public void setProtein(String protein) {
    this.protein = protein;
  }

  public InlineResponse20012 bad(List<Object> bad) {
    this.bad = bad;
    return this;
  }

  public InlineResponse20012 addBadItem(Object badItem) {
    this.bad.add(badItem);
    return this;
  }

   /**
   * Get bad
   * @return bad
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Object> getBad() {
    return bad;
  }

  public void setBad(List<Object> bad) {
    this.bad = bad;
  }

  public InlineResponse20012 good(List<Object> good) {
    this.good = good;
    return this;
  }

  public InlineResponse20012 addGoodItem(Object goodItem) {
    this.good.add(goodItem);
    return this;
  }

   /**
   * Get good
   * @return good
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Object> getGood() {
    return good;
  }

  public void setGood(List<Object> good) {
    this.good = good;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20012 inlineResponse20012 = (InlineResponse20012) o;
    return Objects.equals(this.calories, inlineResponse20012.calories) &&
        Objects.equals(this.carbs, inlineResponse20012.carbs) &&
        Objects.equals(this.fat, inlineResponse20012.fat) &&
        Objects.equals(this.protein, inlineResponse20012.protein) &&
        Objects.equals(this.bad, inlineResponse20012.bad) &&
        Objects.equals(this.good, inlineResponse20012.good);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calories, carbs, fat, protein, bad, good);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20012 {\n");
    sb.append("    calories: ").append(toIndentedString(calories)).append("\n");
    sb.append("    carbs: ").append(toIndentedString(carbs)).append("\n");
    sb.append("    fat: ").append(toIndentedString(fat)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("    bad: ").append(toIndentedString(bad)).append("\n");
    sb.append("    good: ").append(toIndentedString(good)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

