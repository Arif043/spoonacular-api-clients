/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular;

import com.spoonacular.client.ApiCallback;
import com.spoonacular.client.ApiClient;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiResponse;
import com.spoonacular.client.Configuration;
import com.spoonacular.client.Pair;
import com.spoonacular.client.ProgressRequestBody;
import com.spoonacular.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.spoonacular.client.model.InlineObject3;
import com.spoonacular.client.model.InlineObject4;
import com.spoonacular.client.model.InlineObject5;
import com.spoonacular.client.model.InlineObject6;
import com.spoonacular.client.model.InlineObject7;
import com.spoonacular.client.model.InlineObject8;
import com.spoonacular.client.model.InlineResponse20037;
import com.spoonacular.client.model.InlineResponse20038;
import com.spoonacular.client.model.InlineResponse20039;
import com.spoonacular.client.model.InlineResponse20040;
import com.spoonacular.client.model.InlineResponse20041;
import com.spoonacular.client.model.InlineResponse20042;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MealPlanningApi {
    private ApiClient localVarApiClient;

    public MealPlanningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MealPlanningApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addToMealPlan
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public okhttp3.Call addToMealPlanCall(String username, String hash, InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject4;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/items"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToMealPlanValidateBeforeCall(String username, String hash, InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addToMealPlan(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling addToMealPlan(Async)");
        }
        
        // verify the required parameter 'inlineObject4' is set
        if (inlineObject4 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject4' when calling addToMealPlan(Async)");
        }
        

        okhttp3.Call localVarCall = addToMealPlanCall(username, hash, inlineObject4, _callback);
        return localVarCall;

    }

    /**
     * Add to Meal Plan
     * Add an item to the user&#39;s meal plan.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject4  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public Object addToMealPlan(String username, String hash, InlineObject4 inlineObject4) throws ApiException {
        ApiResponse<Object> localVarResp = addToMealPlanWithHttpInfo(username, hash, inlineObject4);
        return localVarResp.getData();
    }

    /**
     * Add to Meal Plan
     * Add an item to the user&#39;s meal plan.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject4  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public ApiResponse<Object> addToMealPlanWithHttpInfo(String username, String hash, InlineObject4 inlineObject4) throws ApiException {
        okhttp3.Call localVarCall = addToMealPlanValidateBeforeCall(username, hash, inlineObject4, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add to Meal Plan (asynchronously)
     * Add an item to the user&#39;s meal plan.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Meal-Plan">Add to Meal Plan Documentation</a>
     */
    public okhttp3.Call addToMealPlanAsync(String username, String hash, InlineObject4 inlineObject4, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToMealPlanValidateBeforeCall(username, hash, inlineObject4, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addToShoppingList
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject7  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public okhttp3.Call addToShoppingListCall(String username, String hash, InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject7;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list/items"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToShoppingListValidateBeforeCall(String username, String hash, InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addToShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling addToShoppingList(Async)");
        }
        
        // verify the required parameter 'inlineObject7' is set
        if (inlineObject7 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject7' when calling addToShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = addToShoppingListCall(username, hash, inlineObject7, _callback);
        return localVarCall;

    }

    /**
     * Add to Shopping List
     * Add an item to the current shopping list of a user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject7  (required)
     * @return InlineResponse20041
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public InlineResponse20041 addToShoppingList(String username, String hash, InlineObject7 inlineObject7) throws ApiException {
        ApiResponse<InlineResponse20041> localVarResp = addToShoppingListWithHttpInfo(username, hash, inlineObject7);
        return localVarResp.getData();
    }

    /**
     * Add to Shopping List
     * Add an item to the current shopping list of a user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject7  (required)
     * @return ApiResponse&lt;InlineResponse20041&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public ApiResponse<InlineResponse20041> addToShoppingListWithHttpInfo(String username, String hash, InlineObject7 inlineObject7) throws ApiException {
        okhttp3.Call localVarCall = addToShoppingListValidateBeforeCall(username, hash, inlineObject7, null);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add to Shopping List (asynchronously)
     * Add an item to the current shopping list of a user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject7  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Add-to-Shopping-List">Add to Shopping List Documentation</a>
     */
    public okhttp3.Call addToShoppingListAsync(String username, String hash, InlineObject7 inlineObject7, final ApiCallback<InlineResponse20041> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToShoppingListValidateBeforeCall(username, hash, inlineObject7, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearMealPlanDay
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public okhttp3.Call clearMealPlanDayCall(String username, String date, String hash, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject3;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/day/{date}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "date" + "\\}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearMealPlanDayValidateBeforeCall(String username, String date, String hash, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling clearMealPlanDay(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling clearMealPlanDay(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling clearMealPlanDay(Async)");
        }
        
        // verify the required parameter 'inlineObject3' is set
        if (inlineObject3 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject3' when calling clearMealPlanDay(Async)");
        }
        

        okhttp3.Call localVarCall = clearMealPlanDayCall(username, date, hash, inlineObject3, _callback);
        return localVarCall;

    }

    /**
     * Clear Meal Plan Day
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject3  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public Object clearMealPlanDay(String username, String date, String hash, InlineObject3 inlineObject3) throws ApiException {
        ApiResponse<Object> localVarResp = clearMealPlanDayWithHttpInfo(username, date, hash, inlineObject3);
        return localVarResp.getData();
    }

    /**
     * Clear Meal Plan Day
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject3  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public ApiResponse<Object> clearMealPlanDayWithHttpInfo(String username, String date, String hash, InlineObject3 inlineObject3) throws ApiException {
        okhttp3.Call localVarCall = clearMealPlanDayValidateBeforeCall(username, date, hash, inlineObject3, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear Meal Plan Day (asynchronously)
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username. (required)
     * @param date The date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day">Clear Meal Plan Day Documentation</a>
     */
    public okhttp3.Call clearMealPlanDayAsync(String username, String date, String hash, InlineObject3 inlineObject3, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearMealPlanDayValidateBeforeCall(username, date, hash, inlineObject3, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectUser
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public okhttp3.Call connectUserCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users/connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectUserValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling connectUser(Async)");
        }
        

        okhttp3.Call localVarCall = connectUserCall(body, _callback);
        return localVarCall;

    }

    /**
     * Connect User
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param body  (required)
     * @return InlineResponse20042
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public InlineResponse20042 connectUser(Object body) throws ApiException {
        ApiResponse<InlineResponse20042> localVarResp = connectUserWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Connect User
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param body  (required)
     * @return ApiResponse&lt;InlineResponse20042&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public ApiResponse<InlineResponse20042> connectUserWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = connectUserValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<InlineResponse20042>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connect User (asynchronously)
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Connect-User">Connect User Documentation</a>
     */
    public okhttp3.Call connectUserAsync(Object body, final ApiCallback<InlineResponse20042> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectUserValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20042>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFromMealPlan
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject5  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public okhttp3.Call deleteFromMealPlanCall(String username, BigDecimal id, String hash, InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject5;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/items/{id}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFromMealPlanValidateBeforeCall(String username, BigDecimal id, String hash, InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteFromMealPlan(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFromMealPlan(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling deleteFromMealPlan(Async)");
        }
        
        // verify the required parameter 'inlineObject5' is set
        if (inlineObject5 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject5' when calling deleteFromMealPlan(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFromMealPlanCall(username, id, hash, inlineObject5, _callback);
        return localVarCall;

    }

    /**
     * Delete from Meal Plan
     * Delete an item from the user&#39;s meal plan.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject5  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public Object deleteFromMealPlan(String username, BigDecimal id, String hash, InlineObject5 inlineObject5) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFromMealPlanWithHttpInfo(username, id, hash, inlineObject5);
        return localVarResp.getData();
    }

    /**
     * Delete from Meal Plan
     * Delete an item from the user&#39;s meal plan.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject5  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public ApiResponse<Object> deleteFromMealPlanWithHttpInfo(String username, BigDecimal id, String hash, InlineObject5 inlineObject5) throws ApiException {
        okhttp3.Call localVarCall = deleteFromMealPlanValidateBeforeCall(username, id, hash, inlineObject5, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete from Meal Plan (asynchronously)
     * Delete an item from the user&#39;s meal plan.
     * @param username The username. (required)
     * @param id The shopping list item id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject5  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan">Delete from Meal Plan Documentation</a>
     */
    public okhttp3.Call deleteFromMealPlanAsync(String username, BigDecimal id, String hash, InlineObject5 inlineObject5, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFromMealPlanValidateBeforeCall(username, id, hash, inlineObject5, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFromShoppingList
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject8  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public okhttp3.Call deleteFromShoppingListCall(String username, Integer id, String hash, InlineObject8 inlineObject8, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject8;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list/items/{id}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFromShoppingListValidateBeforeCall(String username, Integer id, String hash, InlineObject8 inlineObject8, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteFromShoppingList(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFromShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling deleteFromShoppingList(Async)");
        }
        
        // verify the required parameter 'inlineObject8' is set
        if (inlineObject8 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject8' when calling deleteFromShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFromShoppingListCall(username, id, hash, inlineObject8, _callback);
        return localVarCall;

    }

    /**
     * Delete from Shopping List
     * Delete an item from the current shopping list of the user.
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject8  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public Object deleteFromShoppingList(String username, Integer id, String hash, InlineObject8 inlineObject8) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFromShoppingListWithHttpInfo(username, id, hash, inlineObject8);
        return localVarResp.getData();
    }

    /**
     * Delete from Shopping List
     * Delete an item from the current shopping list of the user.
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject8  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public ApiResponse<Object> deleteFromShoppingListWithHttpInfo(String username, Integer id, String hash, InlineObject8 inlineObject8) throws ApiException {
        okhttp3.Call localVarCall = deleteFromShoppingListValidateBeforeCall(username, id, hash, inlineObject8, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete from Shopping List (asynchronously)
     * Delete an item from the current shopping list of the user.
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject8  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Delete-from-Shopping-List">Delete from Shopping List Documentation</a>
     */
    public okhttp3.Call deleteFromShoppingListAsync(String username, Integer id, String hash, InlineObject8 inlineObject8, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFromShoppingListValidateBeforeCall(username, id, hash, inlineObject8, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateMealPlan
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public okhttp3.Call generateMealPlanCall(String timeFrame, BigDecimal targetCalories, String diet, String exclude, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (targetCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetCalories", targetCalories));
        }

        if (diet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diet", diet));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMealPlanValidateBeforeCall(String timeFrame, BigDecimal targetCalories, String diet, String exclude, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateMealPlanCall(timeFrame, targetCalories, diet, exclude, _callback);
        return localVarCall;

    }

    /**
     * Generate Meal Plan
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @return InlineResponse20037
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public InlineResponse20037 generateMealPlan(String timeFrame, BigDecimal targetCalories, String diet, String exclude) throws ApiException {
        ApiResponse<InlineResponse20037> localVarResp = generateMealPlanWithHttpInfo(timeFrame, targetCalories, diet, exclude);
        return localVarResp.getData();
    }

    /**
     * Generate Meal Plan
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @return ApiResponse&lt;InlineResponse20037&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public ApiResponse<InlineResponse20037> generateMealPlanWithHttpInfo(String timeFrame, BigDecimal targetCalories, String diet, String exclude) throws ApiException {
        okhttp3.Call localVarCall = generateMealPlanValidateBeforeCall(timeFrame, targetCalories, diet, exclude, null);
        Type localVarReturnType = new TypeToken<InlineResponse20037>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Meal Plan (asynchronously)
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Meal-Plan">Generate Meal Plan Documentation</a>
     */
    public okhttp3.Call generateMealPlanAsync(String timeFrame, BigDecimal targetCalories, String diet, String exclude, final ApiCallback<InlineResponse20037> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMealPlanValidateBeforeCall(timeFrame, targetCalories, diet, exclude, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20037>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateShoppingList
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject6  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public okhttp3.Call generateShoppingListCall(String username, String startDate, String endDate, String hash, InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject6;

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list/{start-date}/{end-date}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "start-date" + "\\}", localVarApiClient.escapeString(startDate.toString()))
            .replaceAll("\\{" + "end-date" + "\\}", localVarApiClient.escapeString(endDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateShoppingListValidateBeforeCall(String username, String startDate, String endDate, String hash, InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling generateShoppingList(Async)");
        }
        
        // verify the required parameter 'inlineObject6' is set
        if (inlineObject6 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject6' when calling generateShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = generateShoppingListCall(username, startDate, endDate, hash, inlineObject6, _callback);
        return localVarCall;

    }

    /**
     * Generate Shopping List
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject6  (required)
     * @return InlineResponse20041
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public InlineResponse20041 generateShoppingList(String username, String startDate, String endDate, String hash, InlineObject6 inlineObject6) throws ApiException {
        ApiResponse<InlineResponse20041> localVarResp = generateShoppingListWithHttpInfo(username, startDate, endDate, hash, inlineObject6);
        return localVarResp.getData();
    }

    /**
     * Generate Shopping List
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject6  (required)
     * @return ApiResponse&lt;InlineResponse20041&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public ApiResponse<InlineResponse20041> generateShoppingListWithHttpInfo(String username, String startDate, String endDate, String hash, InlineObject6 inlineObject6) throws ApiException {
        okhttp3.Call localVarCall = generateShoppingListValidateBeforeCall(username, startDate, endDate, hash, inlineObject6, null);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Shopping List (asynchronously)
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username. (required)
     * @param startDate The start date in the format yyyy-mm-dd. (required)
     * @param endDate The end date in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param inlineObject6  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Generate-Shopping-List">Generate Shopping List Documentation</a>
     */
    public okhttp3.Call generateShoppingListAsync(String username, String startDate, String endDate, String hash, InlineObject6 inlineObject6, final ApiCallback<InlineResponse20041> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateShoppingListValidateBeforeCall(username, startDate, endDate, hash, inlineObject6, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMealPlanTemplate
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplateCall(String username, Integer id, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/templates/{id}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMealPlanTemplateValidateBeforeCall(String username, Integer id, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlanTemplate(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMealPlanTemplate(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getMealPlanTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = getMealPlanTemplateCall(username, id, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Meal Plan Template
     * Get information about a meal plan template.
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @return InlineResponse20040
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public InlineResponse20040 getMealPlanTemplate(String username, Integer id, String hash) throws ApiException {
        ApiResponse<InlineResponse20040> localVarResp = getMealPlanTemplateWithHttpInfo(username, id, hash);
        return localVarResp.getData();
    }

    /**
     * Get Meal Plan Template
     * Get information about a meal plan template.
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;InlineResponse20040&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public ApiResponse<InlineResponse20040> getMealPlanTemplateWithHttpInfo(String username, Integer id, String hash) throws ApiException {
        okhttp3.Call localVarCall = getMealPlanTemplateValidateBeforeCall(username, id, hash, null);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meal Plan Template (asynchronously)
     * Get information about a meal plan template.
     * @param username The username. (required)
     * @param id The item&#39;s id. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template">Get Meal Plan Template Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplateAsync(String username, Integer id, String hash, final ApiCallback<InlineResponse20040> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMealPlanTemplateValidateBeforeCall(username, id, hash, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMealPlanTemplates
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplatesCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/templates"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMealPlanTemplatesValidateBeforeCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlanTemplates(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getMealPlanTemplates(Async)");
        }
        

        okhttp3.Call localVarCall = getMealPlanTemplatesCall(username, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Meal Plan Templates
     * Get meal plan templates from user or public ones.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return InlineResponse20039
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public InlineResponse20039 getMealPlanTemplates(String username, String hash) throws ApiException {
        ApiResponse<InlineResponse20039> localVarResp = getMealPlanTemplatesWithHttpInfo(username, hash);
        return localVarResp.getData();
    }

    /**
     * Get Meal Plan Templates
     * Get meal plan templates from user or public ones.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;InlineResponse20039&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public ApiResponse<InlineResponse20039> getMealPlanTemplatesWithHttpInfo(String username, String hash) throws ApiException {
        okhttp3.Call localVarCall = getMealPlanTemplatesValidateBeforeCall(username, hash, null);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meal Plan Templates (asynchronously)
     * Get meal plan templates from user or public ones.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates">Get Meal Plan Templates Documentation</a>
     */
    public okhttp3.Call getMealPlanTemplatesAsync(String username, String hash, final ApiCallback<InlineResponse20039> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMealPlanTemplatesValidateBeforeCall(username, hash, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMealPlanWeek
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public okhttp3.Call getMealPlanWeekCall(String username, String startDate, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/week/{start-date}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()))
            .replaceAll("\\{" + "start-date" + "\\}", localVarApiClient.escapeString(startDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMealPlanWeekValidateBeforeCall(String username, String startDate, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlanWeek(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getMealPlanWeek(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getMealPlanWeek(Async)");
        }
        

        okhttp3.Call localVarCall = getMealPlanWeekCall(username, startDate, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Meal Plan Week
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @return InlineResponse20038
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public InlineResponse20038 getMealPlanWeek(String username, String startDate, String hash) throws ApiException {
        ApiResponse<InlineResponse20038> localVarResp = getMealPlanWeekWithHttpInfo(username, startDate, hash);
        return localVarResp.getData();
    }

    /**
     * Get Meal Plan Week
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;InlineResponse20038&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public ApiResponse<InlineResponse20038> getMealPlanWeekWithHttpInfo(String username, String startDate, String hash) throws ApiException {
        okhttp3.Call localVarCall = getMealPlanWeekValidateBeforeCall(username, startDate, hash, null);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meal Plan Week (asynchronously)
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username. (required)
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week">Get Meal Plan Week Documentation</a>
     */
    public okhttp3.Call getMealPlanWeekAsync(String username, String startDate, String hash, final ApiCallback<InlineResponse20038> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMealPlanWeekValidateBeforeCall(username, startDate, hash, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShoppingList
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public okhttp3.Call getShoppingListCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/mealplanner/{username}/shopping-list"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShoppingListValidateBeforeCall(String username, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getShoppingList(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getShoppingList(Async)");
        }
        

        okhttp3.Call localVarCall = getShoppingListCall(username, hash, _callback);
        return localVarCall;

    }

    /**
     * Get Shopping List
     * Get the current shopping list for the given user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return InlineResponse20041
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public InlineResponse20041 getShoppingList(String username, String hash) throws ApiException {
        ApiResponse<InlineResponse20041> localVarResp = getShoppingListWithHttpInfo(username, hash);
        return localVarResp.getData();
    }

    /**
     * Get Shopping List
     * Get the current shopping list for the given user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @return ApiResponse&lt;InlineResponse20041&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public ApiResponse<InlineResponse20041> getShoppingListWithHttpInfo(String username, String hash) throws ApiException {
        okhttp3.Call localVarCall = getShoppingListValidateBeforeCall(username, hash, null);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shopping List (asynchronously)
     * Get the current shopping list for the given user.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Shopping-List">Get Shopping List Documentation</a>
     */
    public okhttp3.Call getShoppingListAsync(String username, String hash, final ApiCallback<InlineResponse20041> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShoppingListValidateBeforeCall(username, hash, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
