/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular;

import com.spoonacular.client.ApiCallback;
import com.spoonacular.client.ApiClient;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiResponse;
import com.spoonacular.client.Configuration;
import com.spoonacular.client.Pair;
import com.spoonacular.client.ProgressRequestBody;
import com.spoonacular.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.spoonacular.client.model.InlineResponse20029;
import com.spoonacular.client.model.InlineResponse20047;
import com.spoonacular.client.model.InlineResponse20048;
import com.spoonacular.client.model.InlineResponse20050;
import com.spoonacular.client.model.InlineResponse20051;
import com.spoonacular.client.model.InlineResponse20052;
import com.spoonacular.client.model.InlineResponse20053;
import com.spoonacular.client.model.InlineResponse20054;
import com.spoonacular.client.model.InlineResponse20055;
import com.spoonacular.client.model.InlineResponse20056;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MiscApi {
    private ApiClient localVarApiClient;

    public MiscApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MiscApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for detectFoodInText
     * @param contentType The content type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public okhttp3.Call detectFoodInTextCall(String contentType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/detect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectFoodInTextValidateBeforeCall(String contentType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = detectFoodInTextCall(contentType, _callback);
        return localVarCall;

    }

    /**
     * Detect Food in Text
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     * @param contentType The content type. (optional)
     * @return InlineResponse20050
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public InlineResponse20050 detectFoodInText(String contentType) throws ApiException {
        ApiResponse<InlineResponse20050> localVarResp = detectFoodInTextWithHttpInfo(contentType);
        return localVarResp.getData();
    }

    /**
     * Detect Food in Text
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     * @param contentType The content type. (optional)
     * @return ApiResponse&lt;InlineResponse20050&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public ApiResponse<InlineResponse20050> detectFoodInTextWithHttpInfo(String contentType) throws ApiException {
        okhttp3.Call localVarCall = detectFoodInTextValidateBeforeCall(contentType, null);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect Food in Text (asynchronously)
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     * @param contentType The content type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Detect-Food-in-Text">Detect Food in Text Documentation</a>
     */
    public okhttp3.Call detectFoodInTextAsync(String contentType, final ApiCallback<InlineResponse20050> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectFoodInTextValidateBeforeCall(contentType, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getARandomFoodJoke
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Joke">Random Food Joke Documentation</a>
     */
    public okhttp3.Call getARandomFoodJokeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/jokes/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getARandomFoodJokeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getARandomFoodJokeCall(_callback);
        return localVarCall;

    }

    /**
     * Random Food Joke
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     * @return InlineResponse20054
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Joke">Random Food Joke Documentation</a>
     */
    public InlineResponse20054 getARandomFoodJoke() throws ApiException {
        ApiResponse<InlineResponse20054> localVarResp = getARandomFoodJokeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Random Food Joke
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     * @return ApiResponse&lt;InlineResponse20054&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Joke">Random Food Joke Documentation</a>
     */
    public ApiResponse<InlineResponse20054> getARandomFoodJokeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getARandomFoodJokeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Food Joke (asynchronously)
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Joke">Random Food Joke Documentation</a>
     */
    public okhttp3.Call getARandomFoodJokeAsync(final ApiCallback<InlineResponse20054> _callback) throws ApiException {

        okhttp3.Call localVarCall = getARandomFoodJokeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConversationSuggests
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Conversation-Suggests">Conversation Suggests Documentation</a>
     */
    public okhttp3.Call getConversationSuggestsCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/converse/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationSuggestsValidateBeforeCall(String query, BigDecimal number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getConversationSuggests(Async)");
        }
        

        okhttp3.Call localVarCall = getConversationSuggestsCall(query, number, _callback);
        return localVarCall;

    }

    /**
     * Conversation Suggests
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @return InlineResponse20056
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Conversation-Suggests">Conversation Suggests Documentation</a>
     */
    public InlineResponse20056 getConversationSuggests(String query, BigDecimal number) throws ApiException {
        ApiResponse<InlineResponse20056> localVarResp = getConversationSuggestsWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Conversation Suggests
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @return ApiResponse&lt;InlineResponse20056&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Conversation-Suggests">Conversation Suggests Documentation</a>
     */
    public ApiResponse<InlineResponse20056> getConversationSuggestsWithHttpInfo(String query, BigDecimal number) throws ApiException {
        okhttp3.Call localVarCall = getConversationSuggestsValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<InlineResponse20056>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Conversation Suggests (asynchronously)
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
     * @param number The number of suggestions to return (between 1 and 25). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Conversation-Suggests">Conversation Suggests Documentation</a>
     */
    public okhttp3.Call getConversationSuggestsAsync(String query, BigDecimal number, final ApiCallback<InlineResponse20056> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationSuggestsValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20056>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRandomFoodTrivia
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Trivia">Random Food Trivia Documentation</a>
     */
    public okhttp3.Call getRandomFoodTriviaCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/trivia/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomFoodTriviaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRandomFoodTriviaCall(_callback);
        return localVarCall;

    }

    /**
     * Random Food Trivia
     * Returns random food trivia.
     * @return InlineResponse20054
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Trivia">Random Food Trivia Documentation</a>
     */
    public InlineResponse20054 getRandomFoodTrivia() throws ApiException {
        ApiResponse<InlineResponse20054> localVarResp = getRandomFoodTriviaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Random Food Trivia
     * Returns random food trivia.
     * @return ApiResponse&lt;InlineResponse20054&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Trivia">Random Food Trivia Documentation</a>
     */
    public ApiResponse<InlineResponse20054> getRandomFoodTriviaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRandomFoodTriviaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Food Trivia (asynchronously)
     * Returns random food trivia.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Random-Food-Trivia">Random Food Trivia Documentation</a>
     */
    public okhttp3.Call getRandomFoodTriviaAsync(final ApiCallback<InlineResponse20054> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomFoodTriviaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageAnalysisByURL
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public okhttp3.Call imageAnalysisByURLCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/images/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageUrl", imageUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageAnalysisByURLValidateBeforeCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling imageAnalysisByURL(Async)");
        }
        

        okhttp3.Call localVarCall = imageAnalysisByURLCall(imageUrl, _callback);
        return localVarCall;

    }

    /**
     * Image Analysis by URL
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @return InlineResponse20048
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public InlineResponse20048 imageAnalysisByURL(String imageUrl) throws ApiException {
        ApiResponse<InlineResponse20048> localVarResp = imageAnalysisByURLWithHttpInfo(imageUrl);
        return localVarResp.getData();
    }

    /**
     * Image Analysis by URL
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @return ApiResponse&lt;InlineResponse20048&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public ApiResponse<InlineResponse20048> imageAnalysisByURLWithHttpInfo(String imageUrl) throws ApiException {
        okhttp3.Call localVarCall = imageAnalysisByURLValidateBeforeCall(imageUrl, null);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image Analysis by URL (asynchronously)
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
     * @param imageUrl The URL of the image to be analyzed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Analysis-by-URL">Image Analysis by URL Documentation</a>
     */
    public okhttp3.Call imageAnalysisByURLAsync(String imageUrl, final ApiCallback<InlineResponse20048> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageAnalysisByURLValidateBeforeCall(imageUrl, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageClassificationByURL
     * @param imageUrl The URL of the image to be classified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public okhttp3.Call imageClassificationByURLCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/images/classify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageUrl", imageUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageClassificationByURLValidateBeforeCall(String imageUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling imageClassificationByURL(Async)");
        }
        

        okhttp3.Call localVarCall = imageClassificationByURLCall(imageUrl, _callback);
        return localVarCall;

    }

    /**
     * Image Classification by URL
     * Classify a food image.
     * @param imageUrl The URL of the image to be classified. (required)
     * @return InlineResponse20047
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public InlineResponse20047 imageClassificationByURL(String imageUrl) throws ApiException {
        ApiResponse<InlineResponse20047> localVarResp = imageClassificationByURLWithHttpInfo(imageUrl);
        return localVarResp.getData();
    }

    /**
     * Image Classification by URL
     * Classify a food image.
     * @param imageUrl The URL of the image to be classified. (required)
     * @return ApiResponse&lt;InlineResponse20047&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public ApiResponse<InlineResponse20047> imageClassificationByURLWithHttpInfo(String imageUrl) throws ApiException {
        okhttp3.Call localVarCall = imageClassificationByURLValidateBeforeCall(imageUrl, null);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image Classification by URL (asynchronously)
     * Classify a food image.
     * @param imageUrl The URL of the image to be classified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Image-Classification-by-URL">Image Classification by URL Documentation</a>
     */
    public okhttp3.Call imageClassificationByURLAsync(String imageUrl, final ApiCallback<InlineResponse20047> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageClassificationByURLValidateBeforeCall(imageUrl, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAllFood
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public okhttp3.Call searchAllFoodCall(String query, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAllFoodValidateBeforeCall(String query, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchAllFood(Async)");
        }
        

        okhttp3.Call localVarCall = searchAllFoodCall(query, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search All Food
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return InlineResponse20052
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public InlineResponse20052 searchAllFood(String query, Integer offset, Integer number) throws ApiException {
        ApiResponse<InlineResponse20052> localVarResp = searchAllFoodWithHttpInfo(query, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search All Food
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse&lt;InlineResponse20052&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public ApiResponse<InlineResponse20052> searchAllFoodWithHttpInfo(String query, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchAllFoodValidateBeforeCall(query, offset, number, null);
        Type localVarReturnType = new TypeToken<InlineResponse20052>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search All Food (asynchronously)
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     * @param query The search query. (required)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-All-Food">Search All Food Documentation</a>
     */
    public okhttp3.Call searchAllFoodAsync(String query, Integer offset, Integer number, final ApiCallback<InlineResponse20052> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAllFoodValidateBeforeCall(query, offset, number, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20052>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCustomFoods
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param query The (natural language) search query. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public okhttp3.Call searchCustomFoodsCall(String username, String hash, String query, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/customFoods/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCustomFoodsValidateBeforeCall(String username, String hash, String query, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling searchCustomFoods(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling searchCustomFoods(Async)");
        }
        

        okhttp3.Call localVarCall = searchCustomFoodsCall(username, hash, query, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search Custom Foods
     * Search custom foods in a user&#39;s account.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param query The (natural language) search query. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return InlineResponse20029
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public InlineResponse20029 searchCustomFoods(String username, String hash, String query, Integer offset, Integer number) throws ApiException {
        ApiResponse<InlineResponse20029> localVarResp = searchCustomFoodsWithHttpInfo(username, hash, query, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Custom Foods
     * Search custom foods in a user&#39;s account.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param query The (natural language) search query. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse&lt;InlineResponse20029&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public ApiResponse<InlineResponse20029> searchCustomFoodsWithHttpInfo(String username, String hash, String query, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchCustomFoodsValidateBeforeCall(username, hash, query, offset, number, null);
        Type localVarReturnType = new TypeToken<InlineResponse20029>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Custom Foods (asynchronously)
     * Search custom foods in a user&#39;s account.
     * @param username The username. (required)
     * @param hash The private hash for the username. (required)
     * @param query The (natural language) search query. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Custom-Foods">Search Custom Foods Documentation</a>
     */
    public okhttp3.Call searchCustomFoodsAsync(String username, String hash, String query, Integer offset, Integer number, final ApiCallback<InlineResponse20029> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCustomFoodsValidateBeforeCall(username, hash, query, offset, number, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20029>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchFoodVideos
     * @param query The (natural language) search query. (optional)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public okhttp3.Call searchFoodVideosCall(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/videos/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (cuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cuisine", cuisine));
        }

        if (diet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diet", diet));
        }

        if (includeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeIngredients", includeIngredients));
        }

        if (excludeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeIngredients", excludeIngredients));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minLength", minLength));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLength", maxLength));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFoodVideosValidateBeforeCall(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchFoodVideosCall(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search Food Videos
     * Find recipe and other food related videos.
     * @param query The (natural language) search query. (optional)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return InlineResponse20053
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public InlineResponse20053 searchFoodVideos(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, Integer offset, Integer number) throws ApiException {
        ApiResponse<InlineResponse20053> localVarResp = searchFoodVideosWithHttpInfo(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Food Videos
     * Find recipe and other food related videos.
     * @param query The (natural language) search query. (optional)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse&lt;InlineResponse20053&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public ApiResponse<InlineResponse20053> searchFoodVideosWithHttpInfo(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchFoodVideosValidateBeforeCall(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, null);
        Type localVarReturnType = new TypeToken<InlineResponse20053>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Food Videos (asynchronously)
     * Find recipe and other food related videos.
     * @param query The (natural language) search query. (optional)
     * @param type The type of the recipes. See a full list of supported meal types. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param minLength Minimum video length in seconds. (optional)
     * @param maxLength Maximum video length in seconds. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Food-Videos">Search Food Videos Documentation</a>
     */
    public okhttp3.Call searchFoodVideosAsync(String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, Integer offset, Integer number, final ApiCallback<InlineResponse20053> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFoodVideosValidateBeforeCall(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20053>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSiteContent
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public okhttp3.Call searchSiteContentCall(String query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/site/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSiteContentValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchSiteContent(Async)");
        }
        

        okhttp3.Call localVarCall = searchSiteContentCall(query, _callback);
        return localVarCall;

    }

    /**
     * Search Site Content
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @return InlineResponse20051
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public InlineResponse20051 searchSiteContent(String query) throws ApiException {
        ApiResponse<InlineResponse20051> localVarResp = searchSiteContentWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * Search Site Content
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @return ApiResponse&lt;InlineResponse20051&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public ApiResponse<InlineResponse20051> searchSiteContentWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = searchSiteContentValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<InlineResponse20051>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Site Content (asynchronously)
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Site-Content">Search Site Content Documentation</a>
     */
    public okhttp3.Call searchSiteContentAsync(String query, final ApiCallback<InlineResponse20051> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSiteContentValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20051>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for talkToChatbot
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public okhttp3.Call talkToChatbotCall(String text, String contextId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/food/converse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (contextId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextId", contextId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call talkToChatbotValidateBeforeCall(String text, String contextId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling talkToChatbot(Async)");
        }
        

        okhttp3.Call localVarCall = talkToChatbotCall(text, contextId, _callback);
        return localVarCall;

    }

    /**
     * Talk to Chatbot
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @return InlineResponse20055
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public InlineResponse20055 talkToChatbot(String text, String contextId) throws ApiException {
        ApiResponse<InlineResponse20055> localVarResp = talkToChatbotWithHttpInfo(text, contextId);
        return localVarResp.getData();
    }

    /**
     * Talk to Chatbot
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @return ApiResponse&lt;InlineResponse20055&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public ApiResponse<InlineResponse20055> talkToChatbotWithHttpInfo(String text, String contextId) throws ApiException {
        okhttp3.Call localVarCall = talkToChatbotValidateBeforeCall(text, contextId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20055>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Talk to Chatbot (asynchronously)
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     * @param text The request / question / answer from the user to the chatbot. (required)
     * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Talk-to-Chatbot">Talk to Chatbot Documentation</a>
     */
    public okhttp3.Call talkToChatbotAsync(String text, String contextId, final ApiCallback<InlineResponse20055> _callback) throws ApiException {

        okhttp3.Call localVarCall = talkToChatbotValidateBeforeCall(text, contextId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20055>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
