/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular;

import com.spoonacular.client.ApiException;
import java.math.BigDecimal;
import com.spoonacular.client.model.InlineResponse20043;
import com.spoonacular.client.model.InlineResponse20044;
import com.spoonacular.client.model.InlineResponse20045;
import com.spoonacular.client.model.InlineResponse20046;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WineApi
 */
@Ignore
public class WineApiTest {

    private final WineApi api = new WineApi();

    
    /**
     * Dish Pairing for Wine
     *
     * Find a dish that goes well with a given wine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDishPairingForWineTest() throws ApiException {
        String wine = null;
        InlineResponse20043 response = api.getDishPairingForWine(wine);

        // TODO: test validations
    }
    
    /**
     * Wine Description
     *
     * Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWineDescriptionTest() throws ApiException {
        String wine = null;
        InlineResponse20045 response = api.getWineDescription(wine);

        // TODO: test validations
    }
    
    /**
     * Wine Pairing
     *
     * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWinePairingTest() throws ApiException {
        String food = null;
        BigDecimal maxPrice = null;
        InlineResponse20044 response = api.getWinePairing(food, maxPrice);

        // TODO: test validations
    }
    
    /**
     * Wine Recommendation
     *
     * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWineRecommendationTest() throws ApiException {
        String wine = null;
        BigDecimal maxPrice = null;
        BigDecimal minRating = null;
        BigDecimal number = null;
        InlineResponse20046 response = api.getWineRecommendation(wine, maxPrice, minRating, number);

        // TODO: test validations
    }
    
}
