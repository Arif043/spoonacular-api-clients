=begin
#spoonacular API

#The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.0
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'uri'

module OpenapiClient
  class ProductsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Autocomplete Product Search
    # Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
    # @param query [String] The (partial) search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of results to return (between 1 and 25).
    # @return [InlineResponse20032]
    def autocomplete_product_search(query, opts = {})
      data, _status_code, _headers = autocomplete_product_search_with_http_info(query, opts)
      data
    end

    # Autocomplete Product Search
    # Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
    # @param query [String] The (partial) search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of results to return (between 1 and 25).
    # @return [Array<(InlineResponse20032, Integer, Hash)>] InlineResponse20032 data, response status code and response headers
    def autocomplete_product_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.autocomplete_product_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling ProductsApi.autocomplete_product_search"
      end
      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 25
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling ProductsApi.autocomplete_product_search, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling ProductsApi.autocomplete_product_search, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/food/products/suggest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20032' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#autocomplete_product_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Classify Grocery Product
    # This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
    # @param inline_object1 [InlineObject1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [InlineResponse20033]
    def classify_grocery_product(inline_object1, opts = {})
      data, _status_code, _headers = classify_grocery_product_with_http_info(inline_object1, opts)
      data
    end

    # Classify Grocery Product
    # This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
    # @param inline_object1 [InlineObject1] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [Array<(InlineResponse20033, Integer, Hash)>] InlineResponse20033 data, response status code and response headers
    def classify_grocery_product_with_http_info(inline_object1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.classify_grocery_product ...'
      end
      # verify the required parameter 'inline_object1' is set
      if @api_client.config.client_side_validation && inline_object1.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object1' when calling ProductsApi.classify_grocery_product"
      end
      allowable_values = ["en_US", "en_GB"]
      if @api_client.config.client_side_validation && opts[:'locale'] && !allowable_values.include?(opts[:'locale'])
        fail ArgumentError, "invalid value for \"locale\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/food/products/classify'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locale'] = opts[:'locale'] if !opts[:'locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object1) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20033' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#classify_grocery_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Classify Grocery Product Bulk
    # Provide a set of product jsons, get back classified products.
    # @param inline_object [Array<InlineObject>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [Array<InlineResponse20033>]
    def classify_grocery_product_bulk(inline_object, opts = {})
      data, _status_code, _headers = classify_grocery_product_bulk_with_http_info(inline_object, opts)
      data
    end

    # Classify Grocery Product Bulk
    # Provide a set of product jsons, get back classified products.
    # @param inline_object [Array<InlineObject>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [Array<(Array<InlineResponse20033>, Integer, Hash)>] Array<InlineResponse20033> data, response status code and response headers
    def classify_grocery_product_bulk_with_http_info(inline_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.classify_grocery_product_bulk ...'
      end
      # verify the required parameter 'inline_object' is set
      if @api_client.config.client_side_validation && inline_object.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object' when calling ProductsApi.classify_grocery_product_bulk"
      end
      # resource path
      local_var_path = '/food/products/classifyBatch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locale'] = opts[:'locale'] if !opts[:'locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object) 

      # return_type
      return_type = opts[:return_type] || 'Array<InlineResponse20033>' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#classify_grocery_product_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Comparable Products
    # Find comparable products to the given one.
    # @param upc [Float] The UPC of the product for which you want to find comparable products.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20031]
    def get_comparable_products(upc, opts = {})
      data, _status_code, _headers = get_comparable_products_with_http_info(upc, opts)
      data
    end

    # Get Comparable Products
    # Find comparable products to the given one.
    # @param upc [Float] The UPC of the product for which you want to find comparable products.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20031, Integer, Hash)>] InlineResponse20031 data, response status code and response headers
    def get_comparable_products_with_http_info(upc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_comparable_products ...'
      end
      # verify the required parameter 'upc' is set
      if @api_client.config.client_side_validation && upc.nil?
        fail ArgumentError, "Missing the required parameter 'upc' when calling ProductsApi.get_comparable_products"
      end
      # resource path
      local_var_path = '/food/products/upc/{upc}/comparable'.sub('{' + 'upc' + '}', upc.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20031' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_comparable_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Product Information
    # Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20030]
    def get_product_information(id, opts = {})
      data, _status_code, _headers = get_product_information_with_http_info(id, opts)
      data
    end

    # Get Product Information
    # Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20030, Integer, Hash)>] InlineResponse20030 data, response status code and response headers
    def get_product_information_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_product_information ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.get_product_information"
      end
      # resource path
      local_var_path = '/food/products/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20030' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_product_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Product Nutrition by ID Image
    # Visualize a product's nutritional information as an image.
    # @param id [Float] The id of the product.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def product_nutrition_by_id_image(id, opts = {})
      data, _status_code, _headers = product_nutrition_by_id_image_with_http_info(id, opts)
      data
    end

    # Product Nutrition by ID Image
    # Visualize a product&#39;s nutritional information as an image.
    # @param id [Float] The id of the product.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def product_nutrition_by_id_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.product_nutrition_by_id_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.product_nutrition_by_id_image"
      end
      # resource path
      local_var_path = '/food/products/{id}/nutritionWidget.png'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#product_nutrition_by_id_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Product Nutrition Label Image
    # Get a product's nutrition label as an image.
    # @param id [Float] The product id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [Object]
    def product_nutrition_label_image(id, opts = {})
      data, _status_code, _headers = product_nutrition_label_image_with_http_info(id, opts)
      data
    end

    # Product Nutrition Label Image
    # Get a product&#39;s nutrition label as an image.
    # @param id [Float] The product id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def product_nutrition_label_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.product_nutrition_label_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.product_nutrition_label_image"
      end
      # resource path
      local_var_path = '/food/products/{id}/nutritionLabel.png'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'showOptionalNutrients'] = opts[:'show_optional_nutrients'] if !opts[:'show_optional_nutrients'].nil?
      query_params[:'showZeroValues'] = opts[:'show_zero_values'] if !opts[:'show_zero_values'].nil?
      query_params[:'showIngredients'] = opts[:'show_ingredients'] if !opts[:'show_ingredients'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#product_nutrition_label_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Product Nutrition Label Widget
    # Get a product's nutrition label as an HTML widget.
    # @param id [Float] The product id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [String]
    def product_nutrition_label_widget(id, opts = {})
      data, _status_code, _headers = product_nutrition_label_widget_with_http_info(id, opts)
      data
    end

    # Product Nutrition Label Widget
    # Get a product&#39;s nutrition label as an HTML widget.
    # @param id [Float] The product id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def product_nutrition_label_widget_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.product_nutrition_label_widget ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.product_nutrition_label_widget"
      end
      # resource path
      local_var_path = '/food/products/{id}/nutritionLabel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      query_params[:'showOptionalNutrients'] = opts[:'show_optional_nutrients'] if !opts[:'show_optional_nutrients'].nil?
      query_params[:'showZeroValues'] = opts[:'show_zero_values'] if !opts[:'show_zero_values'].nil?
      query_params[:'showIngredients'] = opts[:'show_ingredients'] if !opts[:'show_ingredients'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#product_nutrition_label_widget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Grocery Products
    # Search packaged food products, such as frozen pizza or Greek yogurt.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The (natural language) search query.
    # @option opts [Float] :min_calories The minimum amount of calories the product must have.
    # @option opts [Float] :max_calories The maximum amount of calories the product can have.
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the product must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the product can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the product must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the product can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the product must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the product can have.
    # @option opts [Boolean] :add_product_information If set to true, you get more information about the products returned.
    # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @return [InlineResponse20027]
    def search_grocery_products(opts = {})
      data, _status_code, _headers = search_grocery_products_with_http_info(opts)
      data
    end

    # Search Grocery Products
    # Search packaged food products, such as frozen pizza or Greek yogurt.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The (natural language) search query.
    # @option opts [Float] :min_calories The minimum amount of calories the product must have.
    # @option opts [Float] :max_calories The maximum amount of calories the product can have.
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the product must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the product can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the product must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the product can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the product must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the product can have.
    # @option opts [Boolean] :add_product_information If set to true, you get more information about the products returned.
    # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10.
    # @return [Array<(InlineResponse20027, Integer, Hash)>] InlineResponse20027 data, response status code and response headers
    def search_grocery_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.search_grocery_products ...'
      end
      allowable_values = ["false", "true"]
      if @api_client.config.client_side_validation && opts[:'add_product_information'] && !allowable_values.include?(opts[:'add_product_information'])
        fail ArgumentError, "invalid value for \"add_product_information\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 900
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProductsApi.search_grocery_products, must be smaller than or equal to 900.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ProductsApi.search_grocery_products, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling ProductsApi.search_grocery_products, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling ProductsApi.search_grocery_products, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/food/products/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'minCalories'] = opts[:'min_calories'] if !opts[:'min_calories'].nil?
      query_params[:'maxCalories'] = opts[:'max_calories'] if !opts[:'max_calories'].nil?
      query_params[:'minCarbs'] = opts[:'min_carbs'] if !opts[:'min_carbs'].nil?
      query_params[:'maxCarbs'] = opts[:'max_carbs'] if !opts[:'max_carbs'].nil?
      query_params[:'minProtein'] = opts[:'min_protein'] if !opts[:'min_protein'].nil?
      query_params[:'maxProtein'] = opts[:'max_protein'] if !opts[:'max_protein'].nil?
      query_params[:'minFat'] = opts[:'min_fat'] if !opts[:'min_fat'].nil?
      query_params[:'maxFat'] = opts[:'max_fat'] if !opts[:'max_fat'].nil?
      query_params[:'addProductInformation'] = opts[:'add_product_information'] if !opts[:'add_product_information'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20027' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#search_grocery_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Grocery Products by UPC
    # Get information about a packaged food using its UPC.
    # @param upc [Float] The product&#39;s UPC.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20028]
    def search_grocery_products_by_upc(upc, opts = {})
      data, _status_code, _headers = search_grocery_products_by_upc_with_http_info(upc, opts)
      data
    end

    # Search Grocery Products by UPC
    # Get information about a packaged food using its UPC.
    # @param upc [Float] The product&#39;s UPC.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20028, Integer, Hash)>] InlineResponse20028 data, response status code and response headers
    def search_grocery_products_by_upc_with_http_info(upc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.search_grocery_products_by_upc ...'
      end
      # verify the required parameter 'upc' is set
      if @api_client.config.client_side_validation && upc.nil?
        fail ArgumentError, "Missing the required parameter 'upc' when calling ProductsApi.search_grocery_products_by_upc"
      end
      # resource path
      local_var_path = '/food/products/upc/{upc}'.sub('{' + 'upc' + '}', upc.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20028' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#search_grocery_products_by_upc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Product Nutrition by ID Widget
    # Visualize a product's nutritional information as HTML including CSS.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @option opts [String] :accept Accept header.
    # @return [String]
    def visualize_product_nutrition_by_id(id, opts = {})
      data, _status_code, _headers = visualize_product_nutrition_by_id_with_http_info(id, opts)
      data
    end

    # Product Nutrition by ID Widget
    # Visualize a product&#39;s nutritional information as HTML including CSS.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [String] :accept Accept header.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_product_nutrition_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.visualize_product_nutrition_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.visualize_product_nutrition_by_id"
      end
      allowable_values = ["application/json", "text/html", "media/*"]
      if @api_client.config.client_side_validation && opts[:'accept'] && !allowable_values.include?(opts[:'accept'])
        fail ArgumentError, "invalid value for \"accept\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/food/products/{id}/nutritionWidget'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#visualize_product_nutrition_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
