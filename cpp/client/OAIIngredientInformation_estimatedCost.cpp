/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngredientInformation_estimatedCost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngredientInformation_estimatedCost::OAIIngredientInformation_estimatedCost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngredientInformation_estimatedCost::OAIIngredientInformation_estimatedCost() {
    this->initializeModel();
}

OAIIngredientInformation_estimatedCost::~OAIIngredientInformation_estimatedCost() {}

void OAIIngredientInformation_estimatedCost::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIIngredientInformation_estimatedCost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIngredientInformation_estimatedCost::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIIngredientInformation_estimatedCost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIngredientInformation_estimatedCost::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

double OAIIngredientInformation_estimatedCost::getValue() const {
    return m_value;
}
void OAIIngredientInformation_estimatedCost::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIIngredientInformation_estimatedCost::is_value_Set() const{
    return m_value_isSet;
}

bool OAIIngredientInformation_estimatedCost::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIIngredientInformation_estimatedCost::getUnit() const {
    return m_unit;
}
void OAIIngredientInformation_estimatedCost::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIIngredientInformation_estimatedCost::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIIngredientInformation_estimatedCost::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIIngredientInformation_estimatedCost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIngredientInformation_estimatedCost::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && m_unit_isValid && true;
}

} // namespace OpenAPI
