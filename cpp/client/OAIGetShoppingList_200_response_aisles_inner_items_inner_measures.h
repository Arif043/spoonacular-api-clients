/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetShoppingList_200_response_aisles_inner_items_inner_measures.h
 *
 * 
 */

#ifndef OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_H
#define OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_H

#include <QJsonObject>

#include "OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original;

class OAIGetShoppingList_200_response_aisles_inner_items_inner_measures : public OAIObject {
public:
    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures();
    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures(QString json);
    ~OAIGetShoppingList_200_response_aisles_inner_items_inner_measures() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original getOriginal() const;
    void setOriginal(const OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original &original);
    bool is_original_Set() const;
    bool is_original_Valid() const;

    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original getMetric() const;
    void setMetric(const OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original getUs() const;
    void setUs(const OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original &us);
    bool is_us_Set() const;
    bool is_us_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original m_original;
    bool m_original_isSet;
    bool m_original_isValid;

    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_original m_us;
    bool m_us_isSet;
    bool m_us_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetShoppingList_200_response_aisles_inner_items_inner_measures)

#endif // OAIGetShoppingList_200_response_aisles_inner_items_inner_measures_H
