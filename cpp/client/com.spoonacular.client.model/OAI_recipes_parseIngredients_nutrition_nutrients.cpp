/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAI_recipes_parseIngredients_nutrition_nutrients.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAI_recipes_parseIngredients_nutrition_nutrients::OAI_recipes_parseIngredients_nutrition_nutrients(QString json) {
    this->init();
    this->fromJson(json);
}

OAI_recipes_parseIngredients_nutrition_nutrients::OAI_recipes_parseIngredients_nutrition_nutrients() {
    this->init();
}

OAI_recipes_parseIngredients_nutrition_nutrients::~OAI_recipes_parseIngredients_nutrition_nutrients() {

}

void
OAI_recipes_parseIngredients_nutrition_nutrients::init() {
    
    m_name_isSet = false;
    m_name_isValid = false;
    
    m_amount_isSet = false;
    m_amount_isValid = false;
    
    m_unit_isSet = false;
    m_unit_isValid = false;
    
    m_percent_of_daily_needs_isSet = false;
    m_percent_of_daily_needs_isValid = false;
    }

void
OAI_recipes_parseIngredients_nutrition_nutrients::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAI_recipes_parseIngredients_nutrition_nutrients::fromJsonObject(QJsonObject json) {
    
    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    
    m_amount_isValid = ::OpenAPI::fromJsonValue(amount, json[QString("amount")]);
    
    
    m_unit_isValid = ::OpenAPI::fromJsonValue(unit, json[QString("unit")]);
    
    
    m_percent_of_daily_needs_isValid = ::OpenAPI::fromJsonValue(percent_of_daily_needs, json[QString("percentOfDailyNeeds")]);
    
    
}

QString
OAI_recipes_parseIngredients_nutrition_nutrients::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAI_recipes_parseIngredients_nutrition_nutrients::asJsonObject() const {
    QJsonObject obj;
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(amount.isSet()){
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(amount));
    }
	if(m_unit_isSet){
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(unit));
    }
	if(percent_of_daily_needs.isSet()){
        obj.insert(QString("percentOfDailyNeeds"), ::OpenAPI::toJsonValue(percent_of_daily_needs));
    }
    return obj;
}


QString
OAI_recipes_parseIngredients_nutrition_nutrients::getName() const {
    return name;
}
void
OAI_recipes_parseIngredients_nutrition_nutrients::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}


OAINumber
OAI_recipes_parseIngredients_nutrition_nutrients::getAmount() const {
    return amount;
}
void
OAI_recipes_parseIngredients_nutrition_nutrients::setAmount(const OAINumber &amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}


QString
OAI_recipes_parseIngredients_nutrition_nutrients::getUnit() const {
    return unit;
}
void
OAI_recipes_parseIngredients_nutrition_nutrients::setUnit(const QString &unit) {
    this->unit = unit;
    this->m_unit_isSet = true;
}


OAINumber
OAI_recipes_parseIngredients_nutrition_nutrients::getPercentOfDailyNeeds() const {
    return percent_of_daily_needs;
}
void
OAI_recipes_parseIngredients_nutrition_nutrients::setPercentOfDailyNeeds(const OAINumber &percent_of_daily_needs) {
    this->percent_of_daily_needs = percent_of_daily_needs;
    this->m_percent_of_daily_needs_isSet = true;
}

bool
OAI_recipes_parseIngredients_nutrition_nutrients::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(amount.isSet()){ isObjectUpdated = true; break;}
    
        if(m_unit_isSet){ isObjectUpdated = true; break;}
    
        if(percent_of_daily_needs.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAI_recipes_parseIngredients_nutrition_nutrients::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_amount_isValid && m_unit_isValid && m_percent_of_daily_needs_isValid && true;
}

}

