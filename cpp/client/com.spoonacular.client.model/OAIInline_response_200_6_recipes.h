/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInline_response_200_6_recipes.h
 *
 * 
 */

#ifndef OAIInline_response_200_6_recipes_H
#define OAIInline_response_200_6_recipes_H

#include <QJsonObject>


#include "com.spoonacular.client.model\OAIInline_response_200_3_extendedIngredients.h"
#include "com.spoonacular.client.model\OAIInline_response_200_3_winePairing.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include "com.spoonacular.client.model\OAIObject.h"
#include <QList>
#include <QString>

#include "OAIObject.h"
#include "OAIEnum.h"

namespace OpenAPI {

class OAIInline_response_200_6_recipes: public OAIObject {
public:
    OAIInline_response_200_6_recipes();
    OAIInline_response_200_6_recipes(QString json);
    ~OAIInline_response_200_6_recipes() override;

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    
    qint32 getId() const;
    void setId(const qint32 &id);

    
    QString getTitle() const;
    void setTitle(const QString &title);

    
    QString getImage() const;
    void setImage(const QString &image);

    
    QString getImageType() const;
    void setImageType(const QString &image_type);

    
    OAINumber getServings() const;
    void setServings(const OAINumber &servings);

    
    qint32 getReadyInMinutes() const;
    void setReadyInMinutes(const qint32 &ready_in_minutes);

    
    QString getLicense() const;
    void setLicense(const QString &license);

    
    QString getSourceName() const;
    void setSourceName(const QString &source_name);

    
    QString getSourceUrl() const;
    void setSourceUrl(const QString &source_url);

    
    QString getSpoonacularSourceUrl() const;
    void setSpoonacularSourceUrl(const QString &spoonacular_source_url);

    
    OAINumber getAggregateLikes() const;
    void setAggregateLikes(const OAINumber &aggregate_likes);

    
    OAINumber getHealthScore() const;
    void setHealthScore(const OAINumber &health_score);

    
    OAINumber getSpoonacularScore() const;
    void setSpoonacularScore(const OAINumber &spoonacular_score);

    
    OAINumber getPricePerServing() const;
    void setPricePerServing(const OAINumber &price_per_serving);

    
    QList<OAIObject> getAnalyzedInstructions() const;
    void setAnalyzedInstructions(const QList<OAIObject> &analyzed_instructions);

    
    bool isCheap() const;
    void setCheap(const bool &cheap);

    
    QString getCreditsText() const;
    void setCreditsText(const QString &credits_text);

    
    QList<QString> getCuisines() const;
    void setCuisines(const QList<QString> &cuisines);

    
    bool isDairyFree() const;
    void setDairyFree(const bool &dairy_free);

    
    QList<QString> getDiets() const;
    void setDiets(const QList<QString> &diets);

    
    QString getGaps() const;
    void setGaps(const QString &gaps);

    
    bool isGlutenFree() const;
    void setGlutenFree(const bool &gluten_free);

    
    QString getInstructions() const;
    void setInstructions(const QString &instructions);

    
    bool isKetogenic() const;
    void setKetogenic(const bool &ketogenic);

    
    bool isLowFodmap() const;
    void setLowFodmap(const bool &low_fodmap);

    
    QList<QString> getOccasions() const;
    void setOccasions(const QList<QString> &occasions);

    
    bool isSustainable() const;
    void setSustainable(const bool &sustainable);

    
    bool isVegan() const;
    void setVegan(const bool &vegan);

    
    bool isVegetarian() const;
    void setVegetarian(const bool &vegetarian);

    
    bool isVeryHealthy() const;
    void setVeryHealthy(const bool &very_healthy);

    
    bool isVeryPopular() const;
    void setVeryPopular(const bool &very_popular);

    
    bool isWhole30() const;
    void setWhole30(const bool &whole30);

    
    OAINumber getWeightWatcherSmartPoints() const;
    void setWeightWatcherSmartPoints(const OAINumber &weight_watcher_smart_points);

    
    QList<QString> getDishTypes() const;
    void setDishTypes(const QList<QString> &dish_types);

    
    QList<OAIInline_response_200_3_extendedIngredients> getExtendedIngredients() const;
    void setExtendedIngredients(const QList<OAIInline_response_200_3_extendedIngredients> &extended_ingredients);

    
    QString getSummary() const;
    void setSummary(const QString &summary);

    
    OAIInline_response_200_3_winePairing getWinePairing() const;
    void setWinePairing(const OAIInline_response_200_3_winePairing &wine_pairing);

    
    
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void init();
    
    qint32 id;
    bool m_id_isSet;
    bool m_id_isValid;
    
    QString title;
    bool m_title_isSet;
    bool m_title_isValid;
    
    QString image;
    bool m_image_isSet;
    bool m_image_isValid;
    
    QString image_type;
    bool m_image_type_isSet;
    bool m_image_type_isValid;
    
    OAINumber servings;
    bool m_servings_isSet;
    bool m_servings_isValid;
    
    qint32 ready_in_minutes;
    bool m_ready_in_minutes_isSet;
    bool m_ready_in_minutes_isValid;
    
    QString license;
    bool m_license_isSet;
    bool m_license_isValid;
    
    QString source_name;
    bool m_source_name_isSet;
    bool m_source_name_isValid;
    
    QString source_url;
    bool m_source_url_isSet;
    bool m_source_url_isValid;
    
    QString spoonacular_source_url;
    bool m_spoonacular_source_url_isSet;
    bool m_spoonacular_source_url_isValid;
    
    OAINumber aggregate_likes;
    bool m_aggregate_likes_isSet;
    bool m_aggregate_likes_isValid;
    
    OAINumber health_score;
    bool m_health_score_isSet;
    bool m_health_score_isValid;
    
    OAINumber spoonacular_score;
    bool m_spoonacular_score_isSet;
    bool m_spoonacular_score_isValid;
    
    OAINumber price_per_serving;
    bool m_price_per_serving_isSet;
    bool m_price_per_serving_isValid;
    
    QList<OAIObject> analyzed_instructions;
    bool m_analyzed_instructions_isSet;
    bool m_analyzed_instructions_isValid;
    
    bool cheap;
    bool m_cheap_isSet;
    bool m_cheap_isValid;
    
    QString credits_text;
    bool m_credits_text_isSet;
    bool m_credits_text_isValid;
    
    QList<QString> cuisines;
    bool m_cuisines_isSet;
    bool m_cuisines_isValid;
    
    bool dairy_free;
    bool m_dairy_free_isSet;
    bool m_dairy_free_isValid;
    
    QList<QString> diets;
    bool m_diets_isSet;
    bool m_diets_isValid;
    
    QString gaps;
    bool m_gaps_isSet;
    bool m_gaps_isValid;
    
    bool gluten_free;
    bool m_gluten_free_isSet;
    bool m_gluten_free_isValid;
    
    QString instructions;
    bool m_instructions_isSet;
    bool m_instructions_isValid;
    
    bool ketogenic;
    bool m_ketogenic_isSet;
    bool m_ketogenic_isValid;
    
    bool low_fodmap;
    bool m_low_fodmap_isSet;
    bool m_low_fodmap_isValid;
    
    QList<QString> occasions;
    bool m_occasions_isSet;
    bool m_occasions_isValid;
    
    bool sustainable;
    bool m_sustainable_isSet;
    bool m_sustainable_isValid;
    
    bool vegan;
    bool m_vegan_isSet;
    bool m_vegan_isValid;
    
    bool vegetarian;
    bool m_vegetarian_isSet;
    bool m_vegetarian_isValid;
    
    bool very_healthy;
    bool m_very_healthy_isSet;
    bool m_very_healthy_isValid;
    
    bool very_popular;
    bool m_very_popular_isSet;
    bool m_very_popular_isValid;
    
    bool whole30;
    bool m_whole30_isSet;
    bool m_whole30_isValid;
    
    OAINumber weight_watcher_smart_points;
    bool m_weight_watcher_smart_points_isSet;
    bool m_weight_watcher_smart_points_isValid;
    
    QList<QString> dish_types;
    bool m_dish_types_isSet;
    bool m_dish_types_isValid;
    
    QList<OAIInline_response_200_3_extendedIngredients> extended_ingredients;
    bool m_extended_ingredients_isSet;
    bool m_extended_ingredients_isValid;
    
    QString summary;
    bool m_summary_isSet;
    bool m_summary_isValid;
    
    OAIInline_response_200_3_winePairing wine_pairing;
    bool m_wine_pairing_isSet;
    bool m_wine_pairing_isValid;
    
    };

}

#endif // OAIInline_response_200_6_recipes_H
