/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInline_response_200_8.h
 *
 * 
 */

#ifndef OAIInline_response_200_8_H
#define OAIInline_response_200_8_H

#include <QJsonObject>


#include "com.spoonacular.client.model\OAINumber.h"

#include "OAIObject.h"
#include "OAIEnum.h"

namespace OpenAPI {

class OAIInline_response_200_8: public OAIObject {
public:
    OAIInline_response_200_8();
    OAIInline_response_200_8(QString json);
    ~OAIInline_response_200_8() override;

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    
    OAINumber getSweetness() const;
    void setSweetness(const OAINumber &sweetness);

    
    OAINumber getSaltiness() const;
    void setSaltiness(const OAINumber &saltiness);

    
    OAINumber getSourness() const;
    void setSourness(const OAINumber &sourness);

    
    OAINumber getBitterness() const;
    void setBitterness(const OAINumber &bitterness);

    
    OAINumber getSavoriness() const;
    void setSavoriness(const OAINumber &savoriness);

    
    OAINumber getFattiness() const;
    void setFattiness(const OAINumber &fattiness);

    
    OAINumber getSpiciness() const;
    void setSpiciness(const OAINumber &spiciness);

    
    
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void init();
    
    OAINumber sweetness;
    bool m_sweetness_isSet;
    bool m_sweetness_isValid;
    
    OAINumber saltiness;
    bool m_saltiness_isSet;
    bool m_saltiness_isValid;
    
    OAINumber sourness;
    bool m_sourness_isSet;
    bool m_sourness_isValid;
    
    OAINumber bitterness;
    bool m_bitterness_isSet;
    bool m_bitterness_isValid;
    
    OAINumber savoriness;
    bool m_savoriness_isSet;
    bool m_savoriness_isValid;
    
    OAINumber fattiness;
    bool m_fattiness_isSet;
    bool m_fattiness_isValid;
    
    OAINumber spiciness;
    bool m_spiciness_isSet;
    bool m_spiciness_isValid;
    
    };

}

#endif // OAIInline_response_200_8_H
