/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInline_object_3.h
 *
 * 
 */

#ifndef OAIInline_object_3_H
#define OAIInline_object_3_H

#include <QJsonObject>


#include "OAIHttpRequest.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include <QString>

#include "OAIObject.h"
#include "OAIEnum.h"

namespace OpenAPI {

class OAIInline_object_3: public OAIObject {
public:
    OAIInline_object_3();
    OAIInline_object_3(QString json);
    ~OAIInline_object_3() override;

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    
    QString getTitle() const;
    void setTitle(const QString &title);

    
    OAIHttpRequestInputFileElement* getImage() const;
    void setImage(const OAIHttpRequestInputFileElement* &image);

    
    QString getIngredients() const;
    void setIngredients(const QString &ingredients);

    
    QString getInstructions() const;
    void setInstructions(const QString &instructions);

    
    OAINumber getReadyInMinutes() const;
    void setReadyInMinutes(const OAINumber &ready_in_minutes);

    
    OAINumber getServings() const;
    void setServings(const OAINumber &servings);

    
    QString getMask() const;
    void setMask(const QString &mask);

    
    QString getBackgroundImage() const;
    void setBackgroundImage(const QString &background_image);

    
    QString getAuthor() const;
    void setAuthor(const QString &author);

    
    QString getBackgroundColor() const;
    void setBackgroundColor(const QString &background_color);

    
    QString getFontColor() const;
    void setFontColor(const QString &font_color);

    
    QString getSource() const;
    void setSource(const QString &source);

    
    
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void init();
    
    QString title;
    bool m_title_isSet;
    bool m_title_isValid;
    
    OAIHttpRequestInputFileElement* image;
    bool m_image_isSet;
    bool m_image_isValid;
    
    QString ingredients;
    bool m_ingredients_isSet;
    bool m_ingredients_isValid;
    
    QString instructions;
    bool m_instructions_isSet;
    bool m_instructions_isValid;
    
    OAINumber ready_in_minutes;
    bool m_ready_in_minutes_isSet;
    bool m_ready_in_minutes_isValid;
    
    OAINumber servings;
    bool m_servings_isSet;
    bool m_servings_isValid;
    
    QString mask;
    bool m_mask_isSet;
    bool m_mask_isValid;
    
    QString background_image;
    bool m_background_image_isSet;
    bool m_background_image_isValid;
    
    QString author;
    bool m_author_isSet;
    bool m_author_isValid;
    
    QString background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;
    
    QString font_color;
    bool m_font_color_isSet;
    bool m_font_color_isValid;
    
    QString source;
    bool m_source_isSet;
    bool m_source_isValid;
    
    };

}

#endif // OAIInline_object_3_H
