/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200_30.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInline_response_200_30::OAIInline_response_200_30(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200_30::OAIInline_response_200_30() {
    this->init();
}

OAIInline_response_200_30::~OAIInline_response_200_30() {

}

void
OAIInline_response_200_30::init() {
    
    m_id_isSet = false;
    m_id_isValid = false;
    
    m_title_isSet = false;
    m_title_isValid = false;
    
    m_breadcrumbs_isSet = false;
    m_breadcrumbs_isValid = false;
    
    m_image_type_isSet = false;
    m_image_type_isValid = false;
    
    m_badges_isSet = false;
    m_badges_isValid = false;
    
    m_important_badges_isSet = false;
    m_important_badges_isValid = false;
    
    m_ingredient_count_isSet = false;
    m_ingredient_count_isValid = false;
    
    m_generated_text_isSet = false;
    m_generated_text_isValid = false;
    
    m_ingredient_list_isSet = false;
    m_ingredient_list_isValid = false;
    
    m_ingredients_isSet = false;
    m_ingredients_isValid = false;
    
    m_likes_isSet = false;
    m_likes_isValid = false;
    
    m_aisle_isSet = false;
    m_aisle_isValid = false;
    
    m_nutrition_isSet = false;
    m_nutrition_isValid = false;
    
    m_price_isSet = false;
    m_price_isValid = false;
    
    m_servings_isSet = false;
    m_servings_isValid = false;
    
    m_spoonacular_score_isSet = false;
    m_spoonacular_score_isValid = false;
    }

void
OAIInline_response_200_30::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200_30::fromJsonObject(QJsonObject json) {
    
    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    
    
    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    
    
    
    m_breadcrumbs_isValid = ::OpenAPI::fromJsonValue(breadcrumbs, json[QString("breadcrumbs")]);
    
    m_image_type_isValid = ::OpenAPI::fromJsonValue(image_type, json[QString("imageType")]);
    
    
    
    m_badges_isValid = ::OpenAPI::fromJsonValue(badges, json[QString("badges")]);
    
    
    m_important_badges_isValid = ::OpenAPI::fromJsonValue(important_badges, json[QString("importantBadges")]);
    
    m_ingredient_count_isValid = ::OpenAPI::fromJsonValue(ingredient_count, json[QString("ingredientCount")]);
    
    
    m_generated_text_isValid = ::OpenAPI::fromJsonValue(generated_text, json[QString("generatedText")]);
    
    
    m_ingredient_list_isValid = ::OpenAPI::fromJsonValue(ingredient_list, json[QString("ingredientList")]);
    
    
    
    m_ingredients_isValid = ::OpenAPI::fromJsonValue(ingredients, json[QString("ingredients")]);
    
    m_likes_isValid = ::OpenAPI::fromJsonValue(likes, json[QString("likes")]);
    
    
    m_aisle_isValid = ::OpenAPI::fromJsonValue(aisle, json[QString("aisle")]);
    
    
    m_nutrition_isValid = ::OpenAPI::fromJsonValue(nutrition, json[QString("nutrition")]);
    
    
    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    
    
    m_servings_isValid = ::OpenAPI::fromJsonValue(servings, json[QString("servings")]);
    
    
    m_spoonacular_score_isValid = ::OpenAPI::fromJsonValue(spoonacular_score, json[QString("spoonacularScore")]);
    
    
}

QString
OAIInline_response_200_30::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200_30::asJsonObject() const {
    QJsonObject obj;
	if(m_id_isSet){
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
	if(m_title_isSet){
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
	
    if(breadcrumbs.size() > 0){
        obj.insert(QString("breadcrumbs"), ::OpenAPI::toJsonValue(breadcrumbs));
    } 
	if(m_image_type_isSet){
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(image_type));
    }
	
    if(badges.size() > 0){
        obj.insert(QString("badges"), ::OpenAPI::toJsonValue(badges));
    } 
	
    if(important_badges.size() > 0){
        obj.insert(QString("importantBadges"), ::OpenAPI::toJsonValue(important_badges));
    } 
	if(m_ingredient_count_isSet){
        obj.insert(QString("ingredientCount"), ::OpenAPI::toJsonValue(ingredient_count));
    }
	if(generated_text.isSet()){
        obj.insert(QString("generatedText"), ::OpenAPI::toJsonValue(generated_text));
    }
	if(m_ingredient_list_isSet){
        obj.insert(QString("ingredientList"), ::OpenAPI::toJsonValue(ingredient_list));
    }
	
    if(ingredients.size() > 0){
        obj.insert(QString("ingredients"), ::OpenAPI::toJsonValue(ingredients));
    } 
	if(likes.isSet()){
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(likes));
    }
	if(m_aisle_isSet){
        obj.insert(QString("aisle"), ::OpenAPI::toJsonValue(aisle));
    }
	if(nutrition.isSet()){
        obj.insert(QString("nutrition"), ::OpenAPI::toJsonValue(nutrition));
    }
	if(price.isSet()){
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
	if(servings.isSet()){
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(servings));
    }
	if(spoonacular_score.isSet()){
        obj.insert(QString("spoonacularScore"), ::OpenAPI::toJsonValue(spoonacular_score));
    }
    return obj;
}


qint32
OAIInline_response_200_30::getId() const {
    return id;
}
void
OAIInline_response_200_30::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}


QString
OAIInline_response_200_30::getTitle() const {
    return title;
}
void
OAIInline_response_200_30::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}


QList<QString>
OAIInline_response_200_30::getBreadcrumbs() const {
    return breadcrumbs;
}
void
OAIInline_response_200_30::setBreadcrumbs(const QList<QString> &breadcrumbs) {
    this->breadcrumbs = breadcrumbs;
    this->m_breadcrumbs_isSet = true;
}


QString
OAIInline_response_200_30::getImageType() const {
    return image_type;
}
void
OAIInline_response_200_30::setImageType(const QString &image_type) {
    this->image_type = image_type;
    this->m_image_type_isSet = true;
}


QList<QString>
OAIInline_response_200_30::getBadges() const {
    return badges;
}
void
OAIInline_response_200_30::setBadges(const QList<QString> &badges) {
    this->badges = badges;
    this->m_badges_isSet = true;
}


QList<QString>
OAIInline_response_200_30::getImportantBadges() const {
    return important_badges;
}
void
OAIInline_response_200_30::setImportantBadges(const QList<QString> &important_badges) {
    this->important_badges = important_badges;
    this->m_important_badges_isSet = true;
}


qint32
OAIInline_response_200_30::getIngredientCount() const {
    return ingredient_count;
}
void
OAIInline_response_200_30::setIngredientCount(const qint32 &ingredient_count) {
    this->ingredient_count = ingredient_count;
    this->m_ingredient_count_isSet = true;
}


OAIObject
OAIInline_response_200_30::getGeneratedText() const {
    return generated_text;
}
void
OAIInline_response_200_30::setGeneratedText(const OAIObject &generated_text) {
    this->generated_text = generated_text;
    this->m_generated_text_isSet = true;
}


QString
OAIInline_response_200_30::getIngredientList() const {
    return ingredient_list;
}
void
OAIInline_response_200_30::setIngredientList(const QString &ingredient_list) {
    this->ingredient_list = ingredient_list;
    this->m_ingredient_list_isSet = true;
}


QList<OAIInline_response_200_30_ingredients>
OAIInline_response_200_30::getIngredients() const {
    return ingredients;
}
void
OAIInline_response_200_30::setIngredients(const QList<OAIInline_response_200_30_ingredients> &ingredients) {
    this->ingredients = ingredients;
    this->m_ingredients_isSet = true;
}


OAINumber
OAIInline_response_200_30::getLikes() const {
    return likes;
}
void
OAIInline_response_200_30::setLikes(const OAINumber &likes) {
    this->likes = likes;
    this->m_likes_isSet = true;
}


QString
OAIInline_response_200_30::getAisle() const {
    return aisle;
}
void
OAIInline_response_200_30::setAisle(const QString &aisle) {
    this->aisle = aisle;
    this->m_aisle_isSet = true;
}


OAIInline_response_200_28_nutrition
OAIInline_response_200_30::getNutrition() const {
    return nutrition;
}
void
OAIInline_response_200_30::setNutrition(const OAIInline_response_200_28_nutrition &nutrition) {
    this->nutrition = nutrition;
    this->m_nutrition_isSet = true;
}


OAINumber
OAIInline_response_200_30::getPrice() const {
    return price;
}
void
OAIInline_response_200_30::setPrice(const OAINumber &price) {
    this->price = price;
    this->m_price_isSet = true;
}


OAIInline_response_200_28_servings
OAIInline_response_200_30::getServings() const {
    return servings;
}
void
OAIInline_response_200_30::setServings(const OAIInline_response_200_28_servings &servings) {
    this->servings = servings;
    this->m_servings_isSet = true;
}


OAINumber
OAIInline_response_200_30::getSpoonacularScore() const {
    return spoonacular_score;
}
void
OAIInline_response_200_30::setSpoonacularScore(const OAINumber &spoonacular_score) {
    this->spoonacular_score = spoonacular_score;
    this->m_spoonacular_score_isSet = true;
}

bool
OAIInline_response_200_30::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_id_isSet){ isObjectUpdated = true; break;}
    
        if(m_title_isSet){ isObjectUpdated = true; break;}
    
        if(breadcrumbs.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_image_type_isSet){ isObjectUpdated = true; break;}
    
        if(badges.size() > 0){ isObjectUpdated = true; break;}
    
        if(important_badges.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_ingredient_count_isSet){ isObjectUpdated = true; break;}
    
        if(generated_text.isSet()){ isObjectUpdated = true; break;}
    
        if(m_ingredient_list_isSet){ isObjectUpdated = true; break;}
    
        if(ingredients.size() > 0){ isObjectUpdated = true; break;}
    
        if(likes.isSet()){ isObjectUpdated = true; break;}
    
        if(m_aisle_isSet){ isObjectUpdated = true; break;}
    
        if(nutrition.isSet()){ isObjectUpdated = true; break;}
    
        if(price.isSet()){ isObjectUpdated = true; break;}
    
        if(servings.isSet()){ isObjectUpdated = true; break;}
    
        if(spoonacular_score.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200_30::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_breadcrumbs_isValid && m_image_type_isValid && m_badges_isValid && m_important_badges_isValid && m_ingredient_count_isValid && m_ingredient_list_isValid && m_ingredients_isValid && m_likes_isValid && m_aisle_isValid && m_nutrition_isValid && m_price_isValid && m_servings_isValid && m_spoonacular_score_isValid && true;
}

}

