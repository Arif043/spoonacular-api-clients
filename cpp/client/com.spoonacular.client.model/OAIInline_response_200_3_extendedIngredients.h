/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInline_response_200_3_extendedIngredients.h
 *
 * 
 */

#ifndef OAIInline_response_200_3_extendedIngredients_H
#define OAIInline_response_200_3_extendedIngredients_H

#include <QJsonObject>


#include "com.spoonacular.client.model\OAIInline_response_200_3_measures.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include <QList>
#include <QString>

#include "OAIObject.h"
#include "OAIEnum.h"

namespace OpenAPI {

class OAIInline_response_200_3_extendedIngredients: public OAIObject {
public:
    OAIInline_response_200_3_extendedIngredients();
    OAIInline_response_200_3_extendedIngredients(QString json);
    ~OAIInline_response_200_3_extendedIngredients() override;

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    
    QString getAisle() const;
    void setAisle(const QString &aisle);

    
    OAINumber getAmount() const;
    void setAmount(const OAINumber &amount);

    
    QString getConsitency() const;
    void setConsitency(const QString &consitency);

    
    qint32 getId() const;
    void setId(const qint32 &id);

    
    QString getImage() const;
    void setImage(const QString &image);

    
    OAIInline_response_200_3_measures getMeasures() const;
    void setMeasures(const OAIInline_response_200_3_measures &measures);

    
    QList<QString> getMeta() const;
    void setMeta(const QList<QString> &meta);

    
    QString getName() const;
    void setName(const QString &name);

    
    QString getOriginal() const;
    void setOriginal(const QString &original);

    
    QString getOriginalName() const;
    void setOriginalName(const QString &original_name);

    
    QString getUnit() const;
    void setUnit(const QString &unit);

    
    
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void init();
    
    QString aisle;
    bool m_aisle_isSet;
    bool m_aisle_isValid;
    
    OAINumber amount;
    bool m_amount_isSet;
    bool m_amount_isValid;
    
    QString consitency;
    bool m_consitency_isSet;
    bool m_consitency_isValid;
    
    qint32 id;
    bool m_id_isSet;
    bool m_id_isValid;
    
    QString image;
    bool m_image_isSet;
    bool m_image_isValid;
    
    OAIInline_response_200_3_measures measures;
    bool m_measures_isSet;
    bool m_measures_isValid;
    
    QList<QString> meta;
    bool m_meta_isSet;
    bool m_meta_isValid;
    
    QString name;
    bool m_name_isSet;
    bool m_name_isValid;
    
    QString original;
    bool m_original_isSet;
    bool m_original_isValid;
    
    QString original_name;
    bool m_original_name_isSet;
    bool m_original_name_isValid;
    
    QString unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
    
    };

}

#endif // OAIInline_response_200_3_extendedIngredients_H
