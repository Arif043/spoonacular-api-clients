/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAI_recipes_parseIngredients_nutrition.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAI_recipes_parseIngredients_nutrition::OAI_recipes_parseIngredients_nutrition(QString json) {
    this->init();
    this->fromJson(json);
}

OAI_recipes_parseIngredients_nutrition::OAI_recipes_parseIngredients_nutrition() {
    this->init();
}

OAI_recipes_parseIngredients_nutrition::~OAI_recipes_parseIngredients_nutrition() {

}

void
OAI_recipes_parseIngredients_nutrition::init() {
    
    m_nutrients_isSet = false;
    m_nutrients_isValid = false;
    
    m_properties_isSet = false;
    m_properties_isValid = false;
    
    m_flavonoids_isSet = false;
    m_flavonoids_isValid = false;
    
    m_caloric_breakdown_isSet = false;
    m_caloric_breakdown_isValid = false;
    
    m_weight_per_serving_isSet = false;
    m_weight_per_serving_isValid = false;
    }

void
OAI_recipes_parseIngredients_nutrition::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAI_recipes_parseIngredients_nutrition::fromJsonObject(QJsonObject json) {
    
    
    m_nutrients_isValid = ::OpenAPI::fromJsonValue(nutrients, json[QString("nutrients")]);
    
    
    m_properties_isValid = ::OpenAPI::fromJsonValue(properties, json[QString("properties")]);
    
    
    m_flavonoids_isValid = ::OpenAPI::fromJsonValue(flavonoids, json[QString("flavonoids")]);
    
    m_caloric_breakdown_isValid = ::OpenAPI::fromJsonValue(caloric_breakdown, json[QString("caloricBreakdown")]);
    
    
    m_weight_per_serving_isValid = ::OpenAPI::fromJsonValue(weight_per_serving, json[QString("weightPerServing")]);
    
    
}

QString
OAI_recipes_parseIngredients_nutrition::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAI_recipes_parseIngredients_nutrition::asJsonObject() const {
    QJsonObject obj;
	
    if(nutrients.size() > 0){
        obj.insert(QString("nutrients"), ::OpenAPI::toJsonValue(nutrients));
    } 
	
    if(properties.size() > 0){
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(properties));
    } 
	
    if(flavonoids.size() > 0){
        obj.insert(QString("flavonoids"), ::OpenAPI::toJsonValue(flavonoids));
    } 
	if(caloric_breakdown.isSet()){
        obj.insert(QString("caloricBreakdown"), ::OpenAPI::toJsonValue(caloric_breakdown));
    }
	if(weight_per_serving.isSet()){
        obj.insert(QString("weightPerServing"), ::OpenAPI::toJsonValue(weight_per_serving));
    }
    return obj;
}


QList<OAI_recipes_parseIngredients_nutrition_nutrients>
OAI_recipes_parseIngredients_nutrition::getNutrients() const {
    return nutrients;
}
void
OAI_recipes_parseIngredients_nutrition::setNutrients(const QList<OAI_recipes_parseIngredients_nutrition_nutrients> &nutrients) {
    this->nutrients = nutrients;
    this->m_nutrients_isSet = true;
}


QList<OAI_recipes_parseIngredients_nutrition_properties>
OAI_recipes_parseIngredients_nutrition::getProperties() const {
    return properties;
}
void
OAI_recipes_parseIngredients_nutrition::setProperties(const QList<OAI_recipes_parseIngredients_nutrition_properties> &properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}


QList<OAI_recipes_parseIngredients_nutrition_properties>
OAI_recipes_parseIngredients_nutrition::getFlavonoids() const {
    return flavonoids;
}
void
OAI_recipes_parseIngredients_nutrition::setFlavonoids(const QList<OAI_recipes_parseIngredients_nutrition_properties> &flavonoids) {
    this->flavonoids = flavonoids;
    this->m_flavonoids_isSet = true;
}


OAI_recipes_parseIngredients_nutrition_caloricBreakdown
OAI_recipes_parseIngredients_nutrition::getCaloricBreakdown() const {
    return caloric_breakdown;
}
void
OAI_recipes_parseIngredients_nutrition::setCaloricBreakdown(const OAI_recipes_parseIngredients_nutrition_caloricBreakdown &caloric_breakdown) {
    this->caloric_breakdown = caloric_breakdown;
    this->m_caloric_breakdown_isSet = true;
}


OAI_recipes_parseIngredients_nutrition_weightPerServing
OAI_recipes_parseIngredients_nutrition::getWeightPerServing() const {
    return weight_per_serving;
}
void
OAI_recipes_parseIngredients_nutrition::setWeightPerServing(const OAI_recipes_parseIngredients_nutrition_weightPerServing &weight_per_serving) {
    this->weight_per_serving = weight_per_serving;
    this->m_weight_per_serving_isSet = true;
}

bool
OAI_recipes_parseIngredients_nutrition::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(nutrients.size() > 0){ isObjectUpdated = true; break;}
    
        if(properties.size() > 0){ isObjectUpdated = true; break;}
    
        if(flavonoids.size() > 0){ isObjectUpdated = true; break;}
    
        if(caloric_breakdown.isSet()){ isObjectUpdated = true; break;}
    
        if(weight_per_serving.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAI_recipes_parseIngredients_nutrition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_nutrients_isValid && m_properties_isValid && m_flavonoids_isValid && m_caloric_breakdown_isValid && m_weight_per_serving_isValid && true;
}

}

