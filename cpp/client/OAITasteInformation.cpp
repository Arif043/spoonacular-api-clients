/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITasteInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITasteInformation::OAITasteInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITasteInformation::OAITasteInformation() {
    this->initializeModel();
}

OAITasteInformation::~OAITasteInformation() {}

void OAITasteInformation::initializeModel() {

    m_sweetness_isSet = false;
    m_sweetness_isValid = false;

    m_saltiness_isSet = false;
    m_saltiness_isValid = false;

    m_sourness_isSet = false;
    m_sourness_isValid = false;

    m_bitterness_isSet = false;
    m_bitterness_isValid = false;

    m_savoriness_isSet = false;
    m_savoriness_isValid = false;

    m_fattiness_isSet = false;
    m_fattiness_isValid = false;

    m_spiciness_isSet = false;
    m_spiciness_isValid = false;
}

void OAITasteInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITasteInformation::fromJsonObject(QJsonObject json) {

    m_sweetness_isValid = ::OpenAPI::fromJsonValue(m_sweetness, json[QString("sweetness")]);
    m_sweetness_isSet = !json[QString("sweetness")].isNull() && m_sweetness_isValid;

    m_saltiness_isValid = ::OpenAPI::fromJsonValue(m_saltiness, json[QString("saltiness")]);
    m_saltiness_isSet = !json[QString("saltiness")].isNull() && m_saltiness_isValid;

    m_sourness_isValid = ::OpenAPI::fromJsonValue(m_sourness, json[QString("sourness")]);
    m_sourness_isSet = !json[QString("sourness")].isNull() && m_sourness_isValid;

    m_bitterness_isValid = ::OpenAPI::fromJsonValue(m_bitterness, json[QString("bitterness")]);
    m_bitterness_isSet = !json[QString("bitterness")].isNull() && m_bitterness_isValid;

    m_savoriness_isValid = ::OpenAPI::fromJsonValue(m_savoriness, json[QString("savoriness")]);
    m_savoriness_isSet = !json[QString("savoriness")].isNull() && m_savoriness_isValid;

    m_fattiness_isValid = ::OpenAPI::fromJsonValue(m_fattiness, json[QString("fattiness")]);
    m_fattiness_isSet = !json[QString("fattiness")].isNull() && m_fattiness_isValid;

    m_spiciness_isValid = ::OpenAPI::fromJsonValue(m_spiciness, json[QString("spiciness")]);
    m_spiciness_isSet = !json[QString("spiciness")].isNull() && m_spiciness_isValid;
}

QString OAITasteInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITasteInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_sweetness_isSet) {
        obj.insert(QString("sweetness"), ::OpenAPI::toJsonValue(m_sweetness));
    }
    if (m_saltiness_isSet) {
        obj.insert(QString("saltiness"), ::OpenAPI::toJsonValue(m_saltiness));
    }
    if (m_sourness_isSet) {
        obj.insert(QString("sourness"), ::OpenAPI::toJsonValue(m_sourness));
    }
    if (m_bitterness_isSet) {
        obj.insert(QString("bitterness"), ::OpenAPI::toJsonValue(m_bitterness));
    }
    if (m_savoriness_isSet) {
        obj.insert(QString("savoriness"), ::OpenAPI::toJsonValue(m_savoriness));
    }
    if (m_fattiness_isSet) {
        obj.insert(QString("fattiness"), ::OpenAPI::toJsonValue(m_fattiness));
    }
    if (m_spiciness_isSet) {
        obj.insert(QString("spiciness"), ::OpenAPI::toJsonValue(m_spiciness));
    }
    return obj;
}

double OAITasteInformation::getSweetness() const {
    return m_sweetness;
}
void OAITasteInformation::setSweetness(const double &sweetness) {
    m_sweetness = sweetness;
    m_sweetness_isSet = true;
}

bool OAITasteInformation::is_sweetness_Set() const{
    return m_sweetness_isSet;
}

bool OAITasteInformation::is_sweetness_Valid() const{
    return m_sweetness_isValid;
}

double OAITasteInformation::getSaltiness() const {
    return m_saltiness;
}
void OAITasteInformation::setSaltiness(const double &saltiness) {
    m_saltiness = saltiness;
    m_saltiness_isSet = true;
}

bool OAITasteInformation::is_saltiness_Set() const{
    return m_saltiness_isSet;
}

bool OAITasteInformation::is_saltiness_Valid() const{
    return m_saltiness_isValid;
}

double OAITasteInformation::getSourness() const {
    return m_sourness;
}
void OAITasteInformation::setSourness(const double &sourness) {
    m_sourness = sourness;
    m_sourness_isSet = true;
}

bool OAITasteInformation::is_sourness_Set() const{
    return m_sourness_isSet;
}

bool OAITasteInformation::is_sourness_Valid() const{
    return m_sourness_isValid;
}

double OAITasteInformation::getBitterness() const {
    return m_bitterness;
}
void OAITasteInformation::setBitterness(const double &bitterness) {
    m_bitterness = bitterness;
    m_bitterness_isSet = true;
}

bool OAITasteInformation::is_bitterness_Set() const{
    return m_bitterness_isSet;
}

bool OAITasteInformation::is_bitterness_Valid() const{
    return m_bitterness_isValid;
}

double OAITasteInformation::getSavoriness() const {
    return m_savoriness;
}
void OAITasteInformation::setSavoriness(const double &savoriness) {
    m_savoriness = savoriness;
    m_savoriness_isSet = true;
}

bool OAITasteInformation::is_savoriness_Set() const{
    return m_savoriness_isSet;
}

bool OAITasteInformation::is_savoriness_Valid() const{
    return m_savoriness_isValid;
}

double OAITasteInformation::getFattiness() const {
    return m_fattiness;
}
void OAITasteInformation::setFattiness(const double &fattiness) {
    m_fattiness = fattiness;
    m_fattiness_isSet = true;
}

bool OAITasteInformation::is_fattiness_Set() const{
    return m_fattiness_isSet;
}

bool OAITasteInformation::is_fattiness_Valid() const{
    return m_fattiness_isValid;
}

double OAITasteInformation::getSpiciness() const {
    return m_spiciness;
}
void OAITasteInformation::setSpiciness(const double &spiciness) {
    m_spiciness = spiciness;
    m_spiciness_isSet = true;
}

bool OAITasteInformation::is_spiciness_Set() const{
    return m_spiciness_isSet;
}

bool OAITasteInformation::is_spiciness_Valid() const{
    return m_spiciness_isValid;
}

bool OAITasteInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sweetness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saltiness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sourness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitterness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savoriness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fattiness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spiciness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITasteInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sweetness_isValid && m_saltiness_isValid && m_sourness_isValid && m_bitterness_isValid && m_savoriness_isValid && m_fattiness_isValid && m_spiciness_isValid && true;
}

} // namespace OpenAPI
