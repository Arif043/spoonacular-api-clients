/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMiscApi_H
#define OAI_OAIMiscApi_H

#include "OAIHttpRequest.h"

#include "com.spoonacular.client.model\OAIInline_response_200_29.h"
#include "com.spoonacular.client.model\OAIInline_response_200_48.h"
#include "com.spoonacular.client.model\OAIInline_response_200_49.h"
#include "com.spoonacular.client.model\OAIInline_response_200_51.h"
#include "com.spoonacular.client.model\OAIInline_response_200_52.h"
#include "com.spoonacular.client.model\OAIInline_response_200_53.h"
#include "com.spoonacular.client.model\OAIInline_response_200_54.h"
#include "com.spoonacular.client.model\OAIInline_response_200_55.h"
#include "com.spoonacular.client.model\OAIInline_response_200_56.h"
#include "com.spoonacular.client.model\OAIInline_response_200_57.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIMiscApi: public QObject {
    Q_OBJECT

public:
    OAIMiscApi();
    OAIMiscApi(QString host, QString basePath);
    ~OAIMiscApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void detectFoodInText(const QString& content_type);
    void getARandomFoodJoke();
    void getConversationSuggests(const QString& query, const OAINumber& number);
    void getRandomFoodTrivia();
    void imageAnalysisByURL(const QString& image_url);
    void imageClassificationByURL(const QString& image_url);
    void searchAllFood(const QString& query, const qint32& offset, const qint32& number);
    void searchCustomFoods(const QString& username, const QString& hash, const QString& query, const qint32& offset, const qint32& number);
    void searchFoodVideos(const QString& query, const QString& type, const QString& cuisine, const QString& diet, const QString& include_ingredients, const QString& exclude_ingredients, const OAINumber& min_length, const OAINumber& max_length, const qint32& offset, const qint32& number);
    void searchSiteContent(const QString& query);
    void talkToChatbot(const QString& text, const QString& context_id);
    
private:
    void detectFoodInTextCallback (OAIHttpRequestWorker * worker);
    void getARandomFoodJokeCallback (OAIHttpRequestWorker * worker);
    void getConversationSuggestsCallback (OAIHttpRequestWorker * worker);
    void getRandomFoodTriviaCallback (OAIHttpRequestWorker * worker);
    void imageAnalysisByURLCallback (OAIHttpRequestWorker * worker);
    void imageClassificationByURLCallback (OAIHttpRequestWorker * worker);
    void searchAllFoodCallback (OAIHttpRequestWorker * worker);
    void searchCustomFoodsCallback (OAIHttpRequestWorker * worker);
    void searchFoodVideosCallback (OAIHttpRequestWorker * worker);
    void searchSiteContentCallback (OAIHttpRequestWorker * worker);
    void talkToChatbotCallback (OAIHttpRequestWorker * worker);
    
signals:
    void detectFoodInTextSignal(OAIInline_response_200_51 summary);
    void getARandomFoodJokeSignal(OAIInline_response_200_55 summary);
    void getConversationSuggestsSignal(OAIInline_response_200_57 summary);
    void getRandomFoodTriviaSignal(OAIInline_response_200_55 summary);
    void imageAnalysisByURLSignal(OAIInline_response_200_49 summary);
    void imageClassificationByURLSignal(OAIInline_response_200_48 summary);
    void searchAllFoodSignal(OAIInline_response_200_53 summary);
    void searchCustomFoodsSignal(OAIInline_response_200_29 summary);
    void searchFoodVideosSignal(OAIInline_response_200_54 summary);
    void searchSiteContentSignal(OAIInline_response_200_52 summary);
    void talkToChatbotSignal(OAIInline_response_200_56 summary);
    
    void detectFoodInTextSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_51 summary);
    void getARandomFoodJokeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_55 summary);
    void getConversationSuggestsSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_57 summary);
    void getRandomFoodTriviaSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_55 summary);
    void imageAnalysisByURLSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_49 summary);
    void imageClassificationByURLSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_48 summary);
    void searchAllFoodSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_53 summary);
    void searchCustomFoodsSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_29 summary);
    void searchFoodVideosSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_54 summary);
    void searchSiteContentSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_52 summary);
    void talkToChatbotSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_56 summary);
    
    void detectFoodInTextSignalE(OAIInline_response_200_51 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getARandomFoodJokeSignalE(OAIInline_response_200_55 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConversationSuggestsSignalE(OAIInline_response_200_57 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomFoodTriviaSignalE(OAIInline_response_200_55 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void imageAnalysisByURLSignalE(OAIInline_response_200_49 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void imageClassificationByURLSignalE(OAIInline_response_200_48 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchAllFoodSignalE(OAIInline_response_200_53 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchCustomFoodsSignalE(OAIInline_response_200_29 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchFoodVideosSignalE(OAIInline_response_200_54 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSiteContentSignalE(OAIInline_response_200_52 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void talkToChatbotSignalE(OAIInline_response_200_56 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void detectFoodInTextSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getARandomFoodJokeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConversationSuggestsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomFoodTriviaSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void imageAnalysisByURLSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void imageClassificationByURLSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchAllFoodSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchCustomFoodsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchFoodVideosSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSiteContentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void talkToChatbotSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
