/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIngredientsApi_H
#define OAI_OAIIngredientsApi_H

#include "OAIHttpRequest.h"

#include "com.spoonacular.client.model\OAIInline_object_2.h"
#include "com.spoonacular.client.model\OAIInline_response_200_22.h"
#include "com.spoonacular.client.model\OAIInline_response_200_24.h"
#include "com.spoonacular.client.model\OAIInline_response_200_25.h"
#include "com.spoonacular.client.model\OAIInline_response_200_26.h"
#include "com.spoonacular.client.model\OAIInline_response_200_34.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include "com.spoonacular.client.model\OAIObject.h"
#include "com.spoonacular.client.model\OAI_recipes_parseIngredients_nutrition_weightPerServing.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIIngredientsApi: public QObject {
    Q_OBJECT

public:
    OAIIngredientsApi();
    OAIIngredientsApi(QString host, QString basePath);
    ~OAIIngredientsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void autocompleteIngredientSearch(const QString& query, const qint32& number, const bool& meta_information, const QString& intolerances);
    void computeIngredientAmount(const OAINumber& id, const QString& nutrient, const OAINumber& target, const QString& unit);
    void getIngredientInformation(const qint32& id, const OAINumber& amount, const QString& unit);
    void getIngredientSubstitutes(const QString& ingredient_name);
    void getIngredientSubstitutesByID(const qint32& id);
    void ingredientSearch(const QString& query, const bool& add_children, const OAINumber& min_protein_percent, const OAINumber& max_protein_percent, const OAINumber& min_fat_percent, const OAINumber& max_fat_percent, const OAINumber& min_carbs_percent, const OAINumber& max_carbs_percent, const bool& meta_information, const QString& intolerances, const QString& sort, const QString& sort_direction, const qint32& offset, const qint32& number);
    void ingredientsByIDImage(const OAINumber& id, const QString& measure);
    void mapIngredientsToGroceryProducts(const OAIInline_object_2& oai_inline_object_2);
    void visualizeIngredients(const QString& content_type, const QString& language, const QString& accept);
    
private:
    void autocompleteIngredientSearchCallback (OAIHttpRequestWorker * worker);
    void computeIngredientAmountCallback (OAIHttpRequestWorker * worker);
    void getIngredientInformationCallback (OAIHttpRequestWorker * worker);
    void getIngredientSubstitutesCallback (OAIHttpRequestWorker * worker);
    void getIngredientSubstitutesByIDCallback (OAIHttpRequestWorker * worker);
    void ingredientSearchCallback (OAIHttpRequestWorker * worker);
    void ingredientsByIDImageCallback (OAIHttpRequestWorker * worker);
    void mapIngredientsToGroceryProductsCallback (OAIHttpRequestWorker * worker);
    void visualizeIngredientsCallback (OAIHttpRequestWorker * worker);
    
signals:
    void autocompleteIngredientSearchSignal(QList<OAIInline_response_200_24> summary);
    void computeIngredientAmountSignal(OAI_recipes_parseIngredients_nutrition_weightPerServing summary);
    void getIngredientInformationSignal(OAIInline_response_200_22 summary);
    void getIngredientSubstitutesSignal(OAIInline_response_200_26 summary);
    void getIngredientSubstitutesByIDSignal(OAIInline_response_200_26 summary);
    void ingredientSearchSignal(OAIInline_response_200_25 summary);
    void ingredientsByIDImageSignal(OAIObject summary);
    void mapIngredientsToGroceryProductsSignal(QList<OAIInline_response_200_34> summary);
    void visualizeIngredientsSignal(QString summary);
    
    void autocompleteIngredientSearchSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_24> summary);
    void computeIngredientAmountSignalFull(OAIHttpRequestWorker* worker, OAI_recipes_parseIngredients_nutrition_weightPerServing summary);
    void getIngredientInformationSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_22 summary);
    void getIngredientSubstitutesSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_26 summary);
    void getIngredientSubstitutesByIDSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_26 summary);
    void ingredientSearchSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_25 summary);
    void ingredientsByIDImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void mapIngredientsToGroceryProductsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_34> summary);
    void visualizeIngredientsSignalFull(OAIHttpRequestWorker* worker, QString summary);
    
    void autocompleteIngredientSearchSignalE(QList<OAIInline_response_200_24> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void computeIngredientAmountSignalE(OAI_recipes_parseIngredients_nutrition_weightPerServing summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientInformationSignalE(OAIInline_response_200_22 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesSignalE(OAIInline_response_200_26 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesByIDSignalE(OAIInline_response_200_26 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void ingredientSearchSignalE(OAIInline_response_200_25 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void ingredientsByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void mapIngredientsToGroceryProductsSignalE(QList<OAIInline_response_200_34> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeIngredientsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void autocompleteIngredientSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void computeIngredientAmountSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientInformationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void ingredientSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void ingredientsByIDImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void mapIngredientsToGroceryProductsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeIngredientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
