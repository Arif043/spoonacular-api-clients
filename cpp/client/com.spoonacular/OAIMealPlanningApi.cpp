/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMealPlanningApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMealPlanningApi::OAIMealPlanningApi() {

}

OAIMealPlanningApi::~OAIMealPlanningApi() {

}

OAIMealPlanningApi::OAIMealPlanningApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIMealPlanningApi::addMealPlanTemplate(const QString& username, const QString& hash, const OAIInline_object_6& oai_inline_object_6) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/templates");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_inline_object_6.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::addMealPlanTemplateCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::addMealPlanTemplateCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_40 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit addMealPlanTemplateSignal(output);
        emit addMealPlanTemplateSignalFull(worker, output);
    } else {
        emit addMealPlanTemplateSignalE(output, error_type, error_str);
        emit addMealPlanTemplateSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::addToMealPlan(const QString& username, const QString& hash, const OAIInline_object_4& oai_inline_object_4) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/items");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_inline_object_4.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::addToMealPlanCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::addToMealPlanCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit addToMealPlanSignal(output);
        emit addToMealPlanSignalFull(worker, output);
    } else {
        emit addToMealPlanSignalE(output, error_type, error_str);
        emit addToMealPlanSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::addToShoppingList(const QString& username, const QString& hash, const OAIInline_object_9& oai_inline_object_9) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/shopping-list/items");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_inline_object_9.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::addToShoppingListCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::addToShoppingListCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_42 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit addToShoppingListSignal(output);
        emit addToShoppingListSignalFull(worker, output);
    } else {
        emit addToShoppingListSignalE(output, error_type, error_str);
        emit addToShoppingListSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::clearMealPlanDay(const QString& username, const QString& date, const QString& hash, const OAIInline_object_3& oai_inline_object_3) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/day/{date}");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    QString datePathParam("{"); 
    datePathParam.append("date").append("}");
    fullPath.replace(datePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(date)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");

    
    QString output = oai_inline_object_3.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::clearMealPlanDayCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::clearMealPlanDayCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit clearMealPlanDaySignal(output);
        emit clearMealPlanDaySignalFull(worker, output);
    } else {
        emit clearMealPlanDaySignalE(output, error_type, error_str);
        emit clearMealPlanDaySignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::connectUser(const OAIObject& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/connect");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::connectUserCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::connectUserCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_43 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit connectUserSignal(output);
        emit connectUserSignalFull(worker, output);
    } else {
        emit connectUserSignalE(output, error_type, error_str);
        emit connectUserSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::deleteFromMealPlan(const QString& username, const OAINumber& id, const QString& hash, const OAIInline_object_5& oai_inline_object_5) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/items/{id}");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");

    
    QString output = oai_inline_object_5.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::deleteFromMealPlanCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::deleteFromMealPlanCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteFromMealPlanSignal(output);
        emit deleteFromMealPlanSignalFull(worker, output);
    } else {
        emit deleteFromMealPlanSignalE(output, error_type, error_str);
        emit deleteFromMealPlanSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::deleteFromShoppingList(const QString& username, const qint32& id, const QString& hash, const OAIInline_object_10& oai_inline_object_10) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/shopping-list/items/{id}");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");

    
    QString output = oai_inline_object_10.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::deleteFromShoppingListCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::deleteFromShoppingListCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteFromShoppingListSignal(output);
        emit deleteFromShoppingListSignalFull(worker, output);
    } else {
        emit deleteFromShoppingListSignalE(output, error_type, error_str);
        emit deleteFromShoppingListSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::deleteMealPlanTemplate(const QString& username, const qint32& id, const QString& hash, const OAIInline_object_7& oai_inline_object_7) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/templates/{id}");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");

    
    QString output = oai_inline_object_7.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::deleteMealPlanTemplateCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::deleteMealPlanTemplateCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteMealPlanTemplateSignal(output);
        emit deleteMealPlanTemplateSignalFull(worker, output);
    } else {
        emit deleteMealPlanTemplateSignalE(output, error_type, error_str);
        emit deleteMealPlanTemplateSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::generateMealPlan(const QString& time_frame, const OAINumber& target_calories, const QString& diet, const QString& exclude) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/generate");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("timeFrame"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(time_frame)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("targetCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("diet"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(diet)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("exclude"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::generateMealPlanCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::generateMealPlanCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_37 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit generateMealPlanSignal(output);
        emit generateMealPlanSignalFull(worker, output);
    } else {
        emit generateMealPlanSignalE(output, error_type, error_str);
        emit generateMealPlanSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::generateShoppingList(const QString& username, const QString& start_date, const QString& end_date, const QString& hash, const OAIInline_object_8& oai_inline_object_8) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/shopping-list/{start-date}/{end-date}");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    QString start_datePathParam("{"); 
    start_datePathParam.append("start-date").append("}");
    fullPath.replace(start_datePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date)));
    QString end_datePathParam("{"); 
    end_datePathParam.append("end-date").append("}");
    fullPath.replace(end_datePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_inline_object_8.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::generateShoppingListCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::generateShoppingListCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_42 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit generateShoppingListSignal(output);
        emit generateShoppingListSignalFull(worker, output);
    } else {
        emit generateShoppingListSignalE(output, error_type, error_str);
        emit generateShoppingListSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::getMealPlanTemplate(const QString& username, const qint32& id, const QString& hash) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/templates/{id}");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::getMealPlanTemplateCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::getMealPlanTemplateCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_41 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMealPlanTemplateSignal(output);
        emit getMealPlanTemplateSignalFull(worker, output);
    } else {
        emit getMealPlanTemplateSignalE(output, error_type, error_str);
        emit getMealPlanTemplateSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::getMealPlanTemplates(const QString& username, const QString& hash) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/templates");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::getMealPlanTemplatesCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::getMealPlanTemplatesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_39 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMealPlanTemplatesSignal(output);
        emit getMealPlanTemplatesSignalFull(worker, output);
    } else {
        emit getMealPlanTemplatesSignalE(output, error_type, error_str);
        emit getMealPlanTemplatesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::getMealPlanWeek(const QString& username, const QString& start_date, const QString& hash) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/week/{start-date}");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    QString start_datePathParam("{"); 
    start_datePathParam.append("start-date").append("}");
    fullPath.replace(start_datePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::getMealPlanWeekCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::getMealPlanWeekCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_38 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMealPlanWeekSignal(output);
        emit getMealPlanWeekSignalFull(worker, output);
    } else {
        emit getMealPlanWeekSignalE(output, error_type, error_str);
        emit getMealPlanWeekSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMealPlanningApi::getShoppingList(const QString& username, const QString& hash) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mealplanner/{username}/shopping-list");
    QString usernamePathParam("{"); 
    usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("hash"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(hash)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMealPlanningApi::getShoppingListCallback);

    worker->execute(&input);
}

void
OAIMealPlanningApi::getShoppingListCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_42 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getShoppingListSignal(output);
        emit getShoppingListSignalFull(worker, output);
    } else {
        emit getShoppingListSignalE(output, error_type, error_str);
        emit getShoppingListSignalEFull(worker, error_type, error_str);
    }
}


}
