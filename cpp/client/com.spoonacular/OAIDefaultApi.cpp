/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi() {

}

OAIDefaultApi::~OAIDefaultApi() {

}

OAIDefaultApi::OAIDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIDefaultApi::analyzeARecipeSearchQuery(const QString& q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/queries/analyze");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::analyzeARecipeSearchQueryCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::analyzeARecipeSearchQueryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit analyzeARecipeSearchQuerySignal(output);
        emit analyzeARecipeSearchQuerySignalFull(worker, output);
    } else {
        emit analyzeARecipeSearchQuerySignalE(output, error_type, error_str);
        emit analyzeARecipeSearchQuerySignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::analyzeRecipeInstructions(const QString& instructions) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/analyzeInstructions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (instructions != nullptr) {
        input.add_var("instructions", instructions);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::analyzeRecipeInstructionsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::analyzeRecipeInstructionsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit analyzeRecipeInstructionsSignal(output);
        emit analyzeRecipeInstructionsSignalFull(worker, output);
    } else {
        emit analyzeRecipeInstructionsSignalE(output, error_type, error_str);
        emit analyzeRecipeInstructionsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::autocompleteIngredientSearch(const QString& query, const OAINumber& number, const bool& meta_information, const bool& intolerances) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/autocomplete");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("metaInformation"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(meta_information)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("intolerances"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(intolerances)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::autocompleteIngredientSearchCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::autocompleteIngredientSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit autocompleteIngredientSearchSignal(output);
        emit autocompleteIngredientSearchSignalFull(worker, output);
    } else {
        emit autocompleteIngredientSearchSignalE(output, error_type, error_str);
        emit autocompleteIngredientSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::autocompleteMenuItemSearch(const QString& query, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/suggest");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::autocompleteMenuItemSearchCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::autocompleteMenuItemSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit autocompleteMenuItemSearchSignal(output);
        emit autocompleteMenuItemSearchSignalFull(worker, output);
    } else {
        emit autocompleteMenuItemSearchSignalE(output, error_type, error_str);
        emit autocompleteMenuItemSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::autocompleteProductSearch(const QString& query, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/suggest");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::autocompleteProductSearchCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::autocompleteProductSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit autocompleteProductSearchSignal(output);
        emit autocompleteProductSearchSignalFull(worker, output);
    } else {
        emit autocompleteProductSearchSignalE(output, error_type, error_str);
        emit autocompleteProductSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::autocompleteRecipeSearch(const QString& query, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/autocomplete");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::autocompleteRecipeSearchCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::autocompleteRecipeSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit autocompleteRecipeSearchSignal(output);
        emit autocompleteRecipeSearchSignalFull(worker, output);
    } else {
        emit autocompleteRecipeSearchSignalE(output, error_type, error_str);
        emit autocompleteRecipeSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::classifyCuisine(const QString& title, const QString& ingredient_list) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/cuisine");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (title != nullptr) {
        input.add_var("title", title);
    }
        if (ingredient_list != nullptr) {
        input.add_var("ingredientList", ingredient_list);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::classifyCuisineCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::classifyCuisineCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit classifyCuisineSignal(output);
        emit classifyCuisineSignalFull(worker, output);
    } else {
        emit classifyCuisineSignalE(output, error_type, error_str);
        emit classifyCuisineSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::classifyGroceryProduct(const OAIInline_object_8& oai_inline_object_8, const QString& locale) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/classify");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("locale"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(locale)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_inline_object_8.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::classifyGroceryProductCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::classifyGroceryProductCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit classifyGroceryProductSignal(output);
        emit classifyGroceryProductSignalFull(worker, output);
    } else {
        emit classifyGroceryProductSignalE(output, error_type, error_str);
        emit classifyGroceryProductSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::classifyGroceryProductBulk(const OAIObject& body, const QString& locale) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/classifyBatch");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("locale"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(locale)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::classifyGroceryProductBulkCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::classifyGroceryProductBulkCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit classifyGroceryProductBulkSignal(output);
        emit classifyGroceryProductBulkSignalFull(worker, output);
    } else {
        emit classifyGroceryProductBulkSignalE(output, error_type, error_str);
        emit classifyGroceryProductBulkSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::convertAmounts(const QString& ingredient_name, const OAINumber& source_amount, const QString& source_unit, const QString& target_unit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/convert");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ingredientName"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ingredient_name)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sourceAmount"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source_amount)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sourceUnit"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source_unit)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("targetUnit"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_unit)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::convertAmountsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::convertAmountsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit convertAmountsSignal(output);
        emit convertAmountsSignalFull(worker, output);
    } else {
        emit convertAmountsSignalE(output, error_type, error_str);
        emit convertAmountsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::createRecipeCard(const QString& title, const OAIHttpRequestInputFileElement*& image, const QString& ingredients, const QString& instructions, const OAINumber& ready_in_minutes, const OAINumber& servings, const QString& mask, const QString& background_image, const QString& author, const QString& background_color, const QString& font_color, const QString& source) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeRecipe");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (title != nullptr) {
        input.add_var("title", title);
    }
        if (image != nullptr) {
        input.add_file("image", (*image).local_filename, (*image).request_filename, (*image).mime_type);
    }
        if (ingredients != nullptr) {
        input.add_var("ingredients", ingredients);
    }
        if (instructions != nullptr) {
        input.add_var("instructions", instructions);
    }
        if (ready_in_minutes != nullptr) {
        input.add_var("readyInMinutes", ready_in_minutes);
    }
        if (servings != nullptr) {
        input.add_var("servings", servings);
    }
        if (mask != nullptr) {
        input.add_var("mask", mask);
    }
        if (background_image != nullptr) {
        input.add_var("backgroundImage", background_image);
    }
        if (author != nullptr) {
        input.add_var("author", author);
    }
        if (background_color != nullptr) {
        input.add_var("backgroundColor", background_color);
    }
        if (font_color != nullptr) {
        input.add_var("fontColor", font_color);
    }
        if (source != nullptr) {
        input.add_var("source", source);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::createRecipeCardCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::createRecipeCardCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createRecipeCardSignal(output);
        emit createRecipeCardSignalFull(worker, output);
    } else {
        emit createRecipeCardSignalE(output, error_type, error_str);
        emit createRecipeCardSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::detectFoodInText(const QString& text) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/detect");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (text != nullptr) {
        input.add_var("text", text);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::detectFoodInTextCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::detectFoodInTextCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit detectFoodInTextSignal(output);
        emit detectFoodInTextSignalFull(worker, output);
    } else {
        emit detectFoodInTextSignalE(output, error_type, error_str);
        emit detectFoodInTextSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::extractRecipeFromWebsite(const QString& url, const bool& force_extraction) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/extract");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("url"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(url)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("forceExtraction"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(force_extraction)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::extractRecipeFromWebsiteCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::extractRecipeFromWebsiteCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit extractRecipeFromWebsiteSignal(output);
        emit extractRecipeFromWebsiteSignalFull(worker, output);
    } else {
        emit extractRecipeFromWebsiteSignalE(output, error_type, error_str);
        emit extractRecipeFromWebsiteSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::generateMealPlan(const QString& time_frame, const OAINumber& target_calories, const QString& diet, const QString& exclude) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/mealplans/generate");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("timeFrame"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(time_frame)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("targetCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("diet"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(diet)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("exclude"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::generateMealPlanCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::generateMealPlanCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit generateMealPlanSignal(output);
        emit generateMealPlanSignalFull(worker, output);
    } else {
        emit generateMealPlanSignalE(output, error_type, error_str);
        emit generateMealPlanSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getARandomFoodJoke() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/jokes/random");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getARandomFoodJokeCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getARandomFoodJokeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getARandomFoodJokeSignal(output);
        emit getARandomFoodJokeSignalFull(worker, output);
    } else {
        emit getARandomFoodJokeSignalE(output, error_type, error_str);
        emit getARandomFoodJokeSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getAnalyzedRecipeInstructions(const OAINumber& id, const bool& step_breakdown) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/analyzedInstructions");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("stepBreakdown"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(step_breakdown)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getAnalyzedRecipeInstructionsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getAnalyzedRecipeInstructionsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAnalyzedRecipeInstructionsSignal(output);
        emit getAnalyzedRecipeInstructionsSignalFull(worker, output);
    } else {
        emit getAnalyzedRecipeInstructionsSignalE(output, error_type, error_str);
        emit getAnalyzedRecipeInstructionsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getComparableProducts(const OAINumber& upc) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/upc/{upc}/comparable");
    QString upcPathParam("{"); 
    upcPathParam.append("upc").append("}");
    fullPath.replace(upcPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(upc)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getComparableProductsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getComparableProductsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getComparableProductsSignal(output);
        emit getComparableProductsSignalFull(worker, output);
    } else {
        emit getComparableProductsSignalE(output, error_type, error_str);
        emit getComparableProductsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getConversationSuggests(const QString& query, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/converse/suggest");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getConversationSuggestsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getConversationSuggestsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getConversationSuggestsSignal(output);
        emit getConversationSuggestsSignalFull(worker, output);
    } else {
        emit getConversationSuggestsSignalE(output, error_type, error_str);
        emit getConversationSuggestsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getDishPairingForWine(const QString& wine) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/wine/dishes");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("wine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(wine)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getDishPairingForWineCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getDishPairingForWineCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDishPairingForWineSignal(output);
        emit getDishPairingForWineSignalFull(worker, output);
    } else {
        emit getDishPairingForWineSignalE(output, error_type, error_str);
        emit getDishPairingForWineSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getFoodInformation(const OAINumber& id, const OAINumber& amount, const QString& unit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/{id}/information");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("amount"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(amount)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("unit"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(unit)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getFoodInformationCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getFoodInformationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFoodInformationSignal(output);
        emit getFoodInformationSignalFull(worker, output);
    } else {
        emit getFoodInformationSignalE(output, error_type, error_str);
        emit getFoodInformationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getIngredientSubstitutes(const QString& ingredient_name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/substitutes");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ingredientName"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ingredient_name)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getIngredientSubstitutesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getIngredientSubstitutesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getIngredientSubstitutesSignal(output);
        emit getIngredientSubstitutesSignalFull(worker, output);
    } else {
        emit getIngredientSubstitutesSignalE(output, error_type, error_str);
        emit getIngredientSubstitutesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getIngredientSubstitutesByID(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/{id}/substitutes");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getIngredientSubstitutesByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getIngredientSubstitutesByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getIngredientSubstitutesByIDSignal(output);
        emit getIngredientSubstitutesByIDSignalFull(worker, output);
    } else {
        emit getIngredientSubstitutesByIDSignalE(output, error_type, error_str);
        emit getIngredientSubstitutesByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getMenuItemInformation(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/{id}");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getMenuItemInformationCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getMenuItemInformationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMenuItemInformationSignal(output);
        emit getMenuItemInformationSignalFull(worker, output);
    } else {
        emit getMenuItemInformationSignalE(output, error_type, error_str);
        emit getMenuItemInformationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getProductInformation(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/{id}");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getProductInformationCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getProductInformationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getProductInformationSignal(output);
        emit getProductInformationSignalFull(worker, output);
    } else {
        emit getProductInformationSignalE(output, error_type, error_str);
        emit getProductInformationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRandomFoodTrivia() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/trivia/random");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRandomFoodTriviaCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRandomFoodTriviaCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRandomFoodTriviaSignal(output);
        emit getRandomFoodTriviaSignalFull(worker, output);
    } else {
        emit getRandomFoodTriviaSignalE(output, error_type, error_str);
        emit getRandomFoodTriviaSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRandomRecipes(const bool& limit_license, const QString& tags, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/random");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("tags"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(tags)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRandomRecipesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRandomRecipesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRandomRecipesSignal(output);
        emit getRandomRecipesSignalFull(worker, output);
    } else {
        emit getRandomRecipesSignalE(output, error_type, error_str);
        emit getRandomRecipesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRecipeEquipmentByID(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/equipmentWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRecipeEquipmentByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRecipeEquipmentByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeEquipmentByIDSignal(output);
        emit getRecipeEquipmentByIDSignalFull(worker, output);
    } else {
        emit getRecipeEquipmentByIDSignalE(output, error_type, error_str);
        emit getRecipeEquipmentByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRecipeInformation(const OAINumber& id, const bool& include_nutrition) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/information");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeNutrition"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_nutrition)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRecipeInformationCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRecipeInformationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeInformationSignal(output);
        emit getRecipeInformationSignalFull(worker, output);
    } else {
        emit getRecipeInformationSignalE(output, error_type, error_str);
        emit getRecipeInformationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRecipeInformationBulk(const QString& ids, const bool& include_nutrition) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/informationBulk");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ids"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ids)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeNutrition"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_nutrition)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRecipeInformationBulkCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRecipeInformationBulkCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeInformationBulkSignal(output);
        emit getRecipeInformationBulkSignalFull(worker, output);
    } else {
        emit getRecipeInformationBulkSignalE(output, error_type, error_str);
        emit getRecipeInformationBulkSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRecipeIngredientsByID(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/ingredientWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRecipeIngredientsByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRecipeIngredientsByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeIngredientsByIDSignal(output);
        emit getRecipeIngredientsByIDSignalFull(worker, output);
    } else {
        emit getRecipeIngredientsByIDSignalE(output, error_type, error_str);
        emit getRecipeIngredientsByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRecipeNutritionByID(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/nutritionWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRecipeNutritionByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRecipeNutritionByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeNutritionByIDSignal(output);
        emit getRecipeNutritionByIDSignalFull(worker, output);
    } else {
        emit getRecipeNutritionByIDSignalE(output, error_type, error_str);
        emit getRecipeNutritionByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getRecipePriceBreakdownByID(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/priceBreakdownWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getRecipePriceBreakdownByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getRecipePriceBreakdownByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipePriceBreakdownByIDSignal(output);
        emit getRecipePriceBreakdownByIDSignalFull(worker, output);
    } else {
        emit getRecipePriceBreakdownByIDSignalE(output, error_type, error_str);
        emit getRecipePriceBreakdownByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getSimilarRecipes(const OAINumber& id, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/similar");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getSimilarRecipesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getSimilarRecipesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSimilarRecipesSignal(output);
        emit getSimilarRecipesSignalFull(worker, output);
    } else {
        emit getSimilarRecipesSignalE(output, error_type, error_str);
        emit getSimilarRecipesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getWineDescription(const QString& wine) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/wine/description");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("wine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(wine)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getWineDescriptionCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getWineDescriptionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getWineDescriptionSignal(output);
        emit getWineDescriptionSignalFull(worker, output);
    } else {
        emit getWineDescriptionSignalE(output, error_type, error_str);
        emit getWineDescriptionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getWinePairing(const QString& food, const OAINumber& max_price) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/wine/pairing");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("food"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(food)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPrice"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_price)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getWinePairingCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getWinePairingCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getWinePairingSignal(output);
        emit getWinePairingSignalFull(worker, output);
    } else {
        emit getWinePairingSignalE(output, error_type, error_str);
        emit getWinePairingSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getWineRecommendation(const QString& wine, const OAINumber& max_price, const OAINumber& min_rating, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/wine/recommendation");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("wine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(wine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPrice"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_price)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minRating"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_rating)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getWineRecommendationCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getWineRecommendationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getWineRecommendationSignal(output);
        emit getWineRecommendationSignalFull(worker, output);
    } else {
        emit getWineRecommendationSignalE(output, error_type, error_str);
        emit getWineRecommendationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::guessNutritionByDishName(const QString& title) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/guessNutrition");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("title"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(title)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::guessNutritionByDishNameCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::guessNutritionByDishNameCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guessNutritionByDishNameSignal(output);
        emit guessNutritionByDishNameSignalFull(worker, output);
    } else {
        emit guessNutritionByDishNameSignalE(output, error_type, error_str);
        emit guessNutritionByDishNameSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::mapIngredientsToGroceryProducts(const OAIObject& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/map");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::mapIngredientsToGroceryProductsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::mapIngredientsToGroceryProductsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit mapIngredientsToGroceryProductsSignal(output);
        emit mapIngredientsToGroceryProductsSignalFull(worker, output);
    } else {
        emit mapIngredientsToGroceryProductsSignalE(output, error_type, error_str);
        emit mapIngredientsToGroceryProductsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::parseIngredients(const QString& ingredient_list, const OAINumber& servings, const bool& include_nutrition) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/parseIngredients");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (ingredient_list != nullptr) {
        input.add_var("ingredientList", ingredient_list);
    }
        if (servings != nullptr) {
        input.add_var("servings", servings);
    }
        if (include_nutrition != nullptr) {
        input.add_var("includeNutrition", include_nutrition);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::parseIngredientsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::parseIngredientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit parseIngredientsSignal(output);
        emit parseIngredientsSignalFull(worker, output);
    } else {
        emit parseIngredientsSignalE(output, error_type, error_str);
        emit parseIngredientsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::quickAnswer(const QString& q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/quickAnswer");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::quickAnswerCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::quickAnswerCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit quickAnswerSignal(output);
        emit quickAnswerSignalFull(worker, output);
    } else {
        emit quickAnswerSignalE(output, error_type, error_str);
        emit quickAnswerSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchFoodVideos(const QString& query, const QString& type, const QString& cuisine, const QString& diet, const QString& include_ingredients, const QString& exclude_ingredients, const OAINumber& min_length, const OAINumber& max_length, const OAINumber& offset, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/videos/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("type"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cuisine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(cuisine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("diet"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(diet)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("excludeIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minLength"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_length)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxLength"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_length)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchFoodVideosCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchFoodVideosCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchFoodVideosSignal(output);
        emit searchFoodVideosSignalFull(worker, output);
    } else {
        emit searchFoodVideosSignalE(output, error_type, error_str);
        emit searchFoodVideosSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchGroceryProducts(const QString& query, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& offset, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchGroceryProductsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchGroceryProductsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchGroceryProductsSignal(output);
        emit searchGroceryProductsSignalFull(worker, output);
    } else {
        emit searchGroceryProductsSignalE(output, error_type, error_str);
        emit searchGroceryProductsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchGroceryProductsByUPC(const OAINumber& upc) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/upc/{upc}");
    QString upcPathParam("{"); 
    upcPathParam.append("upc").append("}");
    fullPath.replace(upcPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(upc)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchGroceryProductsByUPCCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchGroceryProductsByUPCCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchGroceryProductsByUPCSignal(output);
        emit searchGroceryProductsByUPCSignalFull(worker, output);
    } else {
        emit searchGroceryProductsByUPCSignalE(output, error_type, error_str);
        emit searchGroceryProductsByUPCSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchMenuItems(const QString& query, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& offset, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchMenuItemsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchMenuItemsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchMenuItemsSignal(output);
        emit searchMenuItemsSignalFull(worker, output);
    } else {
        emit searchMenuItemsSignalE(output, error_type, error_str);
        emit searchMenuItemsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchRecipes(const QString& query, const QString& cuisine, const QString& diet, const QString& exclude_ingredients, const QString& intolerances, const OAINumber& offset, const OAINumber& number, const bool& limit_license, const bool& instructions_required) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cuisine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(cuisine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("diet"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(diet)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("excludeIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("intolerances"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(intolerances)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("instructionsRequired"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(instructions_required)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchRecipesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchRecipesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchRecipesSignal(output);
        emit searchRecipesSignalFull(worker, output);
    } else {
        emit searchRecipesSignalE(output, error_type, error_str);
        emit searchRecipesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchRecipesByIngredients(const QString& ingredients, const OAINumber& number, const bool& limit_license, const OAINumber& ranking, const bool& ignore_pantry) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/findByIngredients");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ingredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ranking"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ranking)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ignorePantry"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ignore_pantry)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchRecipesByIngredientsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchRecipesByIngredientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchRecipesByIngredientsSignal(output);
        emit searchRecipesByIngredientsSignalFull(worker, output);
    } else {
        emit searchRecipesByIngredientsSignalE(output, error_type, error_str);
        emit searchRecipesByIngredientsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchRecipesByNutrients(const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const OAINumber& offset, const OAINumber& number, const bool& random, const bool& limit_license) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/findByNutrients");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("random"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(random)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchRecipesByNutrientsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchRecipesByNutrientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchRecipesByNutrientsSignal(output);
        emit searchRecipesByNutrientsSignalFull(worker, output);
    } else {
        emit searchRecipesByNutrientsSignalE(output, error_type, error_str);
        emit searchRecipesByNutrientsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchRecipesComplex(const QString& query, const QString& cuisine, const QString& exclude_cuisine, const QString& diet, const QString& intolerances, const QString& equipment, const QString& include_ingredients, const QString& exclude_ingredients, const QString& type, const bool& instructions_required, const bool& fill_ingredients, const bool& add_recipe_information, const QString& author, const QString& tags, const QString& title_match, const QString& sort, const QString& sort_direction, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const OAINumber& offset, const OAINumber& number, const bool& limit_license) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/complexSearch");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cuisine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(cuisine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("excludeCuisine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_cuisine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("diet"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(diet)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("intolerances"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(intolerances)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("equipment"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(equipment)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("excludeIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("type"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("instructionsRequired"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(instructions_required)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("fillIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(fill_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addRecipeInformation"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(add_recipe_information)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("author"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(author)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("tags"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(tags)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("titleMatch"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(title_match)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sort"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortDirection"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_direction)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchRecipesComplexCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchRecipesComplexCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchRecipesComplexSignal(output);
        emit searchRecipesComplexSignalFull(worker, output);
    } else {
        emit searchRecipesComplexSignalE(output, error_type, error_str);
        emit searchRecipesComplexSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::searchSiteContent(const QString& query) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/site/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::searchSiteContentCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::searchSiteContentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchSiteContentSignal(output);
        emit searchSiteContentSignalFull(worker, output);
    } else {
        emit searchSiteContentSignalE(output, error_type, error_str);
        emit searchSiteContentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::summarizeRecipe(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/summary");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::summarizeRecipeCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::summarizeRecipeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit summarizeRecipeSignal(output);
        emit summarizeRecipeSignalFull(worker, output);
    } else {
        emit summarizeRecipeSignalE(output, error_type, error_str);
        emit summarizeRecipeSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::talkToChatbot(const QString& text, const QString& context_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/converse");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("text"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(text)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("contextId"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(context_id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::talkToChatbotCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::talkToChatbotCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit talkToChatbotSignal(output);
        emit talkToChatbotSignalFull(worker, output);
    } else {
        emit talkToChatbotSignalE(output, error_type, error_str);
        emit talkToChatbotSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeEquipment(const QString& ingredient_list, const OAINumber& servings, const QString& view, const bool& default_css, const bool& show_backlink) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeEquipment");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (ingredient_list != nullptr) {
        input.add_var("ingredientList", ingredient_list);
    }
        if (servings != nullptr) {
        input.add_var("servings", servings);
    }
        if (view != nullptr) {
        input.add_var("view", view);
    }
        if (default_css != nullptr) {
        input.add_var("defaultCss", default_css);
    }
        if (show_backlink != nullptr) {
        input.add_var("showBacklink", show_backlink);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeEquipmentCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeEquipmentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeEquipmentSignal(output);
        emit visualizeEquipmentSignalFull(worker, output);
    } else {
        emit visualizeEquipmentSignalE(output, error_type, error_str);
        emit visualizeEquipmentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeIngredients(const QString& ingredient_list, const OAINumber& servings, const QString& measure, const QString& view, const bool& default_css, const bool& show_backlink) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeIngredients");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (ingredient_list != nullptr) {
        input.add_var("ingredientList", ingredient_list);
    }
        if (servings != nullptr) {
        input.add_var("servings", servings);
    }
        if (measure != nullptr) {
        input.add_var("measure", measure);
    }
        if (view != nullptr) {
        input.add_var("view", view);
    }
        if (default_css != nullptr) {
        input.add_var("defaultCss", default_css);
    }
        if (show_backlink != nullptr) {
        input.add_var("showBacklink", show_backlink);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeIngredientsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeIngredientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeIngredientsSignal(output);
        emit visualizeIngredientsSignalFull(worker, output);
    } else {
        emit visualizeIngredientsSignalE(output, error_type, error_str);
        emit visualizeIngredientsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeMenuItemNutritionByID(const OAINumber& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/{id}/nutritionWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeMenuItemNutritionByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeMenuItemNutritionByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeMenuItemNutritionByIDSignal(output);
        emit visualizeMenuItemNutritionByIDSignalFull(worker, output);
    } else {
        emit visualizeMenuItemNutritionByIDSignalE(output, error_type, error_str);
        emit visualizeMenuItemNutritionByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizePriceBreakdown(const QString& ingredient_list, const OAINumber& servings, const OAINumber& mode, const bool& default_css, const bool& show_backlink) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizePriceEstimator");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (ingredient_list != nullptr) {
        input.add_var("ingredientList", ingredient_list);
    }
        if (servings != nullptr) {
        input.add_var("servings", servings);
    }
        if (mode != nullptr) {
        input.add_var("mode", mode);
    }
        if (default_css != nullptr) {
        input.add_var("defaultCss", default_css);
    }
        if (show_backlink != nullptr) {
        input.add_var("showBacklink", show_backlink);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizePriceBreakdownCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizePriceBreakdownCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizePriceBreakdownSignal(output);
        emit visualizePriceBreakdownSignalFull(worker, output);
    } else {
        emit visualizePriceBreakdownSignalE(output, error_type, error_str);
        emit visualizePriceBreakdownSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeProductNutritionByID(const OAINumber& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/products/{id}/nutritionWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeProductNutritionByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeProductNutritionByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeProductNutritionByIDSignal(output);
        emit visualizeProductNutritionByIDSignalFull(worker, output);
    } else {
        emit visualizeProductNutritionByIDSignalE(output, error_type, error_str);
        emit visualizeProductNutritionByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeRecipeEquipmentByID(const OAINumber& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/equipmentWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeRecipeEquipmentByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeRecipeEquipmentByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeEquipmentByIDSignal(output);
        emit visualizeRecipeEquipmentByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipeEquipmentByIDSignalE(output, error_type, error_str);
        emit visualizeRecipeEquipmentByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeRecipeIngredientsByID(const OAINumber& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/ingredientWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeRecipeIngredientsByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeRecipeIngredientsByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeIngredientsByIDSignal(output);
        emit visualizeRecipeIngredientsByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipeIngredientsByIDSignalE(output, error_type, error_str);
        emit visualizeRecipeIngredientsByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeRecipeNutrition(const QString& ingredient_list, const OAINumber& servings, const bool& default_css, const bool& show_backlink) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeNutrition");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");
    if (ingredient_list != nullptr) {
        input.add_var("ingredientList", ingredient_list);
    }
        if (servings != nullptr) {
        input.add_var("servings", servings);
    }
        if (default_css != nullptr) {
        input.add_var("defaultCss", default_css);
    }
        if (show_backlink != nullptr) {
        input.add_var("showBacklink", show_backlink);
    }
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeRecipeNutritionCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeRecipeNutritionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeNutritionSignal(output);
        emit visualizeRecipeNutritionSignalFull(worker, output);
    } else {
        emit visualizeRecipeNutritionSignalE(output, error_type, error_str);
        emit visualizeRecipeNutritionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeRecipeNutritionByID(const OAINumber& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/nutritionWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeRecipeNutritionByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeRecipeNutritionByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeNutritionByIDSignal(output);
        emit visualizeRecipeNutritionByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipeNutritionByIDSignalE(output, error_type, error_str);
        emit visualizeRecipeNutritionByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::visualizeRecipePriceBreakdownByID(const OAINumber& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/priceBreakdownWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::visualizeRecipePriceBreakdownByIDCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::visualizeRecipePriceBreakdownByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipePriceBreakdownByIDSignal(output);
        emit visualizeRecipePriceBreakdownByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipePriceBreakdownByIDSignalE(output, error_type, error_str);
        emit visualizeRecipePriceBreakdownByIDSignalEFull(worker, error_type, error_str);
    }
}


}
