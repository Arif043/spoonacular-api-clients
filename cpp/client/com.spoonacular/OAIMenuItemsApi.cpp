/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMenuItemsApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMenuItemsApi::OAIMenuItemsApi() {

}

OAIMenuItemsApi::~OAIMenuItemsApi() {

}

OAIMenuItemsApi::OAIMenuItemsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIMenuItemsApi::autocompleteMenuItemSearch(const QString& query, const OAINumber& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/suggest");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMenuItemsApi::autocompleteMenuItemSearchCallback);

    worker->execute(&input);
}

void
OAIMenuItemsApi::autocompleteMenuItemSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_32 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit autocompleteMenuItemSearchSignal(output);
        emit autocompleteMenuItemSearchSignalFull(worker, output);
    } else {
        emit autocompleteMenuItemSearchSignalE(output, error_type, error_str);
        emit autocompleteMenuItemSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMenuItemsApi::getMenuItemInformation(const qint32& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/{id}");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMenuItemsApi::getMenuItemInformationCallback);

    worker->execute(&input);
}

void
OAIMenuItemsApi::getMenuItemInformationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_36 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMenuItemInformationSignal(output);
        emit getMenuItemInformationSignalFull(worker, output);
    } else {
        emit getMenuItemInformationSignalE(output, error_type, error_str);
        emit getMenuItemInformationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMenuItemsApi::menuItemNutritionByIDImage(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/{id}/nutritionWidget.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMenuItemsApi::menuItemNutritionByIDImageCallback);

    worker->execute(&input);
}

void
OAIMenuItemsApi::menuItemNutritionByIDImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit menuItemNutritionByIDImageSignal(output);
        emit menuItemNutritionByIDImageSignalFull(worker, output);
    } else {
        emit menuItemNutritionByIDImageSignalE(output, error_type, error_str);
        emit menuItemNutritionByIDImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMenuItemsApi::menuItemNutritionLabelImage(const OAINumber& id, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/{id}/nutritionLabel.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showOptionalNutrients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_optional_nutrients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showZeroValues"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_zero_values)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_ingredients)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMenuItemsApi::menuItemNutritionLabelImageCallback);

    worker->execute(&input);
}

void
OAIMenuItemsApi::menuItemNutritionLabelImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit menuItemNutritionLabelImageSignal(output);
        emit menuItemNutritionLabelImageSignalFull(worker, output);
    } else {
        emit menuItemNutritionLabelImageSignalE(output, error_type, error_str);
        emit menuItemNutritionLabelImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMenuItemsApi::menuItemNutritionLabelWidget(const OAINumber& id, const bool& default_css, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/{id}/nutritionLabel");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showOptionalNutrients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_optional_nutrients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showZeroValues"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_zero_values)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_ingredients)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMenuItemsApi::menuItemNutritionLabelWidgetCallback);

    worker->execute(&input);
}

void
OAIMenuItemsApi::menuItemNutritionLabelWidgetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit menuItemNutritionLabelWidgetSignal(output);
        emit menuItemNutritionLabelWidgetSignalFull(worker, output);
    } else {
        emit menuItemNutritionLabelWidgetSignalE(output, error_type, error_str);
        emit menuItemNutritionLabelWidgetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMenuItemsApi::searchMenuItems(const QString& query, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_fat, const OAINumber& max_fat, const qint32& offset, const qint32& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMenuItemsApi::searchMenuItemsCallback);

    worker->execute(&input);
}

void
OAIMenuItemsApi::searchMenuItemsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_35 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchMenuItemsSignal(output);
        emit searchMenuItemsSignalFull(worker, output);
    } else {
        emit searchMenuItemsSignalE(output, error_type, error_str);
        emit searchMenuItemsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIMenuItemsApi::visualizeMenuItemNutritionByID(const qint32& id, const bool& default_css, const QString& accept) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/menuItems/{id}/nutritionWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");

    if (accept != nullptr) {
        input.headers.insert("Accept", accept);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIMenuItemsApi::visualizeMenuItemNutritionByIDCallback);

    worker->execute(&input);
}

void
OAIMenuItemsApi::visualizeMenuItemNutritionByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeMenuItemNutritionByIDSignal(output);
        emit visualizeMenuItemNutritionByIDSignalFull(worker, output);
    } else {
        emit visualizeMenuItemNutritionByIDSignalE(output, error_type, error_str);
        emit visualizeMenuItemNutritionByIDSignalEFull(worker, error_type, error_str);
    }
}


}
