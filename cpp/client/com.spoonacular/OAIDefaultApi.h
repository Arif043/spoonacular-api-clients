/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHttpRequest.h"

#include "OAIHttpRequest.h"
#include "com.spoonacular.client.model\OAIInline_object_8.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include "com.spoonacular.client.model\OAIObject.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIDefaultApi: public QObject {
    Q_OBJECT

public:
    OAIDefaultApi();
    OAIDefaultApi(QString host, QString basePath);
    ~OAIDefaultApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void analyzeARecipeSearchQuery(const QString& q);
    void analyzeRecipeInstructions(const QString& instructions);
    void autocompleteIngredientSearch(const QString& query, const OAINumber& number, const bool& meta_information, const bool& intolerances);
    void autocompleteMenuItemSearch(const QString& query, const OAINumber& number);
    void autocompleteProductSearch(const QString& query, const OAINumber& number);
    void autocompleteRecipeSearch(const QString& query, const OAINumber& number);
    void classifyCuisine(const QString& title, const QString& ingredient_list);
    void classifyGroceryProduct(const OAIInline_object_8& oai_inline_object_8, const QString& locale);
    void classifyGroceryProductBulk(const OAIObject& body, const QString& locale);
    void convertAmounts(const QString& ingredient_name, const OAINumber& source_amount, const QString& source_unit, const QString& target_unit);
    void createRecipeCard(const QString& title, const OAIHttpRequestInputFileElement*& image, const QString& ingredients, const QString& instructions, const OAINumber& ready_in_minutes, const OAINumber& servings, const QString& mask, const QString& background_image, const QString& author, const QString& background_color, const QString& font_color, const QString& source);
    void detectFoodInText(const QString& text);
    void extractRecipeFromWebsite(const QString& url, const bool& force_extraction);
    void generateMealPlan(const QString& time_frame, const OAINumber& target_calories, const QString& diet, const QString& exclude);
    void getARandomFoodJoke();
    void getAnalyzedRecipeInstructions(const OAINumber& id, const bool& step_breakdown);
    void getComparableProducts(const OAINumber& upc);
    void getConversationSuggests(const QString& query, const OAINumber& number);
    void getDishPairingForWine(const QString& wine);
    void getIngredientInformation(const OAINumber& id, const OAINumber& amount, const QString& unit);
    void getIngredientSubstitutes(const QString& ingredient_name);
    void getIngredientSubstitutesByID(const OAINumber& id);
    void getMenuItemInformation(const OAINumber& id);
    void getProductInformation(const OAINumber& id);
    void getRandomFoodTrivia();
    void getRandomRecipes(const bool& limit_license, const QString& tags, const OAINumber& number);
    void getRecipeEquipmentByID(const OAINumber& id);
    void getRecipeInformation(const OAINumber& id, const bool& include_nutrition);
    void getRecipeInformationBulk(const QString& ids, const bool& include_nutrition);
    void getRecipeIngredientsByID(const OAINumber& id);
    void getRecipeNutritionWidgetByID(const OAINumber& id);
    void getRecipePriceBreakdownByID(const OAINumber& id);
    void getSimilarRecipes(const OAINumber& id, const OAINumber& number);
    void getWineDescription(const QString& wine);
    void getWinePairing(const QString& food, const OAINumber& max_price);
    void getWineRecommendation(const QString& wine, const OAINumber& max_price, const OAINumber& min_rating, const OAINumber& number);
    void guessNutritionByDishName(const QString& title);
    void mapIngredientsToGroceryProducts(const OAIObject& body);
    void parseIngredients(const QString& ingredient_list, const OAINumber& servings, const bool& include_nutrition);
    void quickAnswer(const QString& q);
    void searchFoodVideos(const QString& query, const QString& type, const QString& cuisine, const QString& diet, const QString& include_ingredients, const QString& exclude_ingredients, const OAINumber& min_length, const OAINumber& max_length, const OAINumber& offset, const OAINumber& number);
    void searchGroceryProducts(const QString& query, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& offset, const OAINumber& number);
    void searchGroceryProductsByUPC(const OAINumber& upc);
    void searchMenuItems(const QString& query, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& offset, const OAINumber& number);
    void searchRecipes(const QString& query, const QString& cuisine, const QString& diet, const QString& exclude_ingredients, const QString& intolerances, const OAINumber& offset, const OAINumber& number, const bool& limit_license, const bool& instructions_required);
    void searchRecipesByIngredients(const QString& ingredients, const OAINumber& number, const bool& limit_license, const OAINumber& ranking, const bool& ignore_pantry);
    void searchRecipesByNutrients(const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const OAINumber& offset, const OAINumber& number, const bool& random, const bool& limit_license);
    void searchRecipesComplex(const QString& query, const QString& cuisine, const QString& exclude_cuisine, const QString& diet, const QString& intolerances, const QString& equipment, const QString& include_ingredients, const QString& exclude_ingredients, const QString& type, const bool& instructions_required, const bool& fill_ingredients, const bool& add_recipe_information, const QString& author, const QString& tags, const QString& title_match, const OAINumber& max_ready_time, const bool& ignore_pantry, const QString& sort, const QString& sort_direction, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const OAINumber& offset, const OAINumber& number, const bool& limit_license);
    void searchSiteContent(const QString& query);
    void summarizeRecipe(const OAINumber& id);
    void talkToChatbot(const QString& text, const QString& context_id);
    void visualizeEquipment(const QString& ingredient_list, const OAINumber& servings, const QString& view, const bool& default_css, const bool& show_backlink);
    void visualizeIngredients(const QString& ingredient_list, const OAINumber& servings, const QString& measure, const QString& view, const bool& default_css, const bool& show_backlink);
    void visualizeMenuItemNutritionByID(const OAINumber& id, const bool& default_css);
    void visualizePriceBreakdown(const QString& ingredient_list, const OAINumber& servings, const OAINumber& mode, const bool& default_css, const bool& show_backlink);
    void visualizeProductNutritionByID(const OAINumber& id, const bool& default_css);
    void visualizeRecipeEquipmentByID(const OAINumber& id, const bool& default_css);
    void visualizeRecipeIngredientsByID(const OAINumber& id, const bool& default_css);
    void visualizeRecipeNutrition(const QString& ingredient_list, const OAINumber& servings, const bool& default_css, const bool& show_backlink);
    void visualizeRecipeNutritionByID(const OAINumber& id, const bool& default_css);
    void visualizeRecipePriceBreakdownByID(const OAINumber& id, const bool& default_css);
    
private:
    void analyzeARecipeSearchQueryCallback (OAIHttpRequestWorker * worker);
    void analyzeRecipeInstructionsCallback (OAIHttpRequestWorker * worker);
    void autocompleteIngredientSearchCallback (OAIHttpRequestWorker * worker);
    void autocompleteMenuItemSearchCallback (OAIHttpRequestWorker * worker);
    void autocompleteProductSearchCallback (OAIHttpRequestWorker * worker);
    void autocompleteRecipeSearchCallback (OAIHttpRequestWorker * worker);
    void classifyCuisineCallback (OAIHttpRequestWorker * worker);
    void classifyGroceryProductCallback (OAIHttpRequestWorker * worker);
    void classifyGroceryProductBulkCallback (OAIHttpRequestWorker * worker);
    void convertAmountsCallback (OAIHttpRequestWorker * worker);
    void createRecipeCardCallback (OAIHttpRequestWorker * worker);
    void detectFoodInTextCallback (OAIHttpRequestWorker * worker);
    void extractRecipeFromWebsiteCallback (OAIHttpRequestWorker * worker);
    void generateMealPlanCallback (OAIHttpRequestWorker * worker);
    void getARandomFoodJokeCallback (OAIHttpRequestWorker * worker);
    void getAnalyzedRecipeInstructionsCallback (OAIHttpRequestWorker * worker);
    void getComparableProductsCallback (OAIHttpRequestWorker * worker);
    void getConversationSuggestsCallback (OAIHttpRequestWorker * worker);
    void getDishPairingForWineCallback (OAIHttpRequestWorker * worker);
    void getIngredientInformationCallback (OAIHttpRequestWorker * worker);
    void getIngredientSubstitutesCallback (OAIHttpRequestWorker * worker);
    void getIngredientSubstitutesByIDCallback (OAIHttpRequestWorker * worker);
    void getMenuItemInformationCallback (OAIHttpRequestWorker * worker);
    void getProductInformationCallback (OAIHttpRequestWorker * worker);
    void getRandomFoodTriviaCallback (OAIHttpRequestWorker * worker);
    void getRandomRecipesCallback (OAIHttpRequestWorker * worker);
    void getRecipeEquipmentByIDCallback (OAIHttpRequestWorker * worker);
    void getRecipeInformationCallback (OAIHttpRequestWorker * worker);
    void getRecipeInformationBulkCallback (OAIHttpRequestWorker * worker);
    void getRecipeIngredientsByIDCallback (OAIHttpRequestWorker * worker);
    void getRecipeNutritionWidgetByIDCallback (OAIHttpRequestWorker * worker);
    void getRecipePriceBreakdownByIDCallback (OAIHttpRequestWorker * worker);
    void getSimilarRecipesCallback (OAIHttpRequestWorker * worker);
    void getWineDescriptionCallback (OAIHttpRequestWorker * worker);
    void getWinePairingCallback (OAIHttpRequestWorker * worker);
    void getWineRecommendationCallback (OAIHttpRequestWorker * worker);
    void guessNutritionByDishNameCallback (OAIHttpRequestWorker * worker);
    void mapIngredientsToGroceryProductsCallback (OAIHttpRequestWorker * worker);
    void parseIngredientsCallback (OAIHttpRequestWorker * worker);
    void quickAnswerCallback (OAIHttpRequestWorker * worker);
    void searchFoodVideosCallback (OAIHttpRequestWorker * worker);
    void searchGroceryProductsCallback (OAIHttpRequestWorker * worker);
    void searchGroceryProductsByUPCCallback (OAIHttpRequestWorker * worker);
    void searchMenuItemsCallback (OAIHttpRequestWorker * worker);
    void searchRecipesCallback (OAIHttpRequestWorker * worker);
    void searchRecipesByIngredientsCallback (OAIHttpRequestWorker * worker);
    void searchRecipesByNutrientsCallback (OAIHttpRequestWorker * worker);
    void searchRecipesComplexCallback (OAIHttpRequestWorker * worker);
    void searchSiteContentCallback (OAIHttpRequestWorker * worker);
    void summarizeRecipeCallback (OAIHttpRequestWorker * worker);
    void talkToChatbotCallback (OAIHttpRequestWorker * worker);
    void visualizeEquipmentCallback (OAIHttpRequestWorker * worker);
    void visualizeIngredientsCallback (OAIHttpRequestWorker * worker);
    void visualizeMenuItemNutritionByIDCallback (OAIHttpRequestWorker * worker);
    void visualizePriceBreakdownCallback (OAIHttpRequestWorker * worker);
    void visualizeProductNutritionByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeEquipmentByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeIngredientsByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeNutritionCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeNutritionByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipePriceBreakdownByIDCallback (OAIHttpRequestWorker * worker);
    
signals:
    void analyzeARecipeSearchQuerySignal(OAIObject summary);
    void analyzeRecipeInstructionsSignal(OAIObject summary);
    void autocompleteIngredientSearchSignal(OAIObject summary);
    void autocompleteMenuItemSearchSignal(OAIObject summary);
    void autocompleteProductSearchSignal(OAIObject summary);
    void autocompleteRecipeSearchSignal(OAIObject summary);
    void classifyCuisineSignal(OAIObject summary);
    void classifyGroceryProductSignal(OAIObject summary);
    void classifyGroceryProductBulkSignal(OAIObject summary);
    void convertAmountsSignal(OAIObject summary);
    void createRecipeCardSignal(OAIObject summary);
    void detectFoodInTextSignal(OAIObject summary);
    void extractRecipeFromWebsiteSignal(OAIObject summary);
    void generateMealPlanSignal(OAIObject summary);
    void getARandomFoodJokeSignal(OAIObject summary);
    void getAnalyzedRecipeInstructionsSignal(OAIObject summary);
    void getComparableProductsSignal(OAIObject summary);
    void getConversationSuggestsSignal(OAIObject summary);
    void getDishPairingForWineSignal(OAIObject summary);
    void getIngredientInformationSignal(OAIObject summary);
    void getIngredientSubstitutesSignal(OAIObject summary);
    void getIngredientSubstitutesByIDSignal(OAIObject summary);
    void getMenuItemInformationSignal(OAIObject summary);
    void getProductInformationSignal(OAIObject summary);
    void getRandomFoodTriviaSignal(OAIObject summary);
    void getRandomRecipesSignal(OAIObject summary);
    void getRecipeEquipmentByIDSignal(OAIObject summary);
    void getRecipeInformationSignal(OAIObject summary);
    void getRecipeInformationBulkSignal(OAIObject summary);
    void getRecipeIngredientsByIDSignal(OAIObject summary);
    void getRecipeNutritionWidgetByIDSignal(OAIObject summary);
    void getRecipePriceBreakdownByIDSignal(OAIObject summary);
    void getSimilarRecipesSignal(OAIObject summary);
    void getWineDescriptionSignal(OAIObject summary);
    void getWinePairingSignal(OAIObject summary);
    void getWineRecommendationSignal(OAIObject summary);
    void guessNutritionByDishNameSignal(OAIObject summary);
    void mapIngredientsToGroceryProductsSignal(OAIObject summary);
    void parseIngredientsSignal(OAIObject summary);
    void quickAnswerSignal(OAIObject summary);
    void searchFoodVideosSignal(OAIObject summary);
    void searchGroceryProductsSignal(OAIObject summary);
    void searchGroceryProductsByUPCSignal(OAIObject summary);
    void searchMenuItemsSignal(OAIObject summary);
    void searchRecipesSignal(OAIObject summary);
    void searchRecipesByIngredientsSignal(OAIObject summary);
    void searchRecipesByNutrientsSignal(OAIObject summary);
    void searchRecipesComplexSignal(OAIObject summary);
    void searchSiteContentSignal(OAIObject summary);
    void summarizeRecipeSignal(OAIObject summary);
    void talkToChatbotSignal(OAIObject summary);
    void visualizeEquipmentSignal(QString summary);
    void visualizeIngredientsSignal(QString summary);
    void visualizeMenuItemNutritionByIDSignal(QString summary);
    void visualizePriceBreakdownSignal(QString summary);
    void visualizeProductNutritionByIDSignal(QString summary);
    void visualizeRecipeEquipmentByIDSignal(QString summary);
    void visualizeRecipeIngredientsByIDSignal(QString summary);
    void visualizeRecipeNutritionSignal(QString summary);
    void visualizeRecipeNutritionByIDSignal(QString summary);
    void visualizeRecipePriceBreakdownByIDSignal(QString summary);
    
    void analyzeARecipeSearchQuerySignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void analyzeRecipeInstructionsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void autocompleteIngredientSearchSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void autocompleteMenuItemSearchSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void autocompleteProductSearchSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void autocompleteRecipeSearchSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void classifyCuisineSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void classifyGroceryProductSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void classifyGroceryProductBulkSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void convertAmountsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void createRecipeCardSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void detectFoodInTextSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void extractRecipeFromWebsiteSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void generateMealPlanSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getARandomFoodJokeSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getAnalyzedRecipeInstructionsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getComparableProductsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getConversationSuggestsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getDishPairingForWineSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getIngredientInformationSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getIngredientSubstitutesSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getIngredientSubstitutesByIDSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getMenuItemInformationSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getProductInformationSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRandomFoodTriviaSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRandomRecipesSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRecipeEquipmentByIDSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRecipeInformationSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRecipeInformationBulkSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRecipeIngredientsByIDSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRecipeNutritionWidgetByIDSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getRecipePriceBreakdownByIDSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getSimilarRecipesSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getWineDescriptionSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getWinePairingSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getWineRecommendationSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void guessNutritionByDishNameSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void mapIngredientsToGroceryProductsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void parseIngredientsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void quickAnswerSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchFoodVideosSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchGroceryProductsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchGroceryProductsByUPCSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchMenuItemsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchRecipesSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchRecipesByIngredientsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchRecipesByNutrientsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchRecipesComplexSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchSiteContentSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void summarizeRecipeSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void talkToChatbotSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void visualizeEquipmentSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeIngredientsSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeMenuItemNutritionByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizePriceBreakdownSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeProductNutritionByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeEquipmentByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeIngredientsByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeNutritionSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeNutritionByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipePriceBreakdownByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    
    void analyzeARecipeSearchQuerySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void analyzeRecipeInstructionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteIngredientSearchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteMenuItemSearchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteProductSearchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteRecipeSearchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyCuisineSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyGroceryProductSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyGroceryProductBulkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void convertAmountsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createRecipeCardSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void detectFoodInTextSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void extractRecipeFromWebsiteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void generateMealPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getARandomFoodJokeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAnalyzedRecipeInstructionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getComparableProductsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConversationSuggestsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDishPairingForWineSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientInformationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesByIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMenuItemInformationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getProductInformationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomFoodTriviaSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomRecipesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeEquipmentByIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationBulkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeIngredientsByIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeNutritionWidgetByIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipePriceBreakdownByIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSimilarRecipesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWineDescriptionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWinePairingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWineRecommendationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guessNutritionByDishNameSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void mapIngredientsToGroceryProductsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void parseIngredientsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void quickAnswerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchFoodVideosSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchGroceryProductsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchGroceryProductsByUPCSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchMenuItemsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByIngredientsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByNutrientsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesComplexSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSiteContentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void summarizeRecipeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void talkToChatbotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeEquipmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeIngredientsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeMenuItemNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizePriceBreakdownSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeProductNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeEquipmentByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeIngredientsByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipePriceBreakdownByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void analyzeARecipeSearchQuerySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void analyzeRecipeInstructionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteIngredientSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteMenuItemSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteProductSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteRecipeSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyCuisineSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyGroceryProductSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyGroceryProductBulkSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void convertAmountsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createRecipeCardSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void detectFoodInTextSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void extractRecipeFromWebsiteSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void generateMealPlanSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getARandomFoodJokeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAnalyzedRecipeInstructionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getComparableProductsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConversationSuggestsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDishPairingForWineSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientInformationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIngredientSubstitutesByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMenuItemInformationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getProductInformationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomFoodTriviaSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomRecipesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeEquipmentByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationBulkSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeIngredientsByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeNutritionWidgetByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipePriceBreakdownByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSimilarRecipesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWineDescriptionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWinePairingSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWineRecommendationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guessNutritionByDishNameSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void mapIngredientsToGroceryProductsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void parseIngredientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void quickAnswerSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchFoodVideosSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchGroceryProductsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchGroceryProductsByUPCSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchMenuItemsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByIngredientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByNutrientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesComplexSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSiteContentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void summarizeRecipeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void talkToChatbotSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeEquipmentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeIngredientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeMenuItemNutritionByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizePriceBreakdownSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeProductNutritionByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeEquipmentByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeIngredientsByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipePriceBreakdownByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
