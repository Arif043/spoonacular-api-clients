/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipesApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIRecipesApi::OAIRecipesApi() {

}

OAIRecipesApi::~OAIRecipesApi() {

}

OAIRecipesApi::OAIRecipesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIRecipesApi::analyzeARecipeSearchQuery(const QString& q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/queries/analyze");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::analyzeARecipeSearchQueryCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::analyzeARecipeSearchQueryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_18 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit analyzeARecipeSearchQuerySignal(output);
        emit analyzeARecipeSearchQuerySignalFull(worker, output);
    } else {
        emit analyzeARecipeSearchQuerySignalE(output, error_type, error_str);
        emit analyzeARecipeSearchQuerySignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::analyzeRecipeInstructions(const QString& content_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/analyzeInstructions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::analyzeRecipeInstructionsCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::analyzeRecipeInstructionsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_16 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit analyzeRecipeInstructionsSignal(output);
        emit analyzeRecipeInstructionsSignalFull(worker, output);
    } else {
        emit analyzeRecipeInstructionsSignalE(output, error_type, error_str);
        emit analyzeRecipeInstructionsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::autocompleteRecipeSearch(const QString& query, const qint32& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/autocomplete");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::autocompleteRecipeSearchCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::autocompleteRecipeSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_7> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_7 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit autocompleteRecipeSearchSignal(output);
        emit autocompleteRecipeSearchSignalFull(worker, output);
    } else {
        emit autocompleteRecipeSearchSignalE(output, error_type, error_str);
        emit autocompleteRecipeSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::classifyCuisine(const QString& content_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/cuisine");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::classifyCuisineCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::classifyCuisineCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_17 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit classifyCuisineSignal(output);
        emit classifyCuisineSignalFull(worker, output);
    } else {
        emit classifyCuisineSignalE(output, error_type, error_str);
        emit classifyCuisineSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::computeGlycemicLoad(const OAIInline_object& oai_inline_object, const QString& language) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/glycemicLoad");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("language"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(language)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_inline_object.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::computeGlycemicLoadCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::computeGlycemicLoadCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_23 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit computeGlycemicLoadSignal(output);
        emit computeGlycemicLoadSignalFull(worker, output);
    } else {
        emit computeGlycemicLoadSignalE(output, error_type, error_str);
        emit computeGlycemicLoadSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::convertAmounts(const QString& ingredient_name, const OAINumber& source_amount, const QString& source_unit, const QString& target_unit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/convert");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ingredientName"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ingredient_name)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sourceAmount"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source_amount)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sourceUnit"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source_unit)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("targetUnit"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_unit)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::convertAmountsCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::convertAmountsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_19 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit convertAmountsSignal(output);
        emit convertAmountsSignalFull(worker, output);
    } else {
        emit convertAmountsSignalE(output, error_type, error_str);
        emit convertAmountsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::createRecipeCard(const QString& content_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeRecipe");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::createRecipeCardCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::createRecipeCardCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_15 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createRecipeCardSignal(output);
        emit createRecipeCardSignalFull(worker, output);
    } else {
        emit createRecipeCardSignalE(output, error_type, error_str);
        emit createRecipeCardSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::equipmentByIDImage(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/equipmentWidget.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::equipmentByIDImageCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::equipmentByIDImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit equipmentByIDImageSignal(output);
        emit equipmentByIDImageSignalFull(worker, output);
    } else {
        emit equipmentByIDImageSignalE(output, error_type, error_str);
        emit equipmentByIDImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::extractRecipeFromWebsite(const QString& url, const bool& force_extraction, const bool& analyze, const bool& include_nutrition, const bool& include_taste) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/extract");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("url"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(url)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("forceExtraction"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(force_extraction)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("analyze"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(analyze)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeNutrition"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_nutrition)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeTaste"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_taste)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::extractRecipeFromWebsiteCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::extractRecipeFromWebsiteCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_3 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit extractRecipeFromWebsiteSignal(output);
        emit extractRecipeFromWebsiteSignalFull(worker, output);
    } else {
        emit extractRecipeFromWebsiteSignalE(output, error_type, error_str);
        emit extractRecipeFromWebsiteSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getAnalyzedRecipeInstructions(const qint32& id, const bool& step_breakdown) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/analyzedInstructions");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("stepBreakdown"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(step_breakdown)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getAnalyzedRecipeInstructionsCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getAnalyzedRecipeInstructionsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_13 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAnalyzedRecipeInstructionsSignal(output);
        emit getAnalyzedRecipeInstructionsSignalFull(worker, output);
    } else {
        emit getAnalyzedRecipeInstructionsSignalE(output, error_type, error_str);
        emit getAnalyzedRecipeInstructionsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRandomRecipes(const bool& limit_license, const QString& tags, const qint32& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/random");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("tags"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(tags)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRandomRecipesCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRandomRecipesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_6 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRandomRecipesSignal(output);
        emit getRandomRecipesSignalFull(worker, output);
    } else {
        emit getRandomRecipesSignalE(output, error_type, error_str);
        emit getRandomRecipesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRecipeEquipmentByID(const qint32& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/equipmentWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRecipeEquipmentByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRecipeEquipmentByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_9 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeEquipmentByIDSignal(output);
        emit getRecipeEquipmentByIDSignalFull(worker, output);
    } else {
        emit getRecipeEquipmentByIDSignalE(output, error_type, error_str);
        emit getRecipeEquipmentByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRecipeInformation(const qint32& id, const bool& include_nutrition) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/information");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeNutrition"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_nutrition)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRecipeInformationCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRecipeInformationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_3 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeInformationSignal(output);
        emit getRecipeInformationSignalFull(worker, output);
    } else {
        emit getRecipeInformationSignalE(output, error_type, error_str);
        emit getRecipeInformationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRecipeInformationBulk(const QString& ids, const bool& include_nutrition) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/informationBulk");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ids"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ids)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeNutrition"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_nutrition)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRecipeInformationBulkCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRecipeInformationBulkCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_4> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_4 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeInformationBulkSignal(output);
        emit getRecipeInformationBulkSignalFull(worker, output);
    } else {
        emit getRecipeInformationBulkSignalE(output, error_type, error_str);
        emit getRecipeInformationBulkSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRecipeIngredientsByID(const qint32& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/ingredientWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRecipeIngredientsByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRecipeIngredientsByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_11 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeIngredientsByIDSignal(output);
        emit getRecipeIngredientsByIDSignalFull(worker, output);
    } else {
        emit getRecipeIngredientsByIDSignalE(output, error_type, error_str);
        emit getRecipeIngredientsByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRecipeNutritionWidgetByID(const qint32& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/nutritionWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRecipeNutritionWidgetByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRecipeNutritionWidgetByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_12 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeNutritionWidgetByIDSignal(output);
        emit getRecipeNutritionWidgetByIDSignalFull(worker, output);
    } else {
        emit getRecipeNutritionWidgetByIDSignalE(output, error_type, error_str);
        emit getRecipeNutritionWidgetByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRecipePriceBreakdownByID(const qint32& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/priceBreakdownWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRecipePriceBreakdownByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRecipePriceBreakdownByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_10 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipePriceBreakdownByIDSignal(output);
        emit getRecipePriceBreakdownByIDSignalFull(worker, output);
    } else {
        emit getRecipePriceBreakdownByIDSignalE(output, error_type, error_str);
        emit getRecipePriceBreakdownByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getRecipeTasteByID(const qint32& id, const bool& normalize) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/tasteWidget.json");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("normalize"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(normalize)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getRecipeTasteByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getRecipeTasteByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_8 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRecipeTasteByIDSignal(output);
        emit getRecipeTasteByIDSignalFull(worker, output);
    } else {
        emit getRecipeTasteByIDSignalE(output, error_type, error_str);
        emit getRecipeTasteByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::getSimilarRecipes(const qint32& id, const qint32& number, const bool& limit_license) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/similar");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::getSimilarRecipesCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::getSimilarRecipesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_5> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_5 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSimilarRecipesSignal(output);
        emit getSimilarRecipesSignalFull(worker, output);
    } else {
        emit getSimilarRecipesSignalE(output, error_type, error_str);
        emit getSimilarRecipesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::guessNutritionByDishName(const QString& title) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/guessNutrition");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("title"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(title)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::guessNutritionByDishNameCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::guessNutritionByDishNameCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_21 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit guessNutritionByDishNameSignal(output);
        emit guessNutritionByDishNameSignalFull(worker, output);
    } else {
        emit guessNutritionByDishNameSignalE(output, error_type, error_str);
        emit guessNutritionByDishNameSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::ingredientsByIDImage(const OAINumber& id, const QString& measure) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/ingredientWidget.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("measure"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(measure)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::ingredientsByIDImageCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::ingredientsByIDImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ingredientsByIDImageSignal(output);
        emit ingredientsByIDImageSignalFull(worker, output);
    } else {
        emit ingredientsByIDImageSignalE(output, error_type, error_str);
        emit ingredientsByIDImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::parseIngredients(const QString& content_type, const QString& language) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/parseIngredients");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("language"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(language)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::parseIngredientsCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::parseIngredientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_20> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_20 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit parseIngredientsSignal(output);
        emit parseIngredientsSignalFull(worker, output);
    } else {
        emit parseIngredientsSignalE(output, error_type, error_str);
        emit parseIngredientsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::priceBreakdownByIDImage(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/priceBreakdownWidget.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::priceBreakdownByIDImageCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::priceBreakdownByIDImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit priceBreakdownByIDImageSignal(output);
        emit priceBreakdownByIDImageSignalFull(worker, output);
    } else {
        emit priceBreakdownByIDImageSignalE(output, error_type, error_str);
        emit priceBreakdownByIDImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::quickAnswer(const QString& q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/quickAnswer");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::quickAnswerCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::quickAnswerCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_50 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit quickAnswerSignal(output);
        emit quickAnswerSignalFull(worker, output);
    } else {
        emit quickAnswerSignalE(output, error_type, error_str);
        emit quickAnswerSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::recipeNutritionByIDImage(const OAINumber& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/nutritionWidget.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::recipeNutritionByIDImageCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::recipeNutritionByIDImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit recipeNutritionByIDImageSignal(output);
        emit recipeNutritionByIDImageSignalFull(worker, output);
    } else {
        emit recipeNutritionByIDImageSignalE(output, error_type, error_str);
        emit recipeNutritionByIDImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::recipeNutritionLabelImage(const OAINumber& id, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/nutritionLabel.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showOptionalNutrients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_optional_nutrients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showZeroValues"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_zero_values)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_ingredients)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::recipeNutritionLabelImageCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::recipeNutritionLabelImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit recipeNutritionLabelImageSignal(output);
        emit recipeNutritionLabelImageSignalFull(worker, output);
    } else {
        emit recipeNutritionLabelImageSignalE(output, error_type, error_str);
        emit recipeNutritionLabelImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::recipeNutritionLabelWidget(const OAINumber& id, const bool& default_css, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/nutritionLabel");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showOptionalNutrients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_optional_nutrients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showZeroValues"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_zero_values)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_ingredients)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::recipeNutritionLabelWidgetCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::recipeNutritionLabelWidgetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit recipeNutritionLabelWidgetSignal(output);
        emit recipeNutritionLabelWidgetSignalFull(worker, output);
    } else {
        emit recipeNutritionLabelWidgetSignalE(output, error_type, error_str);
        emit recipeNutritionLabelWidgetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::recipeTasteByIDImage(const OAINumber& id, const bool& normalize, const QString& rgb) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/tasteWidget.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("normalize"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(normalize)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rgb"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgb)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::recipeTasteByIDImageCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::recipeTasteByIDImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit recipeTasteByIDImageSignal(output);
        emit recipeTasteByIDImageSignalFull(worker, output);
    } else {
        emit recipeTasteByIDImageSignalE(output, error_type, error_str);
        emit recipeTasteByIDImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::searchRecipes(const QString& query, const QString& cuisine, const QString& exclude_cuisine, const QString& diet, const QString& intolerances, const QString& equipment, const QString& include_ingredients, const QString& exclude_ingredients, const QString& type, const bool& instructions_required, const bool& fill_ingredients, const bool& add_recipe_information, const bool& add_recipe_nutrition, const QString& author, const QString& tags, const OAINumber& recipe_box_id, const QString& title_match, const OAINumber& max_ready_time, const bool& ignore_pantry, const QString& sort, const QString& sort_direction, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const qint32& offset, const qint32& number, const bool& limit_license) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/complexSearch");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cuisine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(cuisine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("excludeCuisine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_cuisine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("diet"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(diet)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("intolerances"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(intolerances)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("equipment"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(equipment)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("excludeIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("type"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("instructionsRequired"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(instructions_required)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("fillIngredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(fill_ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addRecipeInformation"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(add_recipe_information)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addRecipeNutrition"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(add_recipe_nutrition)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("author"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(author)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("tags"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(tags)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("recipeBoxId"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(recipe_box_id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("titleMatch"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(title_match)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxReadyTime"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_ready_time)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ignorePantry"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ignore_pantry)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sort"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortDirection"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_direction)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::searchRecipesCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::searchRecipesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchRecipesSignal(output);
        emit searchRecipesSignalFull(worker, output);
    } else {
        emit searchRecipesSignalE(output, error_type, error_str);
        emit searchRecipesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::searchRecipesByIngredients(const QString& ingredients, const qint32& number, const bool& limit_license, const OAINumber& ranking, const bool& ignore_pantry) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/findByIngredients");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ingredients"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ingredients)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ranking"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ranking)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ignorePantry"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ignore_pantry)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::searchRecipesByIngredientsCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::searchRecipesByIngredientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_1> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_1 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchRecipesByIngredientsSignal(output);
        emit searchRecipesByIngredientsSignalFull(worker, output);
    } else {
        emit searchRecipesByIngredientsSignalE(output, error_type, error_str);
        emit searchRecipesByIngredientsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::searchRecipesByNutrients(const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const qint32& offset, const qint32& number, const bool& random, const bool& limit_license) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/findByNutrients");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbs"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProtein"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalories"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calories)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxAlcohol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_alcohol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCaffeine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_caffeine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCopper"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_copper)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCalcium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_calcium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_choline)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCholesterol"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_cholesterol)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFluoride"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fluoride)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSaturatedFat"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_saturated_fat)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminA"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_a)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminC"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_c)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminD"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_d)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminE"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_e)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminK"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_k)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB1"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b1)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB2"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b2)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB5"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b5)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB3"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b3)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB6"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b6)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxVitaminB12"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_vitamin_b12)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFiber"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fiber)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolate"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folate)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFolicAcid"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_folic_acid)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIodine"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iodine)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxIron"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_iron)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxMagnesium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_magnesium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxManganese"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_manganese)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPhosphorus"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_phosphorus)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPotassium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_potassium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSelenium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_selenium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSodium"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sodium)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxSugar"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_sugar)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxZinc"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_zinc)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("random"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(random)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limitLicense"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit_license)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::searchRecipesByNutrientsCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::searchRecipesByNutrientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_2> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_2 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchRecipesByNutrientsSignal(output);
        emit searchRecipesByNutrientsSignalFull(worker, output);
    } else {
        emit searchRecipesByNutrientsSignalE(output, error_type, error_str);
        emit searchRecipesByNutrientsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::summarizeRecipe(const qint32& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/summary");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::summarizeRecipeCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::summarizeRecipeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_14 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit summarizeRecipeSignal(output);
        emit summarizeRecipeSignalFull(worker, output);
    } else {
        emit summarizeRecipeSignalE(output, error_type, error_str);
        emit summarizeRecipeSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeEquipment(const QString& content_type, const QString& accept) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeEquipment");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }
    if (accept != nullptr) {
        input.headers.insert("Accept", accept);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeEquipmentCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeEquipmentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeEquipmentSignal(output);
        emit visualizeEquipmentSignalFull(worker, output);
    } else {
        emit visualizeEquipmentSignalE(output, error_type, error_str);
        emit visualizeEquipmentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizePriceBreakdown(const QString& content_type, const QString& accept, const QString& language) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizePriceEstimator");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("language"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(language)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }
    if (accept != nullptr) {
        input.headers.insert("Accept", accept);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizePriceBreakdownCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizePriceBreakdownCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizePriceBreakdownSignal(output);
        emit visualizePriceBreakdownSignalFull(worker, output);
    } else {
        emit visualizePriceBreakdownSignalE(output, error_type, error_str);
        emit visualizePriceBreakdownSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeRecipeEquipmentByID(const qint32& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/equipmentWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeRecipeEquipmentByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeRecipeEquipmentByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeEquipmentByIDSignal(output);
        emit visualizeRecipeEquipmentByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipeEquipmentByIDSignalE(output, error_type, error_str);
        emit visualizeRecipeEquipmentByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeRecipeIngredientsByID(const qint32& id, const bool& default_css, const QString& measure) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/ingredientWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("measure"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(measure)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeRecipeIngredientsByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeRecipeIngredientsByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeIngredientsByIDSignal(output);
        emit visualizeRecipeIngredientsByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipeIngredientsByIDSignalE(output, error_type, error_str);
        emit visualizeRecipeIngredientsByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeRecipeNutrition(const QString& content_type, const QString& accept, const QString& language) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeNutrition");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("language"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(language)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }
    if (accept != nullptr) {
        input.headers.insert("Accept", accept);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeRecipeNutritionCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeRecipeNutritionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeNutritionSignal(output);
        emit visualizeRecipeNutritionSignalFull(worker, output);
    } else {
        emit visualizeRecipeNutritionSignalE(output, error_type, error_str);
        emit visualizeRecipeNutritionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeRecipeNutritionByID(const qint32& id, const bool& default_css, const QString& accept) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/nutritionWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");

    if (accept != nullptr) {
        input.headers.insert("Accept", accept);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeRecipeNutritionByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeRecipeNutritionByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeNutritionByIDSignal(output);
        emit visualizeRecipeNutritionByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipeNutritionByIDSignalE(output, error_type, error_str);
        emit visualizeRecipeNutritionByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeRecipePriceBreakdownByID(const qint32& id, const bool& default_css) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/priceBreakdownWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultCss"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_css)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeRecipePriceBreakdownByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeRecipePriceBreakdownByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipePriceBreakdownByIDSignal(output);
        emit visualizeRecipePriceBreakdownByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipePriceBreakdownByIDSignalE(output, error_type, error_str);
        emit visualizeRecipePriceBreakdownByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeRecipeTaste(const QString& language, const QString& content_type, const QString& accept, const bool& normalize, const QString& rgb) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeTaste");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("language"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(language)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("normalize"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(normalize)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rgb"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgb)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }
    if (accept != nullptr) {
        input.headers.insert("Accept", accept);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeRecipeTasteCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeRecipeTasteCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeTasteSignal(output);
        emit visualizeRecipeTasteSignalFull(worker, output);
    } else {
        emit visualizeRecipeTasteSignalE(output, error_type, error_str);
        emit visualizeRecipeTasteSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRecipesApi::visualizeRecipeTasteByID(const qint32& id, const bool& normalize, const QString& rgb) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/tasteWidget");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("normalize"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(normalize)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rgb"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(rgb)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRecipesApi::visualizeRecipeTasteByIDCallback);

    worker->execute(&input);
}

void
OAIRecipesApi::visualizeRecipeTasteByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeRecipeTasteByIDSignal(output);
        emit visualizeRecipeTasteByIDSignalFull(worker, output);
    } else {
        emit visualizeRecipeTasteByIDSignalE(output, error_type, error_str);
        emit visualizeRecipeTasteByIDSignalEFull(worker, error_type, error_str);
    }
}


}
