/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngredientsApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIIngredientsApi::OAIIngredientsApi() {

}

OAIIngredientsApi::~OAIIngredientsApi() {

}

OAIIngredientsApi::OAIIngredientsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIIngredientsApi::autocompleteIngredientSearch(const QString& query, const qint32& number, const bool& meta_information, const QString& intolerances) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/autocomplete");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("metaInformation"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(meta_information)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("intolerances"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(intolerances)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::autocompleteIngredientSearchCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::autocompleteIngredientSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_24> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_24 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit autocompleteIngredientSearchSignal(output);
        emit autocompleteIngredientSearchSignalFull(worker, output);
    } else {
        emit autocompleteIngredientSearchSignalE(output, error_type, error_str);
        emit autocompleteIngredientSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::computeIngredientAmount(const OAINumber& id, const QString& nutrient, const OAINumber& target, const QString& unit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/{id}/amount");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("nutrient"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(nutrient)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("target"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(target)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("unit"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(unit)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::computeIngredientAmountCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::computeIngredientAmountCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAI_recipes_parseIngredients_nutrition_weightPerServing output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit computeIngredientAmountSignal(output);
        emit computeIngredientAmountSignalFull(worker, output);
    } else {
        emit computeIngredientAmountSignalE(output, error_type, error_str);
        emit computeIngredientAmountSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::getIngredientInformation(const qint32& id, const OAINumber& amount, const QString& unit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/{id}/information");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("amount"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(amount)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("unit"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(unit)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::getIngredientInformationCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::getIngredientInformationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_22 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getIngredientInformationSignal(output);
        emit getIngredientInformationSignalFull(worker, output);
    } else {
        emit getIngredientInformationSignalE(output, error_type, error_str);
        emit getIngredientInformationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::getIngredientSubstitutes(const QString& ingredient_name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/substitutes");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ingredientName"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(ingredient_name)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::getIngredientSubstitutesCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::getIngredientSubstitutesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_26 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getIngredientSubstitutesSignal(output);
        emit getIngredientSubstitutesSignalFull(worker, output);
    } else {
        emit getIngredientSubstitutesSignalE(output, error_type, error_str);
        emit getIngredientSubstitutesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::getIngredientSubstitutesByID(const qint32& id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/{id}/substitutes");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::getIngredientSubstitutesByIDCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::getIngredientSubstitutesByIDCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_26 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getIngredientSubstitutesByIDSignal(output);
        emit getIngredientSubstitutesByIDSignalFull(worker, output);
    } else {
        emit getIngredientSubstitutesByIDSignalE(output, error_type, error_str);
        emit getIngredientSubstitutesByIDSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::ingredientSearch(const QString& query, const bool& add_children, const OAINumber& min_protein_percent, const OAINumber& max_protein_percent, const OAINumber& min_fat_percent, const OAINumber& max_fat_percent, const OAINumber& min_carbs_percent, const OAINumber& max_carbs_percent, const bool& meta_information, const QString& intolerances, const QString& sort, const QString& sort_direction, const qint32& offset, const qint32& number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/search");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addChildren"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(add_children)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minProteinPercent"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_protein_percent)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxProteinPercent"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_protein_percent)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFatPercent"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_fat_percent)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFatPercent"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_fat_percent)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minCarbsPercent"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(min_carbs_percent)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxCarbsPercent"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_carbs_percent)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("metaInformation"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(meta_information)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("intolerances"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(intolerances)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sort"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortDirection"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_direction)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::ingredientSearchCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::ingredientSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIInline_response_200_25 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ingredientSearchSignal(output);
        emit ingredientSearchSignalFull(worker, output);
    } else {
        emit ingredientSearchSignalE(output, error_type, error_str);
        emit ingredientSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::ingredientsByIDImage(const OAINumber& id, const QString& measure) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/{id}/ingredientWidget.png");
    QString idPathParam("{"); 
    idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("measure"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(measure)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::ingredientsByIDImageCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::ingredientsByIDImageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ingredientsByIDImageSignal(output);
        emit ingredientsByIDImageSignalFull(worker, output);
    } else {
        emit ingredientsByIDImageSignalE(output, error_type, error_str);
        emit ingredientsByIDImageSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::mapIngredientsToGroceryProducts(const OAIInline_object_2& oai_inline_object_2) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/food/ingredients/map");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_inline_object_2.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::mapIngredientsToGroceryProductsCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::mapIngredientsToGroceryProductsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAIInline_response_200_34> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAIInline_response_200_34 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit mapIngredientsToGroceryProductsSignal(output);
        emit mapIngredientsToGroceryProductsSignalFull(worker, output);
    } else {
        emit mapIngredientsToGroceryProductsSignalE(output, error_type, error_str);
        emit mapIngredientsToGroceryProductsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIIngredientsApi::visualizeIngredients(const QString& content_type, const QString& language, const QString& accept) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/recipes/visualizeIngredients");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("language"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(language)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (content_type != nullptr) {
        input.headers.insert("Content-Type", content_type);
    }
    if (accept != nullptr) {
        input.headers.insert("Accept", accept);
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIIngredientsApi::visualizeIngredientsCallback);

    worker->execute(&input);
}

void
OAIIngredientsApi::visualizeIngredientsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QString output;  
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit visualizeIngredientsSignal(output);
        emit visualizeIngredientsSignalFull(worker, output);
    } else {
        emit visualizeIngredientsSignalE(output, error_type, error_str);
        emit visualizeIngredientsSignalEFull(worker, error_type, error_str);
    }
}


}
