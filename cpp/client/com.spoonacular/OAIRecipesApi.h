/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecipesApi_H
#define OAI_OAIRecipesApi_H

#include "OAIHttpRequest.h"

#include "com.spoonacular.client.model\OAIInline_object.h"
#include "com.spoonacular.client.model\OAIInline_response_200.h"
#include "com.spoonacular.client.model\OAIInline_response_200_1.h"
#include "com.spoonacular.client.model\OAIInline_response_200_10.h"
#include "com.spoonacular.client.model\OAIInline_response_200_11.h"
#include "com.spoonacular.client.model\OAIInline_response_200_12.h"
#include "com.spoonacular.client.model\OAIInline_response_200_13.h"
#include "com.spoonacular.client.model\OAIInline_response_200_14.h"
#include "com.spoonacular.client.model\OAIInline_response_200_15.h"
#include "com.spoonacular.client.model\OAIInline_response_200_16.h"
#include "com.spoonacular.client.model\OAIInline_response_200_17.h"
#include "com.spoonacular.client.model\OAIInline_response_200_18.h"
#include "com.spoonacular.client.model\OAIInline_response_200_19.h"
#include "com.spoonacular.client.model\OAIInline_response_200_2.h"
#include "com.spoonacular.client.model\OAIInline_response_200_20.h"
#include "com.spoonacular.client.model\OAIInline_response_200_21.h"
#include "com.spoonacular.client.model\OAIInline_response_200_23.h"
#include "com.spoonacular.client.model\OAIInline_response_200_3.h"
#include "com.spoonacular.client.model\OAIInline_response_200_4.h"
#include "com.spoonacular.client.model\OAIInline_response_200_49.h"
#include "com.spoonacular.client.model\OAIInline_response_200_5.h"
#include "com.spoonacular.client.model\OAIInline_response_200_6.h"
#include "com.spoonacular.client.model\OAIInline_response_200_7.h"
#include "com.spoonacular.client.model\OAIInline_response_200_8.h"
#include "com.spoonacular.client.model\OAIInline_response_200_9.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include "com.spoonacular.client.model\OAIObject.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIRecipesApi: public QObject {
    Q_OBJECT

public:
    OAIRecipesApi();
    OAIRecipesApi(QString host, QString basePath);
    ~OAIRecipesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void analyzeARecipeSearchQuery(const QString& q);
    void analyzeRecipeInstructions(const QString& content_type);
    void autocompleteRecipeSearch(const QString& query, const qint32& number);
    void classifyCuisine(const QString& content_type);
    void computeGlycemicLoad(const OAIInline_object& oai_inline_object, const QString& language);
    void convertAmounts(const QString& ingredient_name, const OAINumber& source_amount, const QString& source_unit, const QString& target_unit);
    void createRecipeCard(const QString& content_type);
    void equipmentByIDImage(const OAINumber& id);
    void extractRecipeFromWebsite(const QString& url, const bool& force_extraction, const bool& analyze, const bool& include_nutrition, const bool& include_taste);
    void getAnalyzedRecipeInstructions(const qint32& id, const bool& step_breakdown);
    void getRandomRecipes(const bool& limit_license, const QString& tags, const qint32& number);
    void getRecipeEquipmentByID(const qint32& id);
    void getRecipeInformation(const qint32& id, const bool& include_nutrition);
    void getRecipeInformationBulk(const QString& ids, const bool& include_nutrition);
    void getRecipeIngredientsByID(const qint32& id);
    void getRecipeNutritionWidgetByID(const qint32& id);
    void getRecipePriceBreakdownByID(const qint32& id);
    void getRecipeTasteByID(const qint32& id, const bool& normalize);
    void getSimilarRecipes(const qint32& id, const qint32& number, const bool& limit_license);
    void guessNutritionByDishName(const QString& title);
    void ingredientsByIDImage(const OAINumber& id, const QString& measure);
    void parseIngredients(const QString& content_type, const QString& language);
    void priceBreakdownByIDImage(const OAINumber& id);
    void quickAnswer(const QString& q);
    void recipeNutritionByIDImage(const OAINumber& id);
    void recipeNutritionLabelImage(const OAINumber& id, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients);
    void recipeNutritionLabelWidget(const OAINumber& id, const bool& default_css, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients);
    void recipeTasteByIDImage(const OAINumber& id, const bool& normalize, const QString& rgb);
    void searchRecipes(const QString& query, const QString& cuisine, const QString& exclude_cuisine, const QString& diet, const QString& intolerances, const QString& equipment, const QString& include_ingredients, const QString& exclude_ingredients, const QString& type, const bool& instructions_required, const bool& fill_ingredients, const bool& add_recipe_information, const bool& add_recipe_nutrition, const QString& author, const QString& tags, const OAINumber& recipe_box_id, const QString& title_match, const OAINumber& max_ready_time, const bool& ignore_pantry, const QString& sort, const QString& sort_direction, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const qint32& offset, const qint32& number, const bool& limit_license);
    void searchRecipesByIngredients(const QString& ingredients, const qint32& number, const bool& limit_license, const OAINumber& ranking, const bool& ignore_pantry);
    void searchRecipesByNutrients(const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_fat, const OAINumber& max_fat, const OAINumber& min_alcohol, const OAINumber& max_alcohol, const OAINumber& min_caffeine, const OAINumber& max_caffeine, const OAINumber& min_copper, const OAINumber& max_copper, const OAINumber& min_calcium, const OAINumber& max_calcium, const OAINumber& min_choline, const OAINumber& max_choline, const OAINumber& min_cholesterol, const OAINumber& max_cholesterol, const OAINumber& min_fluoride, const OAINumber& max_fluoride, const OAINumber& min_saturated_fat, const OAINumber& max_saturated_fat, const OAINumber& min_vitamin_a, const OAINumber& max_vitamin_a, const OAINumber& min_vitamin_c, const OAINumber& max_vitamin_c, const OAINumber& min_vitamin_d, const OAINumber& max_vitamin_d, const OAINumber& min_vitamin_e, const OAINumber& max_vitamin_e, const OAINumber& min_vitamin_k, const OAINumber& max_vitamin_k, const OAINumber& min_vitamin_b1, const OAINumber& max_vitamin_b1, const OAINumber& min_vitamin_b2, const OAINumber& max_vitamin_b2, const OAINumber& min_vitamin_b5, const OAINumber& max_vitamin_b5, const OAINumber& min_vitamin_b3, const OAINumber& max_vitamin_b3, const OAINumber& min_vitamin_b6, const OAINumber& max_vitamin_b6, const OAINumber& min_vitamin_b12, const OAINumber& max_vitamin_b12, const OAINumber& min_fiber, const OAINumber& max_fiber, const OAINumber& min_folate, const OAINumber& max_folate, const OAINumber& min_folic_acid, const OAINumber& max_folic_acid, const OAINumber& min_iodine, const OAINumber& max_iodine, const OAINumber& min_iron, const OAINumber& max_iron, const OAINumber& min_magnesium, const OAINumber& max_magnesium, const OAINumber& min_manganese, const OAINumber& max_manganese, const OAINumber& min_phosphorus, const OAINumber& max_phosphorus, const OAINumber& min_potassium, const OAINumber& max_potassium, const OAINumber& min_selenium, const OAINumber& max_selenium, const OAINumber& min_sodium, const OAINumber& max_sodium, const OAINumber& min_sugar, const OAINumber& max_sugar, const OAINumber& min_zinc, const OAINumber& max_zinc, const qint32& offset, const qint32& number, const bool& random, const bool& limit_license);
    void summarizeRecipe(const qint32& id);
    void visualizeEquipment(const QString& content_type, const QString& accept);
    void visualizePriceBreakdown(const QString& content_type, const QString& accept, const QString& language);
    void visualizeRecipeEquipmentByID(const qint32& id, const bool& default_css);
    void visualizeRecipeIngredientsByID(const qint32& id, const bool& default_css, const QString& measure);
    void visualizeRecipeNutrition(const QString& content_type, const QString& accept, const QString& language);
    void visualizeRecipeNutritionByID(const qint32& id, const bool& default_css, const QString& accept);
    void visualizeRecipePriceBreakdownByID(const qint32& id, const bool& default_css);
    void visualizeRecipeTaste(const QString& language, const QString& content_type, const QString& accept, const bool& normalize, const QString& rgb);
    void visualizeRecipeTasteByID(const qint32& id, const bool& normalize, const QString& rgb);
    
private:
    void analyzeARecipeSearchQueryCallback (OAIHttpRequestWorker * worker);
    void analyzeRecipeInstructionsCallback (OAIHttpRequestWorker * worker);
    void autocompleteRecipeSearchCallback (OAIHttpRequestWorker * worker);
    void classifyCuisineCallback (OAIHttpRequestWorker * worker);
    void computeGlycemicLoadCallback (OAIHttpRequestWorker * worker);
    void convertAmountsCallback (OAIHttpRequestWorker * worker);
    void createRecipeCardCallback (OAIHttpRequestWorker * worker);
    void equipmentByIDImageCallback (OAIHttpRequestWorker * worker);
    void extractRecipeFromWebsiteCallback (OAIHttpRequestWorker * worker);
    void getAnalyzedRecipeInstructionsCallback (OAIHttpRequestWorker * worker);
    void getRandomRecipesCallback (OAIHttpRequestWorker * worker);
    void getRecipeEquipmentByIDCallback (OAIHttpRequestWorker * worker);
    void getRecipeInformationCallback (OAIHttpRequestWorker * worker);
    void getRecipeInformationBulkCallback (OAIHttpRequestWorker * worker);
    void getRecipeIngredientsByIDCallback (OAIHttpRequestWorker * worker);
    void getRecipeNutritionWidgetByIDCallback (OAIHttpRequestWorker * worker);
    void getRecipePriceBreakdownByIDCallback (OAIHttpRequestWorker * worker);
    void getRecipeTasteByIDCallback (OAIHttpRequestWorker * worker);
    void getSimilarRecipesCallback (OAIHttpRequestWorker * worker);
    void guessNutritionByDishNameCallback (OAIHttpRequestWorker * worker);
    void ingredientsByIDImageCallback (OAIHttpRequestWorker * worker);
    void parseIngredientsCallback (OAIHttpRequestWorker * worker);
    void priceBreakdownByIDImageCallback (OAIHttpRequestWorker * worker);
    void quickAnswerCallback (OAIHttpRequestWorker * worker);
    void recipeNutritionByIDImageCallback (OAIHttpRequestWorker * worker);
    void recipeNutritionLabelImageCallback (OAIHttpRequestWorker * worker);
    void recipeNutritionLabelWidgetCallback (OAIHttpRequestWorker * worker);
    void recipeTasteByIDImageCallback (OAIHttpRequestWorker * worker);
    void searchRecipesCallback (OAIHttpRequestWorker * worker);
    void searchRecipesByIngredientsCallback (OAIHttpRequestWorker * worker);
    void searchRecipesByNutrientsCallback (OAIHttpRequestWorker * worker);
    void summarizeRecipeCallback (OAIHttpRequestWorker * worker);
    void visualizeEquipmentCallback (OAIHttpRequestWorker * worker);
    void visualizePriceBreakdownCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeEquipmentByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeIngredientsByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeNutritionCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeNutritionByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipePriceBreakdownByIDCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeTasteCallback (OAIHttpRequestWorker * worker);
    void visualizeRecipeTasteByIDCallback (OAIHttpRequestWorker * worker);
    
signals:
    void analyzeARecipeSearchQuerySignal(OAIInline_response_200_18 summary);
    void analyzeRecipeInstructionsSignal(OAIInline_response_200_16 summary);
    void autocompleteRecipeSearchSignal(QList<OAIInline_response_200_7> summary);
    void classifyCuisineSignal(OAIInline_response_200_17 summary);
    void computeGlycemicLoadSignal(OAIInline_response_200_23 summary);
    void convertAmountsSignal(OAIInline_response_200_19 summary);
    void createRecipeCardSignal(OAIInline_response_200_15 summary);
    void equipmentByIDImageSignal(OAIObject summary);
    void extractRecipeFromWebsiteSignal(OAIInline_response_200_3 summary);
    void getAnalyzedRecipeInstructionsSignal(OAIInline_response_200_13 summary);
    void getRandomRecipesSignal(OAIInline_response_200_6 summary);
    void getRecipeEquipmentByIDSignal(OAIInline_response_200_9 summary);
    void getRecipeInformationSignal(OAIInline_response_200_3 summary);
    void getRecipeInformationBulkSignal(QList<OAIInline_response_200_4> summary);
    void getRecipeIngredientsByIDSignal(OAIInline_response_200_11 summary);
    void getRecipeNutritionWidgetByIDSignal(OAIInline_response_200_12 summary);
    void getRecipePriceBreakdownByIDSignal(OAIInline_response_200_10 summary);
    void getRecipeTasteByIDSignal(OAIInline_response_200_8 summary);
    void getSimilarRecipesSignal(QList<OAIInline_response_200_5> summary);
    void guessNutritionByDishNameSignal(OAIInline_response_200_21 summary);
    void ingredientsByIDImageSignal(OAIObject summary);
    void parseIngredientsSignal(QList<OAIInline_response_200_20> summary);
    void priceBreakdownByIDImageSignal(OAIObject summary);
    void quickAnswerSignal(OAIInline_response_200_49 summary);
    void recipeNutritionByIDImageSignal(OAIObject summary);
    void recipeNutritionLabelImageSignal(OAIObject summary);
    void recipeNutritionLabelWidgetSignal(QString summary);
    void recipeTasteByIDImageSignal(OAIObject summary);
    void searchRecipesSignal(OAIInline_response_200 summary);
    void searchRecipesByIngredientsSignal(QList<OAIInline_response_200_1> summary);
    void searchRecipesByNutrientsSignal(QList<OAIInline_response_200_2> summary);
    void summarizeRecipeSignal(OAIInline_response_200_14 summary);
    void visualizeEquipmentSignal(QString summary);
    void visualizePriceBreakdownSignal(QString summary);
    void visualizeRecipeEquipmentByIDSignal(QString summary);
    void visualizeRecipeIngredientsByIDSignal(QString summary);
    void visualizeRecipeNutritionSignal(QString summary);
    void visualizeRecipeNutritionByIDSignal(QString summary);
    void visualizeRecipePriceBreakdownByIDSignal(QString summary);
    void visualizeRecipeTasteSignal(QString summary);
    void visualizeRecipeTasteByIDSignal(QString summary);
    
    void analyzeARecipeSearchQuerySignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_18 summary);
    void analyzeRecipeInstructionsSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_16 summary);
    void autocompleteRecipeSearchSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_7> summary);
    void classifyCuisineSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_17 summary);
    void computeGlycemicLoadSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_23 summary);
    void convertAmountsSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_19 summary);
    void createRecipeCardSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_15 summary);
    void equipmentByIDImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void extractRecipeFromWebsiteSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_3 summary);
    void getAnalyzedRecipeInstructionsSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_13 summary);
    void getRandomRecipesSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_6 summary);
    void getRecipeEquipmentByIDSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_9 summary);
    void getRecipeInformationSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_3 summary);
    void getRecipeInformationBulkSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_4> summary);
    void getRecipeIngredientsByIDSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_11 summary);
    void getRecipeNutritionWidgetByIDSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_12 summary);
    void getRecipePriceBreakdownByIDSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_10 summary);
    void getRecipeTasteByIDSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_8 summary);
    void getSimilarRecipesSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_5> summary);
    void guessNutritionByDishNameSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_21 summary);
    void ingredientsByIDImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void parseIngredientsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_20> summary);
    void priceBreakdownByIDImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void quickAnswerSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_49 summary);
    void recipeNutritionByIDImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void recipeNutritionLabelImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void recipeNutritionLabelWidgetSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void recipeTasteByIDImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void searchRecipesSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200 summary);
    void searchRecipesByIngredientsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_1> summary);
    void searchRecipesByNutrientsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_2> summary);
    void summarizeRecipeSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_14 summary);
    void visualizeEquipmentSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizePriceBreakdownSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeEquipmentByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeIngredientsByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeNutritionSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeNutritionByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipePriceBreakdownByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeTasteSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void visualizeRecipeTasteByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    
    void analyzeARecipeSearchQuerySignalE(OAIInline_response_200_18 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void analyzeRecipeInstructionsSignalE(OAIInline_response_200_16 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteRecipeSearchSignalE(QList<OAIInline_response_200_7> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyCuisineSignalE(OAIInline_response_200_17 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void computeGlycemicLoadSignalE(OAIInline_response_200_23 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void convertAmountsSignalE(OAIInline_response_200_19 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createRecipeCardSignalE(OAIInline_response_200_15 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void equipmentByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void extractRecipeFromWebsiteSignalE(OAIInline_response_200_3 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAnalyzedRecipeInstructionsSignalE(OAIInline_response_200_13 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomRecipesSignalE(OAIInline_response_200_6 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeEquipmentByIDSignalE(OAIInline_response_200_9 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationSignalE(OAIInline_response_200_3 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationBulkSignalE(QList<OAIInline_response_200_4> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeIngredientsByIDSignalE(OAIInline_response_200_11 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeNutritionWidgetByIDSignalE(OAIInline_response_200_12 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipePriceBreakdownByIDSignalE(OAIInline_response_200_10 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeTasteByIDSignalE(OAIInline_response_200_8 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSimilarRecipesSignalE(QList<OAIInline_response_200_5> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void guessNutritionByDishNameSignalE(OAIInline_response_200_21 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void ingredientsByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void parseIngredientsSignalE(QList<OAIInline_response_200_20> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void priceBreakdownByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void quickAnswerSignalE(OAIInline_response_200_49 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeNutritionByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeNutritionLabelImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeNutritionLabelWidgetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeTasteByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesSignalE(OAIInline_response_200 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByIngredientsSignalE(QList<OAIInline_response_200_1> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByNutrientsSignalE(QList<OAIInline_response_200_2> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void summarizeRecipeSignalE(OAIInline_response_200_14 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeEquipmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizePriceBreakdownSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeEquipmentByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeIngredientsByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipePriceBreakdownByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeTasteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeTasteByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void analyzeARecipeSearchQuerySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void analyzeRecipeInstructionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void autocompleteRecipeSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void classifyCuisineSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void computeGlycemicLoadSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void convertAmountsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createRecipeCardSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void equipmentByIDImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void extractRecipeFromWebsiteSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAnalyzedRecipeInstructionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRandomRecipesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeEquipmentByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeInformationBulkSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeIngredientsByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeNutritionWidgetByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipePriceBreakdownByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRecipeTasteByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSimilarRecipesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void guessNutritionByDishNameSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void ingredientsByIDImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void parseIngredientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void priceBreakdownByIDImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void quickAnswerSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeNutritionByIDImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeNutritionLabelImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeNutritionLabelWidgetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void recipeTasteByIDImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByIngredientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchRecipesByNutrientsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void summarizeRecipeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeEquipmentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizePriceBreakdownSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeEquipmentByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeIngredientsByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeNutritionByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipePriceBreakdownByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeTasteSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeRecipeTasteByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
