/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMenuItemsApi_H
#define OAI_OAIMenuItemsApi_H

#include "OAIHttpRequest.h"

#include "com.spoonacular.client.model\OAIInline_response_200_32.h"
#include "com.spoonacular.client.model\OAIInline_response_200_35.h"
#include "com.spoonacular.client.model\OAIInline_response_200_36.h"
#include "com.spoonacular.client.model\OAINumber.h"
#include "com.spoonacular.client.model\OAIObject.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIMenuItemsApi: public QObject {
    Q_OBJECT

public:
    OAIMenuItemsApi();
    OAIMenuItemsApi(QString host, QString basePath);
    ~OAIMenuItemsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void autocompleteMenuItemSearch(const QString& query, const OAINumber& number);
    void getMenuItemInformation(const qint32& id);
    void menuItemNutritionByIDImage(const OAINumber& id);
    void menuItemNutritionLabelImage(const OAINumber& id, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients);
    void menuItemNutritionLabelWidget(const OAINumber& id, const bool& default_css, const bool& show_optional_nutrients, const bool& show_zero_values, const bool& show_ingredients);
    void searchMenuItems(const QString& query, const OAINumber& min_calories, const OAINumber& max_calories, const OAINumber& min_carbs, const OAINumber& max_carbs, const OAINumber& min_protein, const OAINumber& max_protein, const OAINumber& min_fat, const OAINumber& max_fat, const bool& add_menu_item_information, const qint32& offset, const qint32& number);
    void visualizeMenuItemNutritionByID(const qint32& id, const bool& default_css, const QString& accept);
    
private:
    void autocompleteMenuItemSearchCallback (OAIHttpRequestWorker * worker);
    void getMenuItemInformationCallback (OAIHttpRequestWorker * worker);
    void menuItemNutritionByIDImageCallback (OAIHttpRequestWorker * worker);
    void menuItemNutritionLabelImageCallback (OAIHttpRequestWorker * worker);
    void menuItemNutritionLabelWidgetCallback (OAIHttpRequestWorker * worker);
    void searchMenuItemsCallback (OAIHttpRequestWorker * worker);
    void visualizeMenuItemNutritionByIDCallback (OAIHttpRequestWorker * worker);
    
signals:
    void autocompleteMenuItemSearchSignal(OAIInline_response_200_32 summary);
    void getMenuItemInformationSignal(OAIInline_response_200_36 summary);
    void menuItemNutritionByIDImageSignal(OAIObject summary);
    void menuItemNutritionLabelImageSignal(OAIObject summary);
    void menuItemNutritionLabelWidgetSignal(QString summary);
    void searchMenuItemsSignal(OAIInline_response_200_35 summary);
    void visualizeMenuItemNutritionByIDSignal(QString summary);
    
    void autocompleteMenuItemSearchSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_32 summary);
    void getMenuItemInformationSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_36 summary);
    void menuItemNutritionByIDImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void menuItemNutritionLabelImageSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void menuItemNutritionLabelWidgetSignalFull(OAIHttpRequestWorker* worker, QString summary);
    void searchMenuItemsSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_35 summary);
    void visualizeMenuItemNutritionByIDSignalFull(OAIHttpRequestWorker* worker, QString summary);
    
    void autocompleteMenuItemSearchSignalE(OAIInline_response_200_32 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMenuItemInformationSignalE(OAIInline_response_200_36 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void menuItemNutritionByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void menuItemNutritionLabelImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void menuItemNutritionLabelWidgetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchMenuItemsSignalE(OAIInline_response_200_35 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeMenuItemNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void autocompleteMenuItemSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMenuItemInformationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void menuItemNutritionByIDImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void menuItemNutritionLabelImageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void menuItemNutritionLabelWidgetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchMenuItemsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void visualizeMenuItemNutritionByIDSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
