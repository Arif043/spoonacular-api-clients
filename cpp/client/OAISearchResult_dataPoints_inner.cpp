/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResult_dataPoints_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResult_dataPoints_inner::OAISearchResult_dataPoints_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResult_dataPoints_inner::OAISearchResult_dataPoints_inner() {
    this->initializeModel();
}

OAISearchResult_dataPoints_inner::~OAISearchResult_dataPoints_inner() {}

void OAISearchResult_dataPoints_inner::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;
}

void OAISearchResult_dataPoints_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResult_dataPoints_inner::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;
}

QString OAISearchResult_dataPoints_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResult_dataPoints_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_show_isSet) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    return obj;
}

QString OAISearchResult_dataPoints_inner::getKey() const {
    return m_key;
}
void OAISearchResult_dataPoints_inner::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISearchResult_dataPoints_inner::is_key_Set() const{
    return m_key_isSet;
}

bool OAISearchResult_dataPoints_inner::is_key_Valid() const{
    return m_key_isValid;
}

QJsonValue OAISearchResult_dataPoints_inner::getValue() const {
    return m_value;
}
void OAISearchResult_dataPoints_inner::setValue(const QJsonValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISearchResult_dataPoints_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAISearchResult_dataPoints_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISearchResult_dataPoints_inner::isShow() const {
    return m_show;
}
void OAISearchResult_dataPoints_inner::setShow(const bool &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAISearchResult_dataPoints_inner::is_show_Set() const{
    return m_show_isSet;
}

bool OAISearchResult_dataPoints_inner::is_show_Valid() const{
    return m_show_isValid;
}

bool OAISearchResult_dataPoints_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResult_dataPoints_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
