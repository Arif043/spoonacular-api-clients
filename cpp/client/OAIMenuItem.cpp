/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMenuItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMenuItem::OAIMenuItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMenuItem::OAIMenuItem() {
    this->initializeModel();
}

OAIMenuItem::~OAIMenuItem() {}

void OAIMenuItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_restaurant_chain_isSet = false;
    m_restaurant_chain_isValid = false;

    m_nutrition_isSet = false;
    m_nutrition_isValid = false;

    m_badges_isSet = false;
    m_badges_isValid = false;

    m_breadcrumbs_isSet = false;
    m_breadcrumbs_isValid = false;

    m_generated_text_isSet = false;
    m_generated_text_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_spoonacular_score_isSet = false;
    m_spoonacular_score_isValid = false;
}

void OAIMenuItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMenuItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_restaurant_chain_isValid = ::OpenAPI::fromJsonValue(m_restaurant_chain, json[QString("restaurantChain")]);
    m_restaurant_chain_isSet = !json[QString("restaurantChain")].isNull() && m_restaurant_chain_isValid;

    m_nutrition_isValid = ::OpenAPI::fromJsonValue(m_nutrition, json[QString("nutrition")]);
    m_nutrition_isSet = !json[QString("nutrition")].isNull() && m_nutrition_isValid;

    m_badges_isValid = ::OpenAPI::fromJsonValue(m_badges, json[QString("badges")]);
    m_badges_isSet = !json[QString("badges")].isNull() && m_badges_isValid;

    m_breadcrumbs_isValid = ::OpenAPI::fromJsonValue(m_breadcrumbs, json[QString("breadcrumbs")]);
    m_breadcrumbs_isSet = !json[QString("breadcrumbs")].isNull() && m_breadcrumbs_isValid;

    m_generated_text_isValid = ::OpenAPI::fromJsonValue(m_generated_text, json[QString("generatedText")]);
    m_generated_text_isSet = !json[QString("generatedText")].isNull() && m_generated_text_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(m_servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_spoonacular_score_isValid = ::OpenAPI::fromJsonValue(m_spoonacular_score, json[QString("spoonacularScore")]);
    m_spoonacular_score_isSet = !json[QString("spoonacularScore")].isNull() && m_spoonacular_score_isValid;
}

QString OAIMenuItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMenuItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_restaurant_chain_isSet) {
        obj.insert(QString("restaurantChain"), ::OpenAPI::toJsonValue(m_restaurant_chain));
    }
    if (m_nutrition.isSet()) {
        obj.insert(QString("nutrition"), ::OpenAPI::toJsonValue(m_nutrition));
    }
    if (m_badges.size() > 0) {
        obj.insert(QString("badges"), ::OpenAPI::toJsonValue(m_badges));
    }
    if (m_breadcrumbs.size() > 0) {
        obj.insert(QString("breadcrumbs"), ::OpenAPI::toJsonValue(m_breadcrumbs));
    }
    if (m_generated_text_isSet) {
        obj.insert(QString("generatedText"), ::OpenAPI::toJsonValue(m_generated_text));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_likes_isSet) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_servings.isSet()) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(m_servings));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_spoonacular_score_isSet) {
        obj.insert(QString("spoonacularScore"), ::OpenAPI::toJsonValue(m_spoonacular_score));
    }
    return obj;
}

qint32 OAIMenuItem::getId() const {
    return m_id;
}
void OAIMenuItem::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMenuItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMenuItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMenuItem::getTitle() const {
    return m_title;
}
void OAIMenuItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMenuItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMenuItem::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMenuItem::getRestaurantChain() const {
    return m_restaurant_chain;
}
void OAIMenuItem::setRestaurantChain(const QString &restaurant_chain) {
    m_restaurant_chain = restaurant_chain;
    m_restaurant_chain_isSet = true;
}

bool OAIMenuItem::is_restaurant_chain_Set() const{
    return m_restaurant_chain_isSet;
}

bool OAIMenuItem::is_restaurant_chain_Valid() const{
    return m_restaurant_chain_isValid;
}

OAISearchGroceryProductsByUPC_200_response_nutrition OAIMenuItem::getNutrition() const {
    return m_nutrition;
}
void OAIMenuItem::setNutrition(const OAISearchGroceryProductsByUPC_200_response_nutrition &nutrition) {
    m_nutrition = nutrition;
    m_nutrition_isSet = true;
}

bool OAIMenuItem::is_nutrition_Set() const{
    return m_nutrition_isSet;
}

bool OAIMenuItem::is_nutrition_Valid() const{
    return m_nutrition_isValid;
}

QList<QString> OAIMenuItem::getBadges() const {
    return m_badges;
}
void OAIMenuItem::setBadges(const QList<QString> &badges) {
    m_badges = badges;
    m_badges_isSet = true;
}

bool OAIMenuItem::is_badges_Set() const{
    return m_badges_isSet;
}

bool OAIMenuItem::is_badges_Valid() const{
    return m_badges_isValid;
}

QList<QString> OAIMenuItem::getBreadcrumbs() const {
    return m_breadcrumbs;
}
void OAIMenuItem::setBreadcrumbs(const QList<QString> &breadcrumbs) {
    m_breadcrumbs = breadcrumbs;
    m_breadcrumbs_isSet = true;
}

bool OAIMenuItem::is_breadcrumbs_Set() const{
    return m_breadcrumbs_isSet;
}

bool OAIMenuItem::is_breadcrumbs_Valid() const{
    return m_breadcrumbs_isValid;
}

QString OAIMenuItem::getGeneratedText() const {
    return m_generated_text;
}
void OAIMenuItem::setGeneratedText(const QString &generated_text) {
    m_generated_text = generated_text;
    m_generated_text_isSet = true;
}

bool OAIMenuItem::is_generated_text_Set() const{
    return m_generated_text_isSet;
}

bool OAIMenuItem::is_generated_text_Valid() const{
    return m_generated_text_isValid;
}

QString OAIMenuItem::getImageType() const {
    return m_image_type;
}
void OAIMenuItem::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIMenuItem::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIMenuItem::is_image_type_Valid() const{
    return m_image_type_isValid;
}

qint32 OAIMenuItem::getLikes() const {
    return m_likes;
}
void OAIMenuItem::setLikes(const qint32 &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIMenuItem::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIMenuItem::is_likes_Valid() const{
    return m_likes_isValid;
}

OAIMenuItem_servings OAIMenuItem::getServings() const {
    return m_servings;
}
void OAIMenuItem::setServings(const OAIMenuItem_servings &servings) {
    m_servings = servings;
    m_servings_isSet = true;
}

bool OAIMenuItem::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAIMenuItem::is_servings_Valid() const{
    return m_servings_isValid;
}

double OAIMenuItem::getPrice() const {
    return m_price;
}
void OAIMenuItem::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIMenuItem::is_price_Set() const{
    return m_price_isSet;
}

bool OAIMenuItem::is_price_Valid() const{
    return m_price_isValid;
}

double OAIMenuItem::getSpoonacularScore() const {
    return m_spoonacular_score;
}
void OAIMenuItem::setSpoonacularScore(const double &spoonacular_score) {
    m_spoonacular_score = spoonacular_score;
    m_spoonacular_score_isSet = true;
}

bool OAIMenuItem::is_spoonacular_score_Set() const{
    return m_spoonacular_score_isSet;
}

bool OAIMenuItem::is_spoonacular_score_Valid() const{
    return m_spoonacular_score_isValid;
}

bool OAIMenuItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restaurant_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nutrition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_badges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_breadcrumbs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoonacular_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMenuItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_restaurant_chain_isValid && m_price_isValid && m_spoonacular_score_isValid && true;
}

} // namespace OpenAPI
