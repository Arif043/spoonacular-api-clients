/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn analyze_a_recipe_search_query(&self, q: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn analyze_recipe_instructions(&self, instructions: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn autocomplete_ingredient_search(&self, query: &str, number: f32, meta_information: bool, intolerances: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn autocomplete_menu_item_search(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn autocomplete_product_search(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn autocomplete_recipe_search(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn classify_cuisine(&self, title: &str, ingredient_list: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn classify_grocery_product(&self, inline_object8: ::models::InlineObject8, locale: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn classify_grocery_product_bulk(&self, body: Value, locale: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn convert_amounts(&self, ingredient_name: &str, source_amount: f32, source_unit: &str, target_unit: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn create_recipe_card(&self, title: &str, image: &std::path::Path, ingredients: &str, instructions: &str, ready_in_minutes: f32, servings: f32, mask: &str, background_image: &str, author: &str, background_color: &str, font_color: &str, source: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn detect_food_in_text(&self, text: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn extract_recipe_from_website(&self, url: &str, force_extraction: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn generate_meal_plan(&self, time_frame: &str, target_calories: f32, diet: &str, exclude: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_a_random_food_joke(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_analyzed_recipe_instructions(&self, id: f32, step_breakdown: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_comparable_products(&self, upc: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_conversation_suggests(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_dish_pairing_for_wine(&self, wine: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_ingredient_information(&self, id: f32, amount: f32, unit: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_ingredient_substitutes(&self, ingredient_name: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_ingredient_substitutes_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_menu_item_information(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_product_information(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_random_food_trivia(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_random_recipes(&self, limit_license: bool, tags: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_recipe_equipment_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_recipe_information(&self, id: f32, include_nutrition: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_recipe_information_bulk(&self, ids: &str, include_nutrition: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_recipe_ingredients_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_recipe_nutrition_widget_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_recipe_price_breakdown_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_similar_recipes(&self, id: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_wine_description(&self, wine: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_wine_pairing(&self, food: &str, max_price: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_wine_recommendation(&self, wine: &str, max_price: f32, min_rating: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn guess_nutrition_by_dish_name(&self, title: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn map_ingredients_to_grocery_products(&self, body: Value) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn parse_ingredients(&self, ingredient_list: &str, servings: f32, include_nutrition: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn quick_answer(&self, q: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_food_videos(&self, query: &str, _type: &str, cuisine: &str, diet: &str, include_ingredients: &str, exclude_ingredients: &str, min_length: f32, max_length: f32, offset: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_grocery_products(&self, query: &str, min_calories: f32, max_calories: f32, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_fat: f32, max_fat: f32, offset: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_grocery_products_by_upc(&self, upc: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_menu_items(&self, query: &str, min_calories: f32, max_calories: f32, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_fat: f32, max_fat: f32, offset: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_recipes(&self, query: &str, cuisine: &str, diet: &str, exclude_ingredients: &str, intolerances: &str, offset: f32, number: f32, limit_license: bool, instructions_required: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_recipes_by_ingredients(&self, ingredients: &str, number: f32, limit_license: bool, ranking: f32, ignore_pantry: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_recipes_by_nutrients(&self, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_calories: f32, max_calories: f32, min_fat: f32, max_fat: f32, min_alcohol: f32, max_alcohol: f32, min_caffeine: f32, max_caffeine: f32, min_copper: f32, max_copper: f32, min_calcium: f32, max_calcium: f32, min_choline: f32, max_choline: f32, min_cholesterol: f32, max_cholesterol: f32, min_fluoride: f32, max_fluoride: f32, min_saturated_fat: f32, max_saturated_fat: f32, min_vitamin_a: f32, max_vitamin_a: f32, min_vitamin_c: f32, max_vitamin_c: f32, min_vitamin_d: f32, max_vitamin_d: f32, min_vitamin_e: f32, max_vitamin_e: f32, min_vitamin_k: f32, max_vitamin_k: f32, min_vitamin_b1: f32, max_vitamin_b1: f32, min_vitamin_b2: f32, max_vitamin_b2: f32, min_vitamin_b5: f32, max_vitamin_b5: f32, min_vitamin_b3: f32, max_vitamin_b3: f32, min_vitamin_b6: f32, max_vitamin_b6: f32, min_vitamin_b12: f32, max_vitamin_b12: f32, min_fiber: f32, max_fiber: f32, min_folate: f32, max_folate: f32, min_folic_acid: f32, max_folic_acid: f32, min_iodine: f32, max_iodine: f32, min_iron: f32, max_iron: f32, min_magnesium: f32, max_magnesium: f32, min_manganese: f32, max_manganese: f32, min_phosphorus: f32, max_phosphorus: f32, min_potassium: f32, max_potassium: f32, min_selenium: f32, max_selenium: f32, min_sodium: f32, max_sodium: f32, min_sugar: f32, max_sugar: f32, min_zinc: f32, max_zinc: f32, offset: f32, number: f32, random: bool, limit_license: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_recipes_complex(&self, query: &str, cuisine: &str, exclude_cuisine: &str, diet: &str, intolerances: &str, equipment: &str, include_ingredients: &str, exclude_ingredients: &str, _type: &str, instructions_required: bool, fill_ingredients: bool, add_recipe_information: bool, author: &str, tags: &str, title_match: &str, max_ready_time: f32, ignore_pantry: bool, sort: &str, sort_direction: &str, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_calories: f32, max_calories: f32, min_fat: f32, max_fat: f32, min_alcohol: f32, max_alcohol: f32, min_caffeine: f32, max_caffeine: f32, min_copper: f32, max_copper: f32, min_calcium: f32, max_calcium: f32, min_choline: f32, max_choline: f32, min_cholesterol: f32, max_cholesterol: f32, min_fluoride: f32, max_fluoride: f32, min_saturated_fat: f32, max_saturated_fat: f32, min_vitamin_a: f32, max_vitamin_a: f32, min_vitamin_c: f32, max_vitamin_c: f32, min_vitamin_d: f32, max_vitamin_d: f32, min_vitamin_e: f32, max_vitamin_e: f32, min_vitamin_k: f32, max_vitamin_k: f32, min_vitamin_b1: f32, max_vitamin_b1: f32, min_vitamin_b2: f32, max_vitamin_b2: f32, min_vitamin_b5: f32, max_vitamin_b5: f32, min_vitamin_b3: f32, max_vitamin_b3: f32, min_vitamin_b6: f32, max_vitamin_b6: f32, min_vitamin_b12: f32, max_vitamin_b12: f32, min_fiber: f32, max_fiber: f32, min_folate: f32, max_folate: f32, min_folic_acid: f32, max_folic_acid: f32, min_iodine: f32, max_iodine: f32, min_iron: f32, max_iron: f32, min_magnesium: f32, max_magnesium: f32, min_manganese: f32, max_manganese: f32, min_phosphorus: f32, max_phosphorus: f32, min_potassium: f32, max_potassium: f32, min_selenium: f32, max_selenium: f32, min_sodium: f32, max_sodium: f32, min_sugar: f32, max_sugar: f32, min_zinc: f32, max_zinc: f32, offset: f32, number: f32, limit_license: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn search_site_content(&self, query: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn summarize_recipe(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn talk_to_chatbot(&self, text: &str, context_id: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn visualize_equipment(&self, ingredient_list: &str, servings: f32, view: &str, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_ingredients(&self, ingredient_list: &str, servings: f32, measure: &str, view: &str, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_menu_item_nutrition_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_price_breakdown(&self, ingredient_list: &str, servings: f32, mode: f32, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_product_nutrition_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_recipe_equipment_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_recipe_ingredients_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_recipe_nutrition(&self, ingredient_list: &str, servings: f32, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_recipe_nutrition_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn visualize_recipe_price_breakdown_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn analyze_a_recipe_search_query(&self, q: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/queries/analyze".to_string())
            .with_query_param("q".to_string(), q.to_string())
            .execute(self.configuration.borrow())
    }

    fn analyze_recipe_instructions(&self, instructions: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/analyzeInstructions".to_string())
            .with_form_param("instructions".to_string(), instructions.to_string())
            .execute(self.configuration.borrow())
    }

    fn autocomplete_ingredient_search(&self, query: &str, number: f32, meta_information: bool, intolerances: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/ingredients/autocomplete".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .with_query_param("metaInformation".to_string(), meta_information.to_string())
            .with_query_param("intolerances".to_string(), intolerances.to_string())
            .execute(self.configuration.borrow())
    }

    fn autocomplete_menu_item_search(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/menuItems/suggest".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn autocomplete_product_search(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/products/suggest".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn autocomplete_recipe_search(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/autocomplete".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn classify_cuisine(&self, title: &str, ingredient_list: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/cuisine".to_string())
            .with_form_param("title".to_string(), title.to_string())
            .with_form_param("ingredientList".to_string(), ingredient_list.to_string())
            .execute(self.configuration.borrow())
    }

    fn classify_grocery_product(&self, inline_object8: ::models::InlineObject8, locale: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/food/products/classify".to_string())
            .with_query_param("locale".to_string(), locale.to_string())
            .with_body_param(inline_object8)
            .execute(self.configuration.borrow())
    }

    fn classify_grocery_product_bulk(&self, body: Value, locale: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/food/products/classifyBatch".to_string())
            .with_query_param("locale".to_string(), locale.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn convert_amounts(&self, ingredient_name: &str, source_amount: f32, source_unit: &str, target_unit: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/convert".to_string())
            .with_query_param("ingredientName".to_string(), ingredient_name.to_string())
            .with_query_param("sourceAmount".to_string(), source_amount.to_string())
            .with_query_param("sourceUnit".to_string(), source_unit.to_string())
            .with_query_param("targetUnit".to_string(), target_unit.to_string())
            .execute(self.configuration.borrow())
    }

    fn create_recipe_card(&self, title: &str, image: &std::path::Path, ingredients: &str, instructions: &str, ready_in_minutes: f32, servings: f32, mask: &str, background_image: &str, author: &str, background_color: &str, font_color: &str, source: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/visualizeRecipe".to_string())
            .with_form_param("title".to_string(), title.to_string())
            .with_form_param("image".to_string(), unimplemented!())
            .with_form_param("ingredients".to_string(), ingredients.to_string())
            .with_form_param("instructions".to_string(), instructions.to_string())
            .with_form_param("readyInMinutes".to_string(), ready_in_minutes.to_string())
            .with_form_param("servings".to_string(), servings.to_string())
            .with_form_param("mask".to_string(), mask.to_string())
            .with_form_param("backgroundImage".to_string(), background_image.to_string())
            .with_form_param("author".to_string(), author.to_string())
            .with_form_param("backgroundColor".to_string(), background_color.to_string())
            .with_form_param("fontColor".to_string(), font_color.to_string())
            .with_form_param("source".to_string(), source.to_string())
            .execute(self.configuration.borrow())
    }

    fn detect_food_in_text(&self, text: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/food/detect".to_string())
            .with_form_param("text".to_string(), text.to_string())
            .execute(self.configuration.borrow())
    }

    fn extract_recipe_from_website(&self, url: &str, force_extraction: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/extract".to_string())
            .with_query_param("url".to_string(), url.to_string())
            .with_query_param("forceExtraction".to_string(), force_extraction.to_string())
            .execute(self.configuration.borrow())
    }

    fn generate_meal_plan(&self, time_frame: &str, target_calories: f32, diet: &str, exclude: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/mealplanner/generate".to_string())
            .with_query_param("timeFrame".to_string(), time_frame.to_string())
            .with_query_param("targetCalories".to_string(), target_calories.to_string())
            .with_query_param("diet".to_string(), diet.to_string())
            .with_query_param("exclude".to_string(), exclude.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_a_random_food_joke(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/jokes/random".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_analyzed_recipe_instructions(&self, id: f32, step_breakdown: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/analyzedInstructions".to_string())
            .with_query_param("stepBreakdown".to_string(), step_breakdown.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_comparable_products(&self, upc: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/products/upc/{upc}/comparable".to_string())
            .with_path_param("upc".to_string(), upc.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_conversation_suggests(&self, query: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/converse/suggest".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_dish_pairing_for_wine(&self, wine: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/wine/dishes".to_string())
            .with_query_param("wine".to_string(), wine.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_ingredient_information(&self, id: f32, amount: f32, unit: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/ingredients/{id}/information".to_string())
            .with_query_param("amount".to_string(), amount.to_string())
            .with_query_param("unit".to_string(), unit.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_ingredient_substitutes(&self, ingredient_name: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/ingredients/substitutes".to_string())
            .with_query_param("ingredientName".to_string(), ingredient_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_ingredient_substitutes_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/ingredients/{id}/substitutes".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_menu_item_information(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/menuItems/{id}".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_product_information(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/products/{id}".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_random_food_trivia(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/trivia/random".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_random_recipes(&self, limit_license: bool, tags: &str, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/random".to_string())
            .with_query_param("limitLicense".to_string(), limit_license.to_string())
            .with_query_param("tags".to_string(), tags.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_recipe_equipment_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/equipmentWidget.json".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_recipe_information(&self, id: f32, include_nutrition: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/information".to_string())
            .with_query_param("includeNutrition".to_string(), include_nutrition.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_recipe_information_bulk(&self, ids: &str, include_nutrition: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/informationBulk".to_string())
            .with_query_param("ids".to_string(), ids.to_string())
            .with_query_param("includeNutrition".to_string(), include_nutrition.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_recipe_ingredients_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/ingredientWidget.json".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_recipe_nutrition_widget_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/nutritionWidget.json".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_recipe_price_breakdown_by_id(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/priceBreakdownWidget.json".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_similar_recipes(&self, id: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/similar".to_string())
            .with_query_param("number".to_string(), number.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_wine_description(&self, wine: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/wine/description".to_string())
            .with_query_param("wine".to_string(), wine.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_wine_pairing(&self, food: &str, max_price: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/wine/pairing".to_string())
            .with_query_param("food".to_string(), food.to_string())
            .with_query_param("maxPrice".to_string(), max_price.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_wine_recommendation(&self, wine: &str, max_price: f32, min_rating: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/wine/recommendation".to_string())
            .with_query_param("wine".to_string(), wine.to_string())
            .with_query_param("maxPrice".to_string(), max_price.to_string())
            .with_query_param("minRating".to_string(), min_rating.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn guess_nutrition_by_dish_name(&self, title: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/guessNutrition".to_string())
            .with_query_param("title".to_string(), title.to_string())
            .execute(self.configuration.borrow())
    }

    fn map_ingredients_to_grocery_products(&self, body: Value) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/food/ingredients/map".to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn parse_ingredients(&self, ingredient_list: &str, servings: f32, include_nutrition: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/parseIngredients".to_string())
            .with_form_param("ingredientList".to_string(), ingredient_list.to_string())
            .with_form_param("servings".to_string(), servings.to_string())
            .with_form_param("includeNutrition".to_string(), include_nutrition.to_string())
            .execute(self.configuration.borrow())
    }

    fn quick_answer(&self, q: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/quickAnswer".to_string())
            .with_query_param("q".to_string(), q.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_food_videos(&self, query: &str, _type: &str, cuisine: &str, diet: &str, include_ingredients: &str, exclude_ingredients: &str, min_length: f32, max_length: f32, offset: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/videos/search".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("type".to_string(), _type.to_string())
            .with_query_param("cuisine".to_string(), cuisine.to_string())
            .with_query_param("diet".to_string(), diet.to_string())
            .with_query_param("includeIngredients".to_string(), include_ingredients.to_string())
            .with_query_param("excludeIngredients".to_string(), exclude_ingredients.to_string())
            .with_query_param("minLength".to_string(), min_length.to_string())
            .with_query_param("maxLength".to_string(), max_length.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_grocery_products(&self, query: &str, min_calories: f32, max_calories: f32, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_fat: f32, max_fat: f32, offset: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/products/search".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("minCalories".to_string(), min_calories.to_string())
            .with_query_param("maxCalories".to_string(), max_calories.to_string())
            .with_query_param("minCarbs".to_string(), min_carbs.to_string())
            .with_query_param("maxCarbs".to_string(), max_carbs.to_string())
            .with_query_param("minProtein".to_string(), min_protein.to_string())
            .with_query_param("maxProtein".to_string(), max_protein.to_string())
            .with_query_param("minFat".to_string(), min_fat.to_string())
            .with_query_param("maxFat".to_string(), max_fat.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_grocery_products_by_upc(&self, upc: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/products/upc/{upc}".to_string())
            .with_path_param("upc".to_string(), upc.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_menu_items(&self, query: &str, min_calories: f32, max_calories: f32, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_fat: f32, max_fat: f32, offset: f32, number: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/menuItems/search".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("minCalories".to_string(), min_calories.to_string())
            .with_query_param("maxCalories".to_string(), max_calories.to_string())
            .with_query_param("minCarbs".to_string(), min_carbs.to_string())
            .with_query_param("maxCarbs".to_string(), max_carbs.to_string())
            .with_query_param("minProtein".to_string(), min_protein.to_string())
            .with_query_param("maxProtein".to_string(), max_protein.to_string())
            .with_query_param("minFat".to_string(), min_fat.to_string())
            .with_query_param("maxFat".to_string(), max_fat.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_recipes(&self, query: &str, cuisine: &str, diet: &str, exclude_ingredients: &str, intolerances: &str, offset: f32, number: f32, limit_license: bool, instructions_required: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/search".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("cuisine".to_string(), cuisine.to_string())
            .with_query_param("diet".to_string(), diet.to_string())
            .with_query_param("excludeIngredients".to_string(), exclude_ingredients.to_string())
            .with_query_param("intolerances".to_string(), intolerances.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .with_query_param("limitLicense".to_string(), limit_license.to_string())
            .with_query_param("instructionsRequired".to_string(), instructions_required.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_recipes_by_ingredients(&self, ingredients: &str, number: f32, limit_license: bool, ranking: f32, ignore_pantry: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/findByIngredients".to_string())
            .with_query_param("ingredients".to_string(), ingredients.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .with_query_param("limitLicense".to_string(), limit_license.to_string())
            .with_query_param("ranking".to_string(), ranking.to_string())
            .with_query_param("ignorePantry".to_string(), ignore_pantry.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_recipes_by_nutrients(&self, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_calories: f32, max_calories: f32, min_fat: f32, max_fat: f32, min_alcohol: f32, max_alcohol: f32, min_caffeine: f32, max_caffeine: f32, min_copper: f32, max_copper: f32, min_calcium: f32, max_calcium: f32, min_choline: f32, max_choline: f32, min_cholesterol: f32, max_cholesterol: f32, min_fluoride: f32, max_fluoride: f32, min_saturated_fat: f32, max_saturated_fat: f32, min_vitamin_a: f32, max_vitamin_a: f32, min_vitamin_c: f32, max_vitamin_c: f32, min_vitamin_d: f32, max_vitamin_d: f32, min_vitamin_e: f32, max_vitamin_e: f32, min_vitamin_k: f32, max_vitamin_k: f32, min_vitamin_b1: f32, max_vitamin_b1: f32, min_vitamin_b2: f32, max_vitamin_b2: f32, min_vitamin_b5: f32, max_vitamin_b5: f32, min_vitamin_b3: f32, max_vitamin_b3: f32, min_vitamin_b6: f32, max_vitamin_b6: f32, min_vitamin_b12: f32, max_vitamin_b12: f32, min_fiber: f32, max_fiber: f32, min_folate: f32, max_folate: f32, min_folic_acid: f32, max_folic_acid: f32, min_iodine: f32, max_iodine: f32, min_iron: f32, max_iron: f32, min_magnesium: f32, max_magnesium: f32, min_manganese: f32, max_manganese: f32, min_phosphorus: f32, max_phosphorus: f32, min_potassium: f32, max_potassium: f32, min_selenium: f32, max_selenium: f32, min_sodium: f32, max_sodium: f32, min_sugar: f32, max_sugar: f32, min_zinc: f32, max_zinc: f32, offset: f32, number: f32, random: bool, limit_license: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/findByNutrients".to_string())
            .with_query_param("minCarbs".to_string(), min_carbs.to_string())
            .with_query_param("maxCarbs".to_string(), max_carbs.to_string())
            .with_query_param("minProtein".to_string(), min_protein.to_string())
            .with_query_param("maxProtein".to_string(), max_protein.to_string())
            .with_query_param("minCalories".to_string(), min_calories.to_string())
            .with_query_param("maxCalories".to_string(), max_calories.to_string())
            .with_query_param("minFat".to_string(), min_fat.to_string())
            .with_query_param("maxFat".to_string(), max_fat.to_string())
            .with_query_param("minAlcohol".to_string(), min_alcohol.to_string())
            .with_query_param("maxAlcohol".to_string(), max_alcohol.to_string())
            .with_query_param("minCaffeine".to_string(), min_caffeine.to_string())
            .with_query_param("maxCaffeine".to_string(), max_caffeine.to_string())
            .with_query_param("minCopper".to_string(), min_copper.to_string())
            .with_query_param("maxCopper".to_string(), max_copper.to_string())
            .with_query_param("minCalcium".to_string(), min_calcium.to_string())
            .with_query_param("maxCalcium".to_string(), max_calcium.to_string())
            .with_query_param("minCholine".to_string(), min_choline.to_string())
            .with_query_param("maxCholine".to_string(), max_choline.to_string())
            .with_query_param("minCholesterol".to_string(), min_cholesterol.to_string())
            .with_query_param("maxCholesterol".to_string(), max_cholesterol.to_string())
            .with_query_param("minFluoride".to_string(), min_fluoride.to_string())
            .with_query_param("maxFluoride".to_string(), max_fluoride.to_string())
            .with_query_param("minSaturatedFat".to_string(), min_saturated_fat.to_string())
            .with_query_param("maxSaturatedFat".to_string(), max_saturated_fat.to_string())
            .with_query_param("minVitaminA".to_string(), min_vitamin_a.to_string())
            .with_query_param("maxVitaminA".to_string(), max_vitamin_a.to_string())
            .with_query_param("minVitaminC".to_string(), min_vitamin_c.to_string())
            .with_query_param("maxVitaminC".to_string(), max_vitamin_c.to_string())
            .with_query_param("minVitaminD".to_string(), min_vitamin_d.to_string())
            .with_query_param("maxVitaminD".to_string(), max_vitamin_d.to_string())
            .with_query_param("minVitaminE".to_string(), min_vitamin_e.to_string())
            .with_query_param("maxVitaminE".to_string(), max_vitamin_e.to_string())
            .with_query_param("minVitaminK".to_string(), min_vitamin_k.to_string())
            .with_query_param("maxVitaminK".to_string(), max_vitamin_k.to_string())
            .with_query_param("minVitaminB1".to_string(), min_vitamin_b1.to_string())
            .with_query_param("maxVitaminB1".to_string(), max_vitamin_b1.to_string())
            .with_query_param("minVitaminB2".to_string(), min_vitamin_b2.to_string())
            .with_query_param("maxVitaminB2".to_string(), max_vitamin_b2.to_string())
            .with_query_param("minVitaminB5".to_string(), min_vitamin_b5.to_string())
            .with_query_param("maxVitaminB5".to_string(), max_vitamin_b5.to_string())
            .with_query_param("minVitaminB3".to_string(), min_vitamin_b3.to_string())
            .with_query_param("maxVitaminB3".to_string(), max_vitamin_b3.to_string())
            .with_query_param("minVitaminB6".to_string(), min_vitamin_b6.to_string())
            .with_query_param("maxVitaminB6".to_string(), max_vitamin_b6.to_string())
            .with_query_param("minVitaminB12".to_string(), min_vitamin_b12.to_string())
            .with_query_param("maxVitaminB12".to_string(), max_vitamin_b12.to_string())
            .with_query_param("minFiber".to_string(), min_fiber.to_string())
            .with_query_param("maxFiber".to_string(), max_fiber.to_string())
            .with_query_param("minFolate".to_string(), min_folate.to_string())
            .with_query_param("maxFolate".to_string(), max_folate.to_string())
            .with_query_param("minFolicAcid".to_string(), min_folic_acid.to_string())
            .with_query_param("maxFolicAcid".to_string(), max_folic_acid.to_string())
            .with_query_param("minIodine".to_string(), min_iodine.to_string())
            .with_query_param("maxIodine".to_string(), max_iodine.to_string())
            .with_query_param("minIron".to_string(), min_iron.to_string())
            .with_query_param("maxIron".to_string(), max_iron.to_string())
            .with_query_param("minMagnesium".to_string(), min_magnesium.to_string())
            .with_query_param("maxMagnesium".to_string(), max_magnesium.to_string())
            .with_query_param("minManganese".to_string(), min_manganese.to_string())
            .with_query_param("maxManganese".to_string(), max_manganese.to_string())
            .with_query_param("minPhosphorus".to_string(), min_phosphorus.to_string())
            .with_query_param("maxPhosphorus".to_string(), max_phosphorus.to_string())
            .with_query_param("minPotassium".to_string(), min_potassium.to_string())
            .with_query_param("maxPotassium".to_string(), max_potassium.to_string())
            .with_query_param("minSelenium".to_string(), min_selenium.to_string())
            .with_query_param("maxSelenium".to_string(), max_selenium.to_string())
            .with_query_param("minSodium".to_string(), min_sodium.to_string())
            .with_query_param("maxSodium".to_string(), max_sodium.to_string())
            .with_query_param("minSugar".to_string(), min_sugar.to_string())
            .with_query_param("maxSugar".to_string(), max_sugar.to_string())
            .with_query_param("minZinc".to_string(), min_zinc.to_string())
            .with_query_param("maxZinc".to_string(), max_zinc.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .with_query_param("random".to_string(), random.to_string())
            .with_query_param("limitLicense".to_string(), limit_license.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_recipes_complex(&self, query: &str, cuisine: &str, exclude_cuisine: &str, diet: &str, intolerances: &str, equipment: &str, include_ingredients: &str, exclude_ingredients: &str, _type: &str, instructions_required: bool, fill_ingredients: bool, add_recipe_information: bool, author: &str, tags: &str, title_match: &str, max_ready_time: f32, ignore_pantry: bool, sort: &str, sort_direction: &str, min_carbs: f32, max_carbs: f32, min_protein: f32, max_protein: f32, min_calories: f32, max_calories: f32, min_fat: f32, max_fat: f32, min_alcohol: f32, max_alcohol: f32, min_caffeine: f32, max_caffeine: f32, min_copper: f32, max_copper: f32, min_calcium: f32, max_calcium: f32, min_choline: f32, max_choline: f32, min_cholesterol: f32, max_cholesterol: f32, min_fluoride: f32, max_fluoride: f32, min_saturated_fat: f32, max_saturated_fat: f32, min_vitamin_a: f32, max_vitamin_a: f32, min_vitamin_c: f32, max_vitamin_c: f32, min_vitamin_d: f32, max_vitamin_d: f32, min_vitamin_e: f32, max_vitamin_e: f32, min_vitamin_k: f32, max_vitamin_k: f32, min_vitamin_b1: f32, max_vitamin_b1: f32, min_vitamin_b2: f32, max_vitamin_b2: f32, min_vitamin_b5: f32, max_vitamin_b5: f32, min_vitamin_b3: f32, max_vitamin_b3: f32, min_vitamin_b6: f32, max_vitamin_b6: f32, min_vitamin_b12: f32, max_vitamin_b12: f32, min_fiber: f32, max_fiber: f32, min_folate: f32, max_folate: f32, min_folic_acid: f32, max_folic_acid: f32, min_iodine: f32, max_iodine: f32, min_iron: f32, max_iron: f32, min_magnesium: f32, max_magnesium: f32, min_manganese: f32, max_manganese: f32, min_phosphorus: f32, max_phosphorus: f32, min_potassium: f32, max_potassium: f32, min_selenium: f32, max_selenium: f32, min_sodium: f32, max_sodium: f32, min_sugar: f32, max_sugar: f32, min_zinc: f32, max_zinc: f32, offset: f32, number: f32, limit_license: bool) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/complexSearch".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("cuisine".to_string(), cuisine.to_string())
            .with_query_param("excludeCuisine".to_string(), exclude_cuisine.to_string())
            .with_query_param("diet".to_string(), diet.to_string())
            .with_query_param("intolerances".to_string(), intolerances.to_string())
            .with_query_param("equipment".to_string(), equipment.to_string())
            .with_query_param("includeIngredients".to_string(), include_ingredients.to_string())
            .with_query_param("excludeIngredients".to_string(), exclude_ingredients.to_string())
            .with_query_param("type".to_string(), _type.to_string())
            .with_query_param("instructionsRequired".to_string(), instructions_required.to_string())
            .with_query_param("fillIngredients".to_string(), fill_ingredients.to_string())
            .with_query_param("addRecipeInformation".to_string(), add_recipe_information.to_string())
            .with_query_param("author".to_string(), author.to_string())
            .with_query_param("tags".to_string(), tags.to_string())
            .with_query_param("titleMatch".to_string(), title_match.to_string())
            .with_query_param("maxReadyTime".to_string(), max_ready_time.to_string())
            .with_query_param("ignorePantry".to_string(), ignore_pantry.to_string())
            .with_query_param("sort".to_string(), sort.to_string())
            .with_query_param("sortDirection".to_string(), sort_direction.to_string())
            .with_query_param("minCarbs".to_string(), min_carbs.to_string())
            .with_query_param("maxCarbs".to_string(), max_carbs.to_string())
            .with_query_param("minProtein".to_string(), min_protein.to_string())
            .with_query_param("maxProtein".to_string(), max_protein.to_string())
            .with_query_param("minCalories".to_string(), min_calories.to_string())
            .with_query_param("maxCalories".to_string(), max_calories.to_string())
            .with_query_param("minFat".to_string(), min_fat.to_string())
            .with_query_param("maxFat".to_string(), max_fat.to_string())
            .with_query_param("minAlcohol".to_string(), min_alcohol.to_string())
            .with_query_param("maxAlcohol".to_string(), max_alcohol.to_string())
            .with_query_param("minCaffeine".to_string(), min_caffeine.to_string())
            .with_query_param("maxCaffeine".to_string(), max_caffeine.to_string())
            .with_query_param("minCopper".to_string(), min_copper.to_string())
            .with_query_param("maxCopper".to_string(), max_copper.to_string())
            .with_query_param("minCalcium".to_string(), min_calcium.to_string())
            .with_query_param("maxCalcium".to_string(), max_calcium.to_string())
            .with_query_param("minCholine".to_string(), min_choline.to_string())
            .with_query_param("maxCholine".to_string(), max_choline.to_string())
            .with_query_param("minCholesterol".to_string(), min_cholesterol.to_string())
            .with_query_param("maxCholesterol".to_string(), max_cholesterol.to_string())
            .with_query_param("minFluoride".to_string(), min_fluoride.to_string())
            .with_query_param("maxFluoride".to_string(), max_fluoride.to_string())
            .with_query_param("minSaturatedFat".to_string(), min_saturated_fat.to_string())
            .with_query_param("maxSaturatedFat".to_string(), max_saturated_fat.to_string())
            .with_query_param("minVitaminA".to_string(), min_vitamin_a.to_string())
            .with_query_param("maxVitaminA".to_string(), max_vitamin_a.to_string())
            .with_query_param("minVitaminC".to_string(), min_vitamin_c.to_string())
            .with_query_param("maxVitaminC".to_string(), max_vitamin_c.to_string())
            .with_query_param("minVitaminD".to_string(), min_vitamin_d.to_string())
            .with_query_param("maxVitaminD".to_string(), max_vitamin_d.to_string())
            .with_query_param("minVitaminE".to_string(), min_vitamin_e.to_string())
            .with_query_param("maxVitaminE".to_string(), max_vitamin_e.to_string())
            .with_query_param("minVitaminK".to_string(), min_vitamin_k.to_string())
            .with_query_param("maxVitaminK".to_string(), max_vitamin_k.to_string())
            .with_query_param("minVitaminB1".to_string(), min_vitamin_b1.to_string())
            .with_query_param("maxVitaminB1".to_string(), max_vitamin_b1.to_string())
            .with_query_param("minVitaminB2".to_string(), min_vitamin_b2.to_string())
            .with_query_param("maxVitaminB2".to_string(), max_vitamin_b2.to_string())
            .with_query_param("minVitaminB5".to_string(), min_vitamin_b5.to_string())
            .with_query_param("maxVitaminB5".to_string(), max_vitamin_b5.to_string())
            .with_query_param("minVitaminB3".to_string(), min_vitamin_b3.to_string())
            .with_query_param("maxVitaminB3".to_string(), max_vitamin_b3.to_string())
            .with_query_param("minVitaminB6".to_string(), min_vitamin_b6.to_string())
            .with_query_param("maxVitaminB6".to_string(), max_vitamin_b6.to_string())
            .with_query_param("minVitaminB12".to_string(), min_vitamin_b12.to_string())
            .with_query_param("maxVitaminB12".to_string(), max_vitamin_b12.to_string())
            .with_query_param("minFiber".to_string(), min_fiber.to_string())
            .with_query_param("maxFiber".to_string(), max_fiber.to_string())
            .with_query_param("minFolate".to_string(), min_folate.to_string())
            .with_query_param("maxFolate".to_string(), max_folate.to_string())
            .with_query_param("minFolicAcid".to_string(), min_folic_acid.to_string())
            .with_query_param("maxFolicAcid".to_string(), max_folic_acid.to_string())
            .with_query_param("minIodine".to_string(), min_iodine.to_string())
            .with_query_param("maxIodine".to_string(), max_iodine.to_string())
            .with_query_param("minIron".to_string(), min_iron.to_string())
            .with_query_param("maxIron".to_string(), max_iron.to_string())
            .with_query_param("minMagnesium".to_string(), min_magnesium.to_string())
            .with_query_param("maxMagnesium".to_string(), max_magnesium.to_string())
            .with_query_param("minManganese".to_string(), min_manganese.to_string())
            .with_query_param("maxManganese".to_string(), max_manganese.to_string())
            .with_query_param("minPhosphorus".to_string(), min_phosphorus.to_string())
            .with_query_param("maxPhosphorus".to_string(), max_phosphorus.to_string())
            .with_query_param("minPotassium".to_string(), min_potassium.to_string())
            .with_query_param("maxPotassium".to_string(), max_potassium.to_string())
            .with_query_param("minSelenium".to_string(), min_selenium.to_string())
            .with_query_param("maxSelenium".to_string(), max_selenium.to_string())
            .with_query_param("minSodium".to_string(), min_sodium.to_string())
            .with_query_param("maxSodium".to_string(), max_sodium.to_string())
            .with_query_param("minSugar".to_string(), min_sugar.to_string())
            .with_query_param("maxSugar".to_string(), max_sugar.to_string())
            .with_query_param("minZinc".to_string(), min_zinc.to_string())
            .with_query_param("maxZinc".to_string(), max_zinc.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("number".to_string(), number.to_string())
            .with_query_param("limitLicense".to_string(), limit_license.to_string())
            .execute(self.configuration.borrow())
    }

    fn search_site_content(&self, query: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/site/search".to_string())
            .with_query_param("query".to_string(), query.to_string())
            .execute(self.configuration.borrow())
    }

    fn summarize_recipe(&self, id: f32) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/summary".to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn talk_to_chatbot(&self, text: &str, context_id: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/converse".to_string())
            .with_query_param("text".to_string(), text.to_string())
            .with_query_param("contextId".to_string(), context_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_equipment(&self, ingredient_list: &str, servings: f32, view: &str, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/visualizeEquipment".to_string())
            .with_form_param("ingredientList".to_string(), ingredient_list.to_string())
            .with_form_param("servings".to_string(), servings.to_string())
            .with_form_param("view".to_string(), view.to_string())
            .with_form_param("defaultCss".to_string(), default_css.to_string())
            .with_form_param("showBacklink".to_string(), show_backlink.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_ingredients(&self, ingredient_list: &str, servings: f32, measure: &str, view: &str, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/visualizeIngredients".to_string())
            .with_form_param("ingredientList".to_string(), ingredient_list.to_string())
            .with_form_param("servings".to_string(), servings.to_string())
            .with_form_param("measure".to_string(), measure.to_string())
            .with_form_param("view".to_string(), view.to_string())
            .with_form_param("defaultCss".to_string(), default_css.to_string())
            .with_form_param("showBacklink".to_string(), show_backlink.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_menu_item_nutrition_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/menuItems/{id}/nutritionWidget".to_string())
            .with_query_param("defaultCss".to_string(), default_css.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_price_breakdown(&self, ingredient_list: &str, servings: f32, mode: f32, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/visualizePriceEstimator".to_string())
            .with_form_param("ingredientList".to_string(), ingredient_list.to_string())
            .with_form_param("servings".to_string(), servings.to_string())
            .with_form_param("mode".to_string(), mode.to_string())
            .with_form_param("defaultCss".to_string(), default_css.to_string())
            .with_form_param("showBacklink".to_string(), show_backlink.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_product_nutrition_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/food/products/{id}/nutritionWidget".to_string())
            .with_query_param("defaultCss".to_string(), default_css.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_recipe_equipment_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/equipmentWidget".to_string())
            .with_query_param("defaultCss".to_string(), default_css.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_recipe_ingredients_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/ingredientWidget".to_string())
            .with_query_param("defaultCss".to_string(), default_css.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_recipe_nutrition(&self, ingredient_list: &str, servings: f32, default_css: bool, show_backlink: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/recipes/visualizeNutrition".to_string())
            .with_form_param("ingredientList".to_string(), ingredient_list.to_string())
            .with_form_param("servings".to_string(), servings.to_string())
            .with_form_param("defaultCss".to_string(), default_css.to_string())
            .with_form_param("showBacklink".to_string(), show_backlink.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_recipe_nutrition_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/nutritionWidget".to_string())
            .with_query_param("defaultCss".to_string(), default_css.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn visualize_recipe_price_breakdown_by_id(&self, id: f32, default_css: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recipes/{id}/priceBreakdownWidget".to_string())
            .with_query_param("defaultCss".to_string(), default_css.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

}
