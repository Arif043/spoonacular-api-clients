/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct MealPlanningApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> MealPlanningApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> MealPlanningApiClient<C> {
        MealPlanningApiClient {
            configuration: configuration,
        }
    }
}

pub trait MealPlanningApi {
    fn add_to_meal_plan(&self, username: &str, hash: &str, inline_object4: ::models::InlineObject4) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn add_to_shopping_list(&self, username: &str, hash: &str, inline_object7: ::models::InlineObject7) -> Box<Future<Item = ::models::InlineResponse20041, Error = Error<serde_json::Value>>>;
    fn clear_meal_plan_day(&self, username: &str, date: &str, hash: &str, inline_object3: ::models::InlineObject3) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn connect_user(&self, body: Value) -> Box<Future<Item = ::models::InlineResponse20042, Error = Error<serde_json::Value>>>;
    fn delete_from_meal_plan(&self, username: &str, id: f32, hash: &str, inline_object5: ::models::InlineObject5) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn delete_from_shopping_list(&self, username: &str, id: i32, hash: &str, inline_object8: ::models::InlineObject8) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn generate_meal_plan(&self, time_frame: &str, target_calories: f32, diet: &str, exclude: &str) -> Box<Future<Item = ::models::InlineResponse20037, Error = Error<serde_json::Value>>>;
    fn generate_shopping_list(&self, username: &str, start_date: &str, end_date: &str, hash: &str, inline_object6: ::models::InlineObject6) -> Box<Future<Item = ::models::InlineResponse20041, Error = Error<serde_json::Value>>>;
    fn get_meal_plan_template(&self, username: &str, id: i32, hash: &str) -> Box<Future<Item = ::models::InlineResponse20040, Error = Error<serde_json::Value>>>;
    fn get_meal_plan_templates(&self, username: &str, hash: &str) -> Box<Future<Item = ::models::InlineResponse20039, Error = Error<serde_json::Value>>>;
    fn get_meal_plan_week(&self, username: &str, start_date: &str, hash: &str) -> Box<Future<Item = ::models::InlineResponse20038, Error = Error<serde_json::Value>>>;
    fn get_shopping_list(&self, username: &str, hash: &str) -> Box<Future<Item = ::models::InlineResponse20041, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>MealPlanningApi for MealPlanningApiClient<C> {
    fn add_to_meal_plan(&self, username: &str, hash: &str, inline_object4: ::models::InlineObject4) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/mealplanner/{username}/items".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_body_param(inline_object4)
            .execute(self.configuration.borrow())
    }

    fn add_to_shopping_list(&self, username: &str, hash: &str, inline_object7: ::models::InlineObject7) -> Box<Future<Item = ::models::InlineResponse20041, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/mealplanner/{username}/shopping-list/items".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_body_param(inline_object7)
            .execute(self.configuration.borrow())
    }

    fn clear_meal_plan_day(&self, username: &str, date: &str, hash: &str, inline_object3: ::models::InlineObject3) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/mealplanner/{username}/day/{date}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_path_param("date".to_string(), date.to_string())
            .with_body_param(inline_object3)
            .execute(self.configuration.borrow())
    }

    fn connect_user(&self, body: Value) -> Box<Future<Item = ::models::InlineResponse20042, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/users/connect".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn delete_from_meal_plan(&self, username: &str, id: f32, hash: &str, inline_object5: ::models::InlineObject5) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/mealplanner/{username}/items/{id}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .with_body_param(inline_object5)
            .execute(self.configuration.borrow())
    }

    fn delete_from_shopping_list(&self, username: &str, id: i32, hash: &str, inline_object8: ::models::InlineObject8) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/mealplanner/{username}/shopping-list/items/{id}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .with_body_param(inline_object8)
            .execute(self.configuration.borrow())
    }

    fn generate_meal_plan(&self, time_frame: &str, target_calories: f32, diet: &str, exclude: &str) -> Box<Future<Item = ::models::InlineResponse20037, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/mealplanner/generate".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("timeFrame".to_string(), time_frame.to_string())
            .with_query_param("targetCalories".to_string(), target_calories.to_string())
            .with_query_param("diet".to_string(), diet.to_string())
            .with_query_param("exclude".to_string(), exclude.to_string())
            .execute(self.configuration.borrow())
    }

    fn generate_shopping_list(&self, username: &str, start_date: &str, end_date: &str, hash: &str, inline_object6: ::models::InlineObject6) -> Box<Future<Item = ::models::InlineResponse20041, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/mealplanner/{username}/shopping-list/{start-date}/{end-date}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_path_param("start-date".to_string(), start_date.to_string())
            .with_path_param("end-date".to_string(), end_date.to_string())
            .with_body_param(inline_object6)
            .execute(self.configuration.borrow())
    }

    fn get_meal_plan_template(&self, username: &str, id: i32, hash: &str) -> Box<Future<Item = ::models::InlineResponse20040, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/mealplanner/{username}/templates/{id}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_meal_plan_templates(&self, username: &str, hash: &str) -> Box<Future<Item = ::models::InlineResponse20039, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/mealplanner/{username}/templates".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_meal_plan_week(&self, username: &str, start_date: &str, hash: &str) -> Box<Future<Item = ::models::InlineResponse20038, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/mealplanner/{username}/week/{start-date}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .with_path_param("start-date".to_string(), start_date.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_shopping_list(&self, username: &str, hash: &str) -> Box<Future<Item = ::models::InlineResponse20041, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/mealplanner/{username}/shopping-list".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "apiKey".to_owned(),
            }))
            .with_query_param("hash".to_string(), hash.to_string())
            .with_path_param("username".to_string(), username.to_string())
            .execute(self.configuration.borrow())
    }

}
