{-
   spoonacular API

   The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   OpenAPI Version: 3.0.0
   spoonacular API API version: 1.0
   Contact: david@spoonacular.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Spoonacular.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Spoonacular.API.ApiDefault where

import Spoonacular.Core
import Spoonacular.MimeTypes
import Spoonacular.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Default

-- *** analyzeARecipeSearchQuery

-- | @GET \/recipes\/queries\/analyze@
-- 
-- Analyze a Recipe Search Query
-- 
-- Parse a recipe search query to find out its intention.
-- 
analyzeARecipeSearchQuery 
  :: Q -- ^ "q" -  The recipe search query.
  -> SpoonacularRequest AnalyzeARecipeSearchQuery MimeNoContent A.Value MimeJSON
analyzeARecipeSearchQuery (Q q) =
  _mkRequest "GET" ["/recipes/queries/analyze"]
    `setQuery` toQuery ("q", Just q)

data AnalyzeARecipeSearchQuery  
-- | @application/json@
instance Produces AnalyzeARecipeSearchQuery MimeJSON


-- *** analyzeRecipeInstructions

-- | @POST \/recipes\/analyzeInstructions@
-- 
-- Analyze Recipe Instructions
-- 
-- Extract ingredients and equipment from the recipe instruction steps.
-- 
analyzeRecipeInstructions 
  :: (Consumes AnalyzeRecipeInstructions MimeFormUrlEncoded)
  => Instructions -- ^ "instructions" -  The instructions text.
  -> SpoonacularRequest AnalyzeRecipeInstructions MimeFormUrlEncoded A.Value MimeJSON
analyzeRecipeInstructions (Instructions instructions) =
  _mkRequest "POST" ["/recipes/analyzeInstructions"]
    `addForm` toForm ("instructions", instructions)

data AnalyzeRecipeInstructions  

-- | @application/x-www-form-urlencoded@
instance Consumes AnalyzeRecipeInstructions MimeFormUrlEncoded

-- | @application/json@
instance Produces AnalyzeRecipeInstructions MimeJSON


-- *** autocompleteIngredientSearch

-- | @GET \/food\/ingredients\/autocomplete@
-- 
-- Autocomplete Ingredient Search
-- 
-- Autocomplete a search for an ingredient.
-- 
autocompleteIngredientSearch 
  :: Query -- ^ "query" -  The query - a partial or full ingredient name.
  -> SpoonacularRequest AutocompleteIngredientSearch MimeNoContent A.Value MimeJSON
autocompleteIngredientSearch (Query query) =
  _mkRequest "GET" ["/food/ingredients/autocomplete"]
    `setQuery` toQuery ("query", Just query)

data AutocompleteIngredientSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 100).
instance HasOptionalParam AutocompleteIngredientSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "metaInformation" - Whether to return more meta information about the ingredients.
instance HasOptionalParam AutocompleteIngredientSearch MetaInformation where
  applyOptionalParam req (MetaInformation xs) =
    req `setQuery` toQuery ("metaInformation", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All found ingredients must not cause problems for people with one of the given tolerances. See a full list of supported intolerances.
instance HasOptionalParam AutocompleteIngredientSearch IntolerancesBool where
  applyOptionalParam req (IntolerancesBool xs) =
    req `setQuery` toQuery ("intolerances", Just xs)
-- | @application/json@
instance Produces AutocompleteIngredientSearch MimeJSON


-- *** autocompleteMenuItemSearch

-- | @GET \/food\/menuItems\/suggest@
-- 
-- Autocomplete Menu Item Search
-- 
-- Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
-- 
autocompleteMenuItemSearch 
  :: Query -- ^ "query" -  The (partial) search query.
  -> SpoonacularRequest AutocompleteMenuItemSearch MimeNoContent A.Value MimeJSON
autocompleteMenuItemSearch (Query query) =
  _mkRequest "GET" ["/food/menuItems/suggest"]
    `setQuery` toQuery ("query", Just query)

data AutocompleteMenuItemSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 25).
instance HasOptionalParam AutocompleteMenuItemSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteMenuItemSearch MimeJSON


-- *** autocompleteProductSearch

-- | @GET \/food\/products\/suggest@
-- 
-- Autocomplete Product Search
-- 
-- Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
-- 
autocompleteProductSearch 
  :: Query -- ^ "query" -  The (partial) search query.
  -> SpoonacularRequest AutocompleteProductSearch MimeNoContent A.Value MimeJSON
autocompleteProductSearch (Query query) =
  _mkRequest "GET" ["/food/products/suggest"]
    `setQuery` toQuery ("query", Just query)

data AutocompleteProductSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 25).
instance HasOptionalParam AutocompleteProductSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteProductSearch MimeJSON


-- *** autocompleteRecipeSearch

-- | @GET \/recipes\/autocomplete@
-- 
-- Autocomplete Recipe Search
-- 
-- Autocomplete a partial input to possible recipe names.
-- 
autocompleteRecipeSearch 
  :: Query -- ^ "query" -  The query to be autocompleted.
  -> SpoonacularRequest AutocompleteRecipeSearch MimeNoContent A.Value MimeJSON
autocompleteRecipeSearch (Query query) =
  _mkRequest "GET" ["/recipes/autocomplete"]
    `setQuery` toQuery ("query", Just query)

data AutocompleteRecipeSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 25).
instance HasOptionalParam AutocompleteRecipeSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteRecipeSearch MimeJSON


-- *** classifyCuisine

-- | @POST \/recipes\/cuisine@
-- 
-- Classify Cuisine
-- 
-- Classify the recipe's cuisine.
-- 
classifyCuisine 
  :: (Consumes ClassifyCuisine MimeFormUrlEncoded)
  => Title -- ^ "title" -  The title of the recipe.
  -> IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  -> SpoonacularRequest ClassifyCuisine MimeFormUrlEncoded A.Value MimeJSON
classifyCuisine (Title title) (IngredientList ingredientList) =
  _mkRequest "POST" ["/recipes/cuisine"]
    `addForm` toForm ("title", title)
    `addForm` toForm ("ingredientList", ingredientList)

data ClassifyCuisine  

-- | @application/x-www-form-urlencoded@
instance Consumes ClassifyCuisine MimeFormUrlEncoded

-- | @application/json@
instance Produces ClassifyCuisine MimeJSON


-- *** classifyGroceryProduct

-- | @POST \/food\/products\/classify@
-- 
-- Classify Grocery Product
-- 
-- Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
-- 
classifyGroceryProduct 
  :: (Consumes ClassifyGroceryProduct MimeJSON, MimeRender MimeJSON InlineObject8)
  => InlineObject8 -- ^ "inlineObject8"
  -> SpoonacularRequest ClassifyGroceryProduct MimeJSON A.Value MimeJSON
classifyGroceryProduct inlineObject8 =
  _mkRequest "POST" ["/food/products/classify"]
    `setBodyParam` inlineObject8

data ClassifyGroceryProduct 
instance HasBodyParam ClassifyGroceryProduct InlineObject8 

-- | /Optional Param/ "locale" - The locale of the returned category, supported is en_US and en_GB.
instance HasOptionalParam ClassifyGroceryProduct Locale where
  applyOptionalParam req (Locale xs) =
    req `setQuery` toQuery ("locale", Just xs)

-- | @application/json@
instance Consumes ClassifyGroceryProduct MimeJSON

-- | @application/json@
instance Produces ClassifyGroceryProduct MimeJSON


-- *** classifyGroceryProductBulk

-- | @POST \/food\/products\/classifyBatch@
-- 
-- Classify Grocery Product Bulk
-- 
-- Given a set of product jsons, get back classified products.
-- 
classifyGroceryProductBulk 
  :: (Consumes ClassifyGroceryProductBulk MimeJSON, MimeRender MimeJSON Body)
  => Body -- ^ "body"
  -> SpoonacularRequest ClassifyGroceryProductBulk MimeJSON A.Value MimeJSON
classifyGroceryProductBulk body =
  _mkRequest "POST" ["/food/products/classifyBatch"]
    `setBodyParam` body

data ClassifyGroceryProductBulk 
instance HasBodyParam ClassifyGroceryProductBulk Body 

-- | /Optional Param/ "locale" - The locale of the returned category, supported is en_US and en_GB.
instance HasOptionalParam ClassifyGroceryProductBulk Locale where
  applyOptionalParam req (Locale xs) =
    req `setQuery` toQuery ("locale", Just xs)

-- | @application/json@
instance Consumes ClassifyGroceryProductBulk MimeJSON

-- | @application/json@
instance Produces ClassifyGroceryProductBulk MimeJSON


-- *** convertAmounts

-- | @GET \/recipes\/convert@
-- 
-- Convert Amounts
-- 
-- Convert amounts like \"2 cups of flour to grams\".
-- 
convertAmounts 
  :: IngredientName -- ^ "ingredientName" -  The ingredient which you want to convert.
  -> SourceAmount -- ^ "sourceAmount" -  The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
  -> SourceUnit -- ^ "sourceUnit" -  The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  -> TargetUnit -- ^ "targetUnit" -  The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  -> SpoonacularRequest ConvertAmounts MimeNoContent A.Value MimeJSON
convertAmounts (IngredientName ingredientName) (SourceAmount sourceAmount) (SourceUnit sourceUnit) (TargetUnit targetUnit) =
  _mkRequest "GET" ["/recipes/convert"]
    `setQuery` toQuery ("ingredientName", Just ingredientName)
    `setQuery` toQuery ("sourceAmount", Just sourceAmount)
    `setQuery` toQuery ("sourceUnit", Just sourceUnit)
    `setQuery` toQuery ("targetUnit", Just targetUnit)

data ConvertAmounts  
-- | @application/json@
instance Produces ConvertAmounts MimeJSON


-- *** createRecipeCard

-- | @POST \/recipes\/visualizeRecipe@
-- 
-- Create Recipe Card
-- 
-- Create Recipe Card.
-- 
createRecipeCard 
  :: (Consumes CreateRecipeCard MimeMultipartFormData)
  => Title -- ^ "title" -  The title of the recipe.
  -> Image -- ^ "image" -  The binary image of the recipe as jpg.
  -> Ingredients -- ^ "ingredients" -  The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  -> Instructions -- ^ "instructions" -  The instructions to make the recipe. One step per line (separate lines with \\\\n).
  -> ReadyInMinutes -- ^ "readyInMinutes" -  The number of minutes it takes to get the recipe on the table.
  -> Servings -- ^ "servings" -  The number of servings that you can make from the ingredients.
  -> Mask -- ^ "mask" -  The mask to put over the recipe image (\\\"ellipseMask\\\", \\\"diamondMask\\\", \\\"diamondMask\\\", \\\"starMask\\\", \\\"heartMask\\\", \\\"potMask\\\", \\\"fishMask\\\").
  -> BackgroundImage -- ^ "backgroundImage" -  The background image (\\\"none\\\",\\\"background1\\\", or \\\"background2\\\").
  -> SpoonacularRequest CreateRecipeCard MimeMultipartFormData A.Value MimeJSON
createRecipeCard (Title title) (Image image) (Ingredients ingredients) (Instructions instructions) (ReadyInMinutes readyInMinutes) (Servings servings) (Mask mask) (BackgroundImage backgroundImage) =
  _mkRequest "POST" ["/recipes/visualizeRecipe"]
    `_addMultiFormPart` NH.partLBS "title" (mimeRender' MimeMultipartFormData title)
    `_addMultiFormPart` NH.partFileSource "image" image
    `_addMultiFormPart` NH.partLBS "ingredients" (mimeRender' MimeMultipartFormData ingredients)
    `_addMultiFormPart` NH.partLBS "instructions" (mimeRender' MimeMultipartFormData instructions)
    `_addMultiFormPart` NH.partLBS "readyInMinutes" (mimeRender' MimeMultipartFormData readyInMinutes)
    `_addMultiFormPart` NH.partLBS "servings" (mimeRender' MimeMultipartFormData servings)
    `_addMultiFormPart` NH.partLBS "mask" (mimeRender' MimeMultipartFormData mask)
    `_addMultiFormPart` NH.partLBS "backgroundImage" (mimeRender' MimeMultipartFormData backgroundImage)

data CreateRecipeCard  

-- | /Optional Param/ "author" - The author of the recipe.
instance HasOptionalParam CreateRecipeCard Author where
  applyOptionalParam req (Author xs) =
    req `_addMultiFormPart` NH.partLBS "author" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "backgroundColor" - The background color on the recipe card as a hex-string.
instance HasOptionalParam CreateRecipeCard BackgroundColor where
  applyOptionalParam req (BackgroundColor xs) =
    req `_addMultiFormPart` NH.partLBS "backgroundColor" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "fontColor" - The font color on the recipe card as a hex-string.
instance HasOptionalParam CreateRecipeCard FontColor where
  applyOptionalParam req (FontColor xs) =
    req `_addMultiFormPart` NH.partLBS "fontColor" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "source" - The source of the recipe.
instance HasOptionalParam CreateRecipeCard Source where
  applyOptionalParam req (Source xs) =
    req `_addMultiFormPart` NH.partLBS "source" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes CreateRecipeCard MimeMultipartFormData

-- | @application/json@
instance Produces CreateRecipeCard MimeJSON


-- *** detectFoodInText

-- | @POST \/food\/detect@
-- 
-- Detect Food in Text
-- 
-- Detect ingredients and dishes in texts. This task is also called Named Entity Recognition (NER). In our case the entities are foods. Either dishes, such as pizza and cheeseburger or ingredients, such as cucumber and almonds.
-- 
detectFoodInText 
  :: (Consumes DetectFoodInText MimeFormUrlEncoded)
  => ParamText -- ^ "text" -  The text in which food items such as dish names and ingredients should be detected in.
  -> SpoonacularRequest DetectFoodInText MimeFormUrlEncoded A.Value MimeJSON
detectFoodInText (ParamText text) =
  _mkRequest "POST" ["/food/detect"]
    `addForm` toForm ("text", text)

data DetectFoodInText  

-- | @application/x-www-form-urlencoded@
instance Consumes DetectFoodInText MimeFormUrlEncoded

-- | @application/json@
instance Produces DetectFoodInText MimeJSON


-- *** extractRecipeFromWebsite

-- | @GET \/recipes\/extract@
-- 
-- Extract Recipe from Website
-- 
-- Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and the equipment that is used.
-- 
extractRecipeFromWebsite 
  :: Url -- ^ "url" -  The URL of the recipe page.
  -> SpoonacularRequest ExtractRecipeFromWebsite MimeNoContent A.Value MimeJSON
extractRecipeFromWebsite (Url url) =
  _mkRequest "GET" ["/recipes/extract"]
    `setQuery` toQuery ("url", Just url)

data ExtractRecipeFromWebsite  

-- | /Optional Param/ "forceExtraction" - If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.
instance HasOptionalParam ExtractRecipeFromWebsite ForceExtraction where
  applyOptionalParam req (ForceExtraction xs) =
    req `setQuery` toQuery ("forceExtraction", Just xs)
-- | @application/json@
instance Produces ExtractRecipeFromWebsite MimeJSON


-- *** generateMealPlan

-- | @GET \/recipes\/mealplans\/generate@
-- 
-- Generate Meal Plan
-- 
-- Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
-- 
generateMealPlan 
  :: SpoonacularRequest GenerateMealPlan MimeNoContent A.Value MimeJSON
generateMealPlan =
  _mkRequest "GET" ["/recipes/mealplans/generate"]

data GenerateMealPlan  

-- | /Optional Param/ "timeFrame" - Either for one \"day\" or an entire \"week\".
instance HasOptionalParam GenerateMealPlan TimeFrame where
  applyOptionalParam req (TimeFrame xs) =
    req `setQuery` toQuery ("timeFrame", Just xs)

-- | /Optional Param/ "targetCalories" - What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
instance HasOptionalParam GenerateMealPlan TargetCalories where
  applyOptionalParam req (TargetCalories xs) =
    req `setQuery` toQuery ("targetCalories", Just xs)

-- | /Optional Param/ "diet" - Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
instance HasOptionalParam GenerateMealPlan Diet where
  applyOptionalParam req (Diet xs) =
    req `setQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "exclude" - A comma-separated list of allergens or ingredients that must be excluded.
instance HasOptionalParam GenerateMealPlan Exclude where
  applyOptionalParam req (Exclude xs) =
    req `setQuery` toQuery ("exclude", Just xs)
-- | @application/json@
instance Produces GenerateMealPlan MimeJSON


-- *** getARandomFoodJoke

-- | @GET \/food\/jokes\/random@
-- 
-- Get a Random Food Joke
-- 
-- Get a random joke that includes or is about food.
-- 
getARandomFoodJoke 
  :: SpoonacularRequest GetARandomFoodJoke MimeNoContent A.Value MimeJSON
getARandomFoodJoke =
  _mkRequest "GET" ["/food/jokes/random"]

data GetARandomFoodJoke  
-- | @application/json@
instance Produces GetARandomFoodJoke MimeJSON


-- *** getAnalyzedRecipeInstructions

-- | @GET \/recipes\/{id}\/analyzedInstructions@
-- 
-- Get Analyzed Recipe Instructions
-- 
-- Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and the equipment that is used.
-- 
getAnalyzedRecipeInstructions 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetAnalyzedRecipeInstructions MimeNoContent A.Value MimeJSON
getAnalyzedRecipeInstructions (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/analyzedInstructions"]

data GetAnalyzedRecipeInstructions  

-- | /Optional Param/ "stepBreakdown" - Whether to break down the recipe steps even more.
instance HasOptionalParam GetAnalyzedRecipeInstructions StepBreakdown where
  applyOptionalParam req (StepBreakdown xs) =
    req `setQuery` toQuery ("stepBreakdown", Just xs)
-- | @application/json@
instance Produces GetAnalyzedRecipeInstructions MimeJSON


-- *** getComparableProducts

-- | @GET \/food\/products\/upc\/{upc}\/comparable@
-- 
-- Get Comparable Products
-- 
-- Find comparable products to the given one.
-- 
getComparableProducts 
  :: Upc -- ^ "upc" -  The UPC of the product for that you want to find comparable products.
  -> SpoonacularRequest GetComparableProducts MimeNoContent A.Value MimeJSON
getComparableProducts (Upc upc) =
  _mkRequest "GET" ["/food/products/upc/",toPath upc,"/comparable"]

data GetComparableProducts  
-- | @application/json@
instance Produces GetComparableProducts MimeJSON


-- *** getConversationSuggests

-- | @GET \/food\/converse\/suggest@
-- 
-- Get Conversation Suggests
-- 
-- This endpoint returns suggestions for things the user can say or ask the chat bot.
-- 
getConversationSuggests 
  :: Query -- ^ "query" -  A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
  -> SpoonacularRequest GetConversationSuggests MimeNoContent A.Value MimeJSON
getConversationSuggests (Query query) =
  _mkRequest "GET" ["/food/converse/suggest"]
    `setQuery` toQuery ("query", Just query)

data GetConversationSuggests  

-- | /Optional Param/ "number" - The number of suggestions to return (between 1 and 25).
instance HasOptionalParam GetConversationSuggests Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetConversationSuggests MimeJSON


-- *** getDishPairingForWine

-- | @GET \/food\/wine\/dishes@
-- 
-- Get Dish Pairing for Wine
-- 
-- Get a dish that goes well with a given wine.
-- 
getDishPairingForWine 
  :: Wine -- ^ "wine" -  The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  -> SpoonacularRequest GetDishPairingForWine MimeNoContent A.Value MimeJSON
getDishPairingForWine (Wine wine) =
  _mkRequest "GET" ["/food/wine/dishes"]
    `setQuery` toQuery ("wine", Just wine)

data GetDishPairingForWine  
-- | @application/json@
instance Produces GetDishPairingForWine MimeJSON


-- *** getFoodInformation

-- | @GET \/food\/ingredients\/{id}\/information@
-- 
-- Get Food Information
-- 
-- Get information about a certain food (ingredient).
-- 
getFoodInformation 
  :: Id -- ^ "id" -  The id of the food / ingredient.
  -> SpoonacularRequest GetFoodInformation MimeNoContent A.Value MimeJSON
getFoodInformation (Id id) =
  _mkRequest "GET" ["/food/ingredients/",toPath id,"/information"]

data GetFoodInformation  

-- | /Optional Param/ "amount" - The amount of that food.
instance HasOptionalParam GetFoodInformation Amount where
  applyOptionalParam req (Amount xs) =
    req `setQuery` toQuery ("amount", Just xs)

-- | /Optional Param/ "unit" - The unit for the given amount.
instance HasOptionalParam GetFoodInformation Unit where
  applyOptionalParam req (Unit xs) =
    req `setQuery` toQuery ("unit", Just xs)
-- | @application/json@
instance Produces GetFoodInformation MimeJSON


-- *** getIngredientSubstitutes

-- | @GET \/food\/ingredients\/substitutes@
-- 
-- Get Ingredient Substitutes
-- 
-- Search for substitutes for a given ingredient.
-- 
getIngredientSubstitutes 
  :: IngredientName -- ^ "ingredientName" -  The name of the ingredient you want to replace.
  -> SpoonacularRequest GetIngredientSubstitutes MimeNoContent A.Value MimeJSON
getIngredientSubstitutes (IngredientName ingredientName) =
  _mkRequest "GET" ["/food/ingredients/substitutes"]
    `setQuery` toQuery ("ingredientName", Just ingredientName)

data GetIngredientSubstitutes  
-- | @application/json@
instance Produces GetIngredientSubstitutes MimeJSON


-- *** getIngredientSubstitutesByID

-- | @GET \/food\/ingredients\/{id}\/substitutes@
-- 
-- Get Ingredient Substitutes by ID
-- 
-- Search for substitutes for a given ingredient.
-- 
getIngredientSubstitutesByID 
  :: Id -- ^ "id" -  The id of the ingredient you want substitutes for.
  -> SpoonacularRequest GetIngredientSubstitutesByID MimeNoContent A.Value MimeJSON
getIngredientSubstitutesByID (Id id) =
  _mkRequest "GET" ["/food/ingredients/",toPath id,"/substitutes"]

data GetIngredientSubstitutesByID  
-- | @application/json@
instance Produces GetIngredientSubstitutesByID MimeJSON


-- *** getMenuItemInformation

-- | @GET \/food\/menuItems\/{id}@
-- 
-- Get Menu Item Information
-- 
-- Get information about a certain menu item.
-- 
getMenuItemInformation 
  :: Id -- ^ "id" -  The menu item id.
  -> SpoonacularRequest GetMenuItemInformation MimeNoContent A.Value MimeJSON
getMenuItemInformation (Id id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id]

data GetMenuItemInformation  
-- | @application/json@
instance Produces GetMenuItemInformation MimeJSON


-- *** getProductInformation

-- | @GET \/food\/products\/{id}@
-- 
-- Get Product Information
-- 
-- Get information about a packaged food product.
-- 
getProductInformation 
  :: Id -- ^ "id" -  The id of the packaged food product.
  -> SpoonacularRequest GetProductInformation MimeNoContent A.Value MimeJSON
getProductInformation (Id id) =
  _mkRequest "GET" ["/food/products/",toPath id]

data GetProductInformation  
-- | @application/json@
instance Produces GetProductInformation MimeJSON


-- *** getRandomFoodTrivia

-- | @GET \/food\/trivia\/random@
-- 
-- Get Random Food Trivia
-- 
-- Returns random food trivia.
-- 
getRandomFoodTrivia 
  :: SpoonacularRequest GetRandomFoodTrivia MimeNoContent A.Value MimeJSON
getRandomFoodTrivia =
  _mkRequest "GET" ["/food/trivia/random"]

data GetRandomFoodTrivia  
-- | @application/json@
instance Produces GetRandomFoodTrivia MimeJSON


-- *** getRandomRecipes

-- | @GET \/recipes\/random@
-- 
-- Get Random Recipes
-- 
-- Find random (popular) recipes.
-- 
getRandomRecipes 
  :: SpoonacularRequest GetRandomRecipes MimeNoContent A.Value MimeJSON
getRandomRecipes =
  _mkRequest "GET" ["/recipes/random"]

data GetRandomRecipes  

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows for displaying with proper attribution.
instance HasOptionalParam GetRandomRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)

-- | /Optional Param/ "tags" - The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must adhere to.
instance HasOptionalParam GetRandomRecipes Tags where
  applyOptionalParam req (Tags xs) =
    req `setQuery` toQuery ("tags", Just xs)

-- | /Optional Param/ "number" - The number of random recipes to be returned (between 1 and 100).
instance HasOptionalParam GetRandomRecipes Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetRandomRecipes MimeJSON


-- *** getRecipeEquipmentByID

-- | @GET \/recipes\/{id}\/equipmentWidget.json@
-- 
-- Get Recipe Equipment by ID
-- 
-- Get a recipe's equipment list.
-- 
getRecipeEquipmentByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipeEquipmentByID MimeNoContent A.Value MimeJSON
getRecipeEquipmentByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/equipmentWidget.json"]

data GetRecipeEquipmentByID  
-- | @application/json@
instance Produces GetRecipeEquipmentByID MimeJSON


-- *** getRecipeInformation

-- | @GET \/recipes\/{id}\/information@
-- 
-- Get Recipe Information
-- 
-- Get information about a recipe.
-- 
getRecipeInformation 
  :: Id -- ^ "id" -  The id of the recipe.
  -> SpoonacularRequest GetRecipeInformation MimeNoContent A.Value MimeJSON
getRecipeInformation (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/information"]

data GetRecipeInformation  

-- | /Optional Param/ "includeNutrition" - Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
instance HasOptionalParam GetRecipeInformation IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `setQuery` toQuery ("includeNutrition", Just xs)
-- | @application/json@
instance Produces GetRecipeInformation MimeJSON


-- *** getRecipeInformationBulk

-- | @GET \/recipes\/informationBulk@
-- 
-- Get Recipe Information Bulk
-- 
-- Get information about multiple recipes at once. That is equivalent of calling the Get Recipe Information endpoint multiple times but is faster.
-- 
getRecipeInformationBulk 
  :: Ids -- ^ "ids" -  A comma-separated list of recipe ids.
  -> SpoonacularRequest GetRecipeInformationBulk MimeNoContent A.Value MimeJSON
getRecipeInformationBulk (Ids ids) =
  _mkRequest "GET" ["/recipes/informationBulk"]
    `setQuery` toQuery ("ids", Just ids)

data GetRecipeInformationBulk  

-- | /Optional Param/ "includeNutrition" - Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
instance HasOptionalParam GetRecipeInformationBulk IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `setQuery` toQuery ("includeNutrition", Just xs)
-- | @application/json@
instance Produces GetRecipeInformationBulk MimeJSON


-- *** getRecipeIngredientsByID

-- | @GET \/recipes\/{id}\/ingredientWidget.json@
-- 
-- Get Recipe Ingredients by ID
-- 
-- Get a recipe's ingredient list.
-- 
getRecipeIngredientsByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipeIngredientsByID MimeNoContent A.Value MimeJSON
getRecipeIngredientsByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/ingredientWidget.json"]

data GetRecipeIngredientsByID  
-- | @application/json@
instance Produces GetRecipeIngredientsByID MimeJSON


-- *** getRecipeNutritionByID

-- | @GET \/recipes\/{id}\/nutritionWidget.json@
-- 
-- Get Recipe Nutrition by ID
-- 
-- Get a recipe's nutrition widget data.
-- 
getRecipeNutritionByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipeNutritionByID MimeNoContent A.Value MimeJSON
getRecipeNutritionByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionWidget.json"]

data GetRecipeNutritionByID  
-- | @application/json@
instance Produces GetRecipeNutritionByID MimeJSON


-- *** getRecipePriceBreakdownByID

-- | @GET \/recipes\/{id}\/priceBreakdownWidget.json@
-- 
-- Get Recipe Price Breakdown by ID
-- 
-- Get a recipe's price breakdown data.
-- 
getRecipePriceBreakdownByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipePriceBreakdownByID MimeNoContent A.Value MimeJSON
getRecipePriceBreakdownByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/priceBreakdownWidget.json"]

data GetRecipePriceBreakdownByID  
-- | @application/json@
instance Produces GetRecipePriceBreakdownByID MimeJSON


-- *** getSimilarRecipes

-- | @GET \/recipes\/{id}\/similar@
-- 
-- Get Similar Recipes
-- 
-- Find recipes which are similar to the given one.
-- 
getSimilarRecipes 
  :: Id -- ^ "id" -  The id of the source recipe to which similar recipes should be found.
  -> SpoonacularRequest GetSimilarRecipes MimeNoContent A.Value MimeJSON
getSimilarRecipes (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/similar"]

data GetSimilarRecipes  

-- | /Optional Param/ "number" - The number of random recipes to be returned (between 1 and 100).
instance HasOptionalParam GetSimilarRecipes Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetSimilarRecipes MimeJSON


-- *** getWineDescription

-- | @GET \/food\/wine\/description@
-- 
-- Get Wine Description
-- 
-- Get the description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
-- 
getWineDescription 
  :: Wine -- ^ "wine" -  The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  -> SpoonacularRequest GetWineDescription MimeNoContent A.Value MimeJSON
getWineDescription (Wine wine) =
  _mkRequest "GET" ["/food/wine/description"]
    `setQuery` toQuery ("wine", Just wine)

data GetWineDescription  
-- | @application/json@
instance Produces GetWineDescription MimeJSON


-- *** getWinePairing

-- | @GET \/food\/wine\/pairing@
-- 
-- Get Wine Pairing
-- 
-- Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
-- 
getWinePairing 
  :: Food -- ^ "food" -  The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
  -> SpoonacularRequest GetWinePairing MimeNoContent A.Value MimeJSON
getWinePairing (Food food) =
  _mkRequest "GET" ["/food/wine/pairing"]
    `setQuery` toQuery ("food", Just food)

data GetWinePairing  

-- | /Optional Param/ "maxPrice" - The maximum price for the specific wine recommendation in USD.
instance HasOptionalParam GetWinePairing MaxPrice where
  applyOptionalParam req (MaxPrice xs) =
    req `setQuery` toQuery ("maxPrice", Just xs)
-- | @application/json@
instance Produces GetWinePairing MimeJSON


-- *** getWineRecommendation

-- | @GET \/food\/wine\/recommendation@
-- 
-- Get Wine Recommendation
-- 
-- Get a specific wine recommendation (concrete product) for a given wine, e.g. \"merlot\".
-- 
getWineRecommendation 
  :: Wine -- ^ "wine" -  The name of the wine to get a specific product recommendation for.
  -> SpoonacularRequest GetWineRecommendation MimeNoContent A.Value MimeJSON
getWineRecommendation (Wine wine) =
  _mkRequest "GET" ["/food/wine/recommendation"]
    `setQuery` toQuery ("wine", Just wine)

data GetWineRecommendation  

-- | /Optional Param/ "maxPrice" - The maximum price for the specific wine recommendation in USD.
instance HasOptionalParam GetWineRecommendation MaxPrice where
  applyOptionalParam req (MaxPrice xs) =
    req `setQuery` toQuery ("maxPrice", Just xs)

-- | /Optional Param/ "minRating" - The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
instance HasOptionalParam GetWineRecommendation MinRating where
  applyOptionalParam req (MinRating xs) =
    req `setQuery` toQuery ("minRating", Just xs)

-- | /Optional Param/ "number" - The number of wine recommendations expected (between 1 and 100).
instance HasOptionalParam GetWineRecommendation Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetWineRecommendation MimeJSON


-- *** guessNutritionByDishName

-- | @GET \/recipes\/guessNutrition@
-- 
-- Guess Nutrition by Dish Name
-- 
-- Guess the macro nutrients of a dish given its title.
-- 
guessNutritionByDishName 
  :: Title -- ^ "title" -  The title of the dish.
  -> SpoonacularRequest GuessNutritionByDishName MimeNoContent A.Value MimeJSON
guessNutritionByDishName (Title title) =
  _mkRequest "GET" ["/recipes/guessNutrition"]
    `setQuery` toQuery ("title", Just title)

data GuessNutritionByDishName  
-- | @application/json@
instance Produces GuessNutritionByDishName MimeJSON


-- *** mapIngredientsToGroceryProducts

-- | @POST \/food\/ingredients\/map@
-- 
-- Map Ingredients to Grocery Products
-- 
-- Map a set of ingredients to products you can buy in the grocery store.
-- 
mapIngredientsToGroceryProducts 
  :: (Consumes MapIngredientsToGroceryProducts MimeJSON, MimeRender MimeJSON Body)
  => Body -- ^ "body"
  -> SpoonacularRequest MapIngredientsToGroceryProducts MimeJSON A.Value MimeJSON
mapIngredientsToGroceryProducts body =
  _mkRequest "POST" ["/food/ingredients/map"]
    `setBodyParam` body

data MapIngredientsToGroceryProducts 
instance HasBodyParam MapIngredientsToGroceryProducts Body 

-- | @application/json@
instance Consumes MapIngredientsToGroceryProducts MimeJSON

-- | @application/json@
instance Produces MapIngredientsToGroceryProducts MimeJSON


-- *** parseIngredients

-- | @POST \/recipes\/parseIngredients@
-- 
-- Parse Ingredients
-- 
-- Extract an ingredient from plain text.
-- 
parseIngredients 
  :: (Consumes ParseIngredients MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings that you can make from the ingredients.
  -> SpoonacularRequest ParseIngredients MimeFormUrlEncoded A.Value MimeJSON
parseIngredients (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/parseIngredients"]
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data ParseIngredients  

-- | /Optional Param/ "includeNutrition" - Whether nutrition data should be added to correctly parsed ingredients.
instance HasOptionalParam ParseIngredients IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `addForm` toForm ("includeNutrition", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes ParseIngredients MimeFormUrlEncoded

-- | @application/json@
instance Produces ParseIngredients MimeJSON


-- *** quickAnswer

-- | @GET \/recipes\/quickAnswer@
-- 
-- Quick Answer
-- 
-- Answer a nutrition related natural language question.
-- 
quickAnswer 
  :: Q -- ^ "q" -  The nutrition-related question.
  -> SpoonacularRequest QuickAnswer MimeNoContent A.Value MimeJSON
quickAnswer (Q q) =
  _mkRequest "GET" ["/recipes/quickAnswer"]
    `setQuery` toQuery ("q", Just q)

data QuickAnswer  
-- | @application/json@
instance Produces QuickAnswer MimeJSON


-- *** searchFoodVideos

-- | @GET \/food\/videos\/search@
-- 
-- Search Food Videos
-- 
-- Find recipe and other food related videos.
-- 
searchFoodVideos 
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchFoodVideos MimeNoContent A.Value MimeJSON
searchFoodVideos (Query query) =
  _mkRequest "GET" ["/food/videos/search"]
    `setQuery` toQuery ("query", Just query)

data SearchFoodVideos  

-- | /Optional Param/ "type" - The type of the recipes. See a full list of supported meal types.
instance HasOptionalParam SearchFoodVideos ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "cuisine" - The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
instance HasOptionalParam SearchFoodVideos Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `setQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "diet" - The diet to which the recipes must be compliant. See a full list of supported diets.
instance HasOptionalParam SearchFoodVideos Diet where
  applyOptionalParam req (Diet xs) =
    req `setQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "includeIngredients" - A comma-separated list of ingredients that should/must be contained in the recipe.
instance HasOptionalParam SearchFoodVideos IncludeIngredients where
  applyOptionalParam req (IncludeIngredients xs) =
    req `setQuery` toQuery ("includeIngredients", Just xs)

-- | /Optional Param/ "excludeIngredients" - A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
instance HasOptionalParam SearchFoodVideos ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `setQuery` toQuery ("excludeIngredients", Just xs)

-- | /Optional Param/ "minLength" - Minimum video length in seconds.
instance HasOptionalParam SearchFoodVideos MinLength where
  applyOptionalParam req (MinLength xs) =
    req `setQuery` toQuery ("minLength", Just xs)

-- | /Optional Param/ "maxLength" - Maximum video length in seconds.
instance HasOptionalParam SearchFoodVideos MaxLength where
  applyOptionalParam req (MaxLength xs) =
    req `setQuery` toQuery ("maxLength", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchFoodVideos Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of results to return (between 1 and 100).
instance HasOptionalParam SearchFoodVideos Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchFoodVideos MimeJSON


-- *** searchGroceryProducts

-- | @GET \/food\/products\/search@
-- 
-- Search Grocery Products
-- 
-- Search packaged food products such as frozen pizza and snickers bars.
-- 
searchGroceryProducts 
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchGroceryProducts MimeNoContent A.Value MimeJSON
searchGroceryProducts (Query query) =
  _mkRequest "GET" ["/food/products/search"]
    `setQuery` toQuery ("query", Just query)

data SearchGroceryProducts  

-- | /Optional Param/ "minCalories" - The minimum number of calories the product must have.
instance HasOptionalParam SearchGroceryProducts MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum number of calories the product can have.
instance HasOptionalParam SearchGroceryProducts MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum number of carbohydrates in grams the product must have.
instance HasOptionalParam SearchGroceryProducts MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum number of carbohydrates in grams the product can have.
instance HasOptionalParam SearchGroceryProducts MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum number of protein in grams the product must have.
instance HasOptionalParam SearchGroceryProducts MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum number of protein in grams the product can have.
instance HasOptionalParam SearchGroceryProducts MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minFat" - The minimum number of fat in grams the product must have.
instance HasOptionalParam SearchGroceryProducts MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum number of fat in grams the product can have.
instance HasOptionalParam SearchGroceryProducts MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "offset" - The offset number for paging (between 0 and 990).
instance HasOptionalParam SearchGroceryProducts Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam SearchGroceryProducts Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchGroceryProducts MimeJSON


-- *** searchGroceryProductsByUPC

-- | @GET \/food\/products\/upc\/{upc}@
-- 
-- Search Grocery Products by UPC
-- 
-- Get information about a food product given its UPC.
-- 
searchGroceryProductsByUPC 
  :: Upc -- ^ "upc" -  The product's UPC.
  -> SpoonacularRequest SearchGroceryProductsByUPC MimeNoContent A.Value MimeJSON
searchGroceryProductsByUPC (Upc upc) =
  _mkRequest "GET" ["/food/products/upc/",toPath upc]

data SearchGroceryProductsByUPC  
-- | @application/json@
instance Produces SearchGroceryProductsByUPC MimeJSON


-- *** searchMenuItems

-- | @GET \/food\/menuItems\/search@
-- 
-- Search Menu Items
-- 
-- Search over 115,000 menu items from over 800 fast food and chain restaurants such as McDonalds Big Mac or Starbucks Mocha.
-- 
searchMenuItems 
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchMenuItems MimeNoContent A.Value MimeJSON
searchMenuItems (Query query) =
  _mkRequest "GET" ["/food/menuItems/search"]
    `setQuery` toQuery ("query", Just query)

data SearchMenuItems  

-- | /Optional Param/ "minCalories" - The minimum number of calories the menu item must have.
instance HasOptionalParam SearchMenuItems MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum number of calories the menu item can have.
instance HasOptionalParam SearchMenuItems MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum number of carbohydrates in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum number of carbohydrates in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum number of protein in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum number of protein in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minFat" - The minimum number of fat in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum number of fat in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "offset" - The offset number for paging (between 0 and 990).
instance HasOptionalParam SearchMenuItems Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 10).
instance HasOptionalParam SearchMenuItems Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchMenuItems MimeJSON


-- *** searchRecipes

-- | @GET \/recipes\/search@
-- 
-- Search Recipes
-- 
-- Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \"Search Recipes Complex\" endpoint for much more flexibility.
-- 
searchRecipes 
  :: Query -- ^ "query" -  The (natural language) recipe search query.
  -> SpoonacularRequest SearchRecipes MimeNoContent A.Value MimeJSON
searchRecipes (Query query) =
  _mkRequest "GET" ["/recipes/search"]
    `setQuery` toQuery ("query", Just query)

data SearchRecipes  

-- | /Optional Param/ "cuisine" - The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
instance HasOptionalParam SearchRecipes Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `setQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "diet" - The diet to which the recipes must be compliant. See a full list of supported diets.
instance HasOptionalParam SearchRecipes Diet where
  applyOptionalParam req (Diet xs) =
    req `setQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "excludeIngredients" - An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
instance HasOptionalParam SearchRecipes ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `setQuery` toQuery ("excludeIngredients", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
instance HasOptionalParam SearchRecipes Intolerances where
  applyOptionalParam req (Intolerances xs) =
    req `setQuery` toQuery ("intolerances", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchRecipes Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of results to return (between 1 and 100).
instance HasOptionalParam SearchRecipes Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows for displaying with proper attribution.
instance HasOptionalParam SearchRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)

-- | /Optional Param/ "instructionsRequired" - Whether the recipes must have instructions.
instance HasOptionalParam SearchRecipes InstructionsRequired where
  applyOptionalParam req (InstructionsRequired xs) =
    req `setQuery` toQuery ("instructionsRequired", Just xs)
-- | @application/json@
instance Produces SearchRecipes MimeJSON


-- *** searchRecipesByIngredients

-- | @GET \/recipes\/findByIngredients@
-- 
-- Search Recipes by Ingredients
-- 
-- Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a \"what's in your fridge\" API endpoint.
-- 
searchRecipesByIngredients 
  :: Ingredients -- ^ "ingredients" -  A comma-separated list of ingredients that the recipes should contain.
  -> SpoonacularRequest SearchRecipesByIngredients MimeNoContent A.Value MimeJSON
searchRecipesByIngredients (Ingredients ingredients) =
  _mkRequest "GET" ["/recipes/findByIngredients"]
    `setQuery` toQuery ("ingredients", Just ingredients)

data SearchRecipesByIngredients  

-- | /Optional Param/ "number" - The maximal number of recipes to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchRecipesByIngredients Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows for displaying with proper attribution.
instance HasOptionalParam SearchRecipesByIngredients LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)

-- | /Optional Param/ "ranking" - Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
instance HasOptionalParam SearchRecipesByIngredients Ranking where
  applyOptionalParam req (Ranking xs) =
    req `setQuery` toQuery ("ranking", Just xs)

-- | /Optional Param/ "ignorePantry" - Whether to ignore pantry ingredients such as water, salt, flour etc.
instance HasOptionalParam SearchRecipesByIngredients IgnorePantry where
  applyOptionalParam req (IgnorePantry xs) =
    req `setQuery` toQuery ("ignorePantry", Just xs)
-- | @application/json@
instance Produces SearchRecipesByIngredients MimeJSON


-- *** searchRecipesByNutrients

-- | @GET \/recipes\/findByNutrients@
-- 
-- Search Recipes by Nutrients
-- 
-- Find a set of recipes that adhere to the given nutritional limits. All the returned recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
-- 
searchRecipesByNutrients 
  :: SpoonacularRequest SearchRecipesByNutrients MimeNoContent A.Value MimeJSON
searchRecipesByNutrients =
  _mkRequest "GET" ["/recipes/findByNutrients"]

data SearchRecipesByNutrients  

-- | /Optional Param/ "minCarbs" - The minimum number of carbohydrates in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum number of carbohydrates in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum number of protein in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum number of protein in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minCalories" - The minimum number of calories the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum number of calories the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minFat" - The minimum number of fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum number of fat in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "minAlcohol" - The minimum number of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinAlcohol where
  applyOptionalParam req (MinAlcohol xs) =
    req `setQuery` toQuery ("minAlcohol", Just xs)

-- | /Optional Param/ "maxAlcohol" - The maximum number of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxAlcohol where
  applyOptionalParam req (MaxAlcohol xs) =
    req `setQuery` toQuery ("maxAlcohol", Just xs)

-- | /Optional Param/ "minCaffeine" - The minimum number of milligrams of caffeine the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCaffeine where
  applyOptionalParam req (MinCaffeine xs) =
    req `setQuery` toQuery ("minCaffeine", Just xs)

-- | /Optional Param/ "maxCaffeine" - The maximum number of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxCaffeine where
  applyOptionalParam req (MaxCaffeine xs) =
    req `setQuery` toQuery ("maxCaffeine", Just xs)

-- | /Optional Param/ "minCopper" - The minimum number of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCopper where
  applyOptionalParam req (MinCopper xs) =
    req `setQuery` toQuery ("minCopper", Just xs)

-- | /Optional Param/ "maxCopper" - The maximum number of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxCopper where
  applyOptionalParam req (MaxCopper xs) =
    req `setQuery` toQuery ("maxCopper", Just xs)

-- | /Optional Param/ "minCalcium" - The minimum number of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCalcium where
  applyOptionalParam req (MinCalcium xs) =
    req `setQuery` toQuery ("minCalcium", Just xs)

-- | /Optional Param/ "maxCalcium" - The maximum number of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxCalcium where
  applyOptionalParam req (MaxCalcium xs) =
    req `setQuery` toQuery ("maxCalcium", Just xs)

-- | /Optional Param/ "minCholine" - The minimum number of choline in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCholine where
  applyOptionalParam req (MinCholine xs) =
    req `setQuery` toQuery ("minCholine", Just xs)

-- | /Optional Param/ "maxCholine" - The maximum number of choline in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCholine where
  applyOptionalParam req (MaxCholine xs) =
    req `setQuery` toQuery ("maxCholine", Just xs)

-- | /Optional Param/ "minCholesterol" - The minimum number of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCholesterol where
  applyOptionalParam req (MinCholesterol xs) =
    req `setQuery` toQuery ("minCholesterol", Just xs)

-- | /Optional Param/ "maxCholesterol" - The maximum number of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxCholesterol where
  applyOptionalParam req (MaxCholesterol xs) =
    req `setQuery` toQuery ("maxCholesterol", Just xs)

-- | /Optional Param/ "minFluoride" - The minimum number of fluoride in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFluoride where
  applyOptionalParam req (MinFluoride xs) =
    req `setQuery` toQuery ("minFluoride", Just xs)

-- | /Optional Param/ "maxFluoride" - The maximum number of fluoride in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFluoride where
  applyOptionalParam req (MaxFluoride xs) =
    req `setQuery` toQuery ("maxFluoride", Just xs)

-- | /Optional Param/ "minSaturatedFat" - The minimum number of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSaturatedFat where
  applyOptionalParam req (MinSaturatedFat xs) =
    req `setQuery` toQuery ("minSaturatedFat", Just xs)

-- | /Optional Param/ "maxSaturatedFat" - The maximum number of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxSaturatedFat where
  applyOptionalParam req (MaxSaturatedFat xs) =
    req `setQuery` toQuery ("maxSaturatedFat", Just xs)

-- | /Optional Param/ "minVitaminA" - The minimum number of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminA where
  applyOptionalParam req (MinVitaminA xs) =
    req `setQuery` toQuery ("minVitaminA", Just xs)

-- | /Optional Param/ "maxVitaminA" - The maximum number of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminA where
  applyOptionalParam req (MaxVitaminA xs) =
    req `setQuery` toQuery ("maxVitaminA", Just xs)

-- | /Optional Param/ "minVitaminC" - The minimum number of Vitamin C milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminC where
  applyOptionalParam req (MinVitaminC xs) =
    req `setQuery` toQuery ("minVitaminC", Just xs)

-- | /Optional Param/ "maxVitaminC" - The maximum number of Vitamin C in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminC where
  applyOptionalParam req (MaxVitaminC xs) =
    req `setQuery` toQuery ("maxVitaminC", Just xs)

-- | /Optional Param/ "minVitaminD" - The minimum number of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminD where
  applyOptionalParam req (MinVitaminD xs) =
    req `setQuery` toQuery ("minVitaminD", Just xs)

-- | /Optional Param/ "maxVitaminD" - The maximum number of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminD where
  applyOptionalParam req (MaxVitaminD xs) =
    req `setQuery` toQuery ("maxVitaminD", Just xs)

-- | /Optional Param/ "minVitaminE" - The minimum number of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminE where
  applyOptionalParam req (MinVitaminE xs) =
    req `setQuery` toQuery ("minVitaminE", Just xs)

-- | /Optional Param/ "maxVitaminE" - The maximum number of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminE where
  applyOptionalParam req (MaxVitaminE xs) =
    req `setQuery` toQuery ("maxVitaminE", Just xs)

-- | /Optional Param/ "minVitaminK" - The minimum number of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminK where
  applyOptionalParam req (MinVitaminK xs) =
    req `setQuery` toQuery ("minVitaminK", Just xs)

-- | /Optional Param/ "maxVitaminK" - The maximum number of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminK where
  applyOptionalParam req (MaxVitaminK xs) =
    req `setQuery` toQuery ("maxVitaminK", Just xs)

-- | /Optional Param/ "minVitaminB1" - The minimum number of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB1 where
  applyOptionalParam req (MinVitaminB1 xs) =
    req `setQuery` toQuery ("minVitaminB1", Just xs)

-- | /Optional Param/ "maxVitaminB1" - The maximum number of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB1 where
  applyOptionalParam req (MaxVitaminB1 xs) =
    req `setQuery` toQuery ("maxVitaminB1", Just xs)

-- | /Optional Param/ "minVitaminB2" - The minimum number of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB2 where
  applyOptionalParam req (MinVitaminB2 xs) =
    req `setQuery` toQuery ("minVitaminB2", Just xs)

-- | /Optional Param/ "maxVitaminB2" - The maximum number of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB2 where
  applyOptionalParam req (MaxVitaminB2 xs) =
    req `setQuery` toQuery ("maxVitaminB2", Just xs)

-- | /Optional Param/ "minVitaminB5" - The minimum number of Vitamin B5 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB5 where
  applyOptionalParam req (MinVitaminB5 xs) =
    req `setQuery` toQuery ("minVitaminB5", Just xs)

-- | /Optional Param/ "maxVitaminB5" - The maximum number of Vitamin B5 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB5 where
  applyOptionalParam req (MaxVitaminB5 xs) =
    req `setQuery` toQuery ("maxVitaminB5", Just xs)

-- | /Optional Param/ "minVitaminB3" - The minimum number of Vitamin B3 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB3 where
  applyOptionalParam req (MinVitaminB3 xs) =
    req `setQuery` toQuery ("minVitaminB3", Just xs)

-- | /Optional Param/ "maxVitaminB3" - The maximum number of Vitamin B3 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB3 where
  applyOptionalParam req (MaxVitaminB3 xs) =
    req `setQuery` toQuery ("maxVitaminB3", Just xs)

-- | /Optional Param/ "minVitaminB6" - The minimum number of Vitamin B6 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB6 where
  applyOptionalParam req (MinVitaminB6 xs) =
    req `setQuery` toQuery ("minVitaminB6", Just xs)

-- | /Optional Param/ "maxVitaminB6" - The maximum number of Vitamin B6 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB6 where
  applyOptionalParam req (MaxVitaminB6 xs) =
    req `setQuery` toQuery ("maxVitaminB6", Just xs)

-- | /Optional Param/ "minVitaminB12" - The minimum number of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB12 where
  applyOptionalParam req (MinVitaminB12 xs) =
    req `setQuery` toQuery ("minVitaminB12", Just xs)

-- | /Optional Param/ "maxVitaminB12" - The maximum number of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB12 where
  applyOptionalParam req (MaxVitaminB12 xs) =
    req `setQuery` toQuery ("maxVitaminB12", Just xs)

-- | /Optional Param/ "minFiber" - The minimum number of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFiber where
  applyOptionalParam req (MinFiber xs) =
    req `setQuery` toQuery ("minFiber", Just xs)

-- | /Optional Param/ "maxFiber" - The maximum number of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxFiber where
  applyOptionalParam req (MaxFiber xs) =
    req `setQuery` toQuery ("maxFiber", Just xs)

-- | /Optional Param/ "minFolate" - The minimum number of folate in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFolate where
  applyOptionalParam req (MinFolate xs) =
    req `setQuery` toQuery ("minFolate", Just xs)

-- | /Optional Param/ "maxFolate" - The maximum number of folate in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxFolate where
  applyOptionalParam req (MaxFolate xs) =
    req `setQuery` toQuery ("maxFolate", Just xs)

-- | /Optional Param/ "minFolicAcid" - The minimum number of folic acid in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFolicAcid where
  applyOptionalParam req (MinFolicAcid xs) =
    req `setQuery` toQuery ("minFolicAcid", Just xs)

-- | /Optional Param/ "maxFolicAcid" - The maximum number of folic acid in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxFolicAcid where
  applyOptionalParam req (MaxFolicAcid xs) =
    req `setQuery` toQuery ("maxFolicAcid", Just xs)

-- | /Optional Param/ "minIodine" - The minimum number of Iodine in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinIodine where
  applyOptionalParam req (MinIodine xs) =
    req `setQuery` toQuery ("minIodine", Just xs)

-- | /Optional Param/ "maxIodine" - The maximum number of iodine in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxIodine where
  applyOptionalParam req (MaxIodine xs) =
    req `setQuery` toQuery ("maxIodine", Just xs)

-- | /Optional Param/ "minIron" - The minimum number of iron in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinIron where
  applyOptionalParam req (MinIron xs) =
    req `setQuery` toQuery ("minIron", Just xs)

-- | /Optional Param/ "maxIron" - The maximum number of iron in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxIron where
  applyOptionalParam req (MaxIron xs) =
    req `setQuery` toQuery ("maxIron", Just xs)

-- | /Optional Param/ "minMagnesium" - The minimum number of magnesium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinMagnesium where
  applyOptionalParam req (MinMagnesium xs) =
    req `setQuery` toQuery ("minMagnesium", Just xs)

-- | /Optional Param/ "maxMagnesium" - The maximum number of magnesium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxMagnesium where
  applyOptionalParam req (MaxMagnesium xs) =
    req `setQuery` toQuery ("maxMagnesium", Just xs)

-- | /Optional Param/ "minManganese" - The minimum number of manganese in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinManganese where
  applyOptionalParam req (MinManganese xs) =
    req `setQuery` toQuery ("minManganese", Just xs)

-- | /Optional Param/ "maxManganese" - The maximum number of manganese in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxManganese where
  applyOptionalParam req (MaxManganese xs) =
    req `setQuery` toQuery ("maxManganese", Just xs)

-- | /Optional Param/ "minPhosphorus" - The minimum number of phosphorus in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinPhosphorus where
  applyOptionalParam req (MinPhosphorus xs) =
    req `setQuery` toQuery ("minPhosphorus", Just xs)

-- | /Optional Param/ "maxPhosphorus" - The maximum number of phosphorus in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxPhosphorus where
  applyOptionalParam req (MaxPhosphorus xs) =
    req `setQuery` toQuery ("maxPhosphorus", Just xs)

-- | /Optional Param/ "minPotassium" - The minimum number of potassium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinPotassium where
  applyOptionalParam req (MinPotassium xs) =
    req `setQuery` toQuery ("minPotassium", Just xs)

-- | /Optional Param/ "maxPotassium" - The maximum number of potassium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxPotassium where
  applyOptionalParam req (MaxPotassium xs) =
    req `setQuery` toQuery ("maxPotassium", Just xs)

-- | /Optional Param/ "minSelenium" - The minimum number of selenium in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSelenium where
  applyOptionalParam req (MinSelenium xs) =
    req `setQuery` toQuery ("minSelenium", Just xs)

-- | /Optional Param/ "maxSelenium" - The maximum number of selenium in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxSelenium where
  applyOptionalParam req (MaxSelenium xs) =
    req `setQuery` toQuery ("maxSelenium", Just xs)

-- | /Optional Param/ "minSodium" - The minimum number of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSodium where
  applyOptionalParam req (MinSodium xs) =
    req `setQuery` toQuery ("minSodium", Just xs)

-- | /Optional Param/ "maxSodium" - The maximum number of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxSodium where
  applyOptionalParam req (MaxSodium xs) =
    req `setQuery` toQuery ("maxSodium", Just xs)

-- | /Optional Param/ "minSugar" - The minimum number of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSugar where
  applyOptionalParam req (MinSugar xs) =
    req `setQuery` toQuery ("minSugar", Just xs)

-- | /Optional Param/ "maxSugar" - The maximum number of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MaxSugar where
  applyOptionalParam req (MaxSugar xs) =
    req `setQuery` toQuery ("maxSugar", Just xs)

-- | /Optional Param/ "minZinc" - The minimum number of zinc in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinZinc where
  applyOptionalParam req (MinZinc xs) =
    req `setQuery` toQuery ("minZinc", Just xs)

-- | /Optional Param/ "maxZinc" - The maximum number of zinc in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxZinc where
  applyOptionalParam req (MaxZinc xs) =
    req `setQuery` toQuery ("maxZinc", Just xs)

-- | /Optional Param/ "offset" - The offset number for paging (between 0 and 990).
instance HasOptionalParam SearchRecipesByNutrients Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam SearchRecipesByNutrients Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "random" - If true, every request will give you a random set of recipes within the requested limits.
instance HasOptionalParam SearchRecipesByNutrients Random where
  applyOptionalParam req (Random xs) =
    req `setQuery` toQuery ("random", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows for displaying with proper attribution.
instance HasOptionalParam SearchRecipesByNutrients LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces SearchRecipesByNutrients MimeJSON


-- *** searchRecipesComplex

-- | @GET \/recipes\/complexSearch@
-- 
-- Search Recipes Complex
-- 
-- Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: Since this method combines searching by query, by ingredients, and by nutrients in one endpoint.
-- 
searchRecipesComplex 
  :: Query -- ^ "query" -  The (natural language) recipe search query.
  -> SpoonacularRequest SearchRecipesComplex MimeNoContent A.Value MimeJSON
searchRecipesComplex (Query query) =
  _mkRequest "GET" ["/recipes/complexSearch"]
    `setQuery` toQuery ("query", Just query)

data SearchRecipesComplex  

-- | /Optional Param/ "cuisine" - The cuisine(s) of the recipes. One or more comma separated (will be iterpreted as 'OR'). See a full list of supported cuisines.
instance HasOptionalParam SearchRecipesComplex Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `setQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "excludeCuisine" - The cuisine(s) the recipes must not match. One or more comma separated (will be iterpreted as 'AND'). See a full list of supported cuisines.
instance HasOptionalParam SearchRecipesComplex ExcludeCuisine where
  applyOptionalParam req (ExcludeCuisine xs) =
    req `setQuery` toQuery ("excludeCuisine", Just xs)

-- | /Optional Param/ "diet" - The diet to which the recipes must be compliant. See a full list of supported diets.
instance HasOptionalParam SearchRecipesComplex Diet where
  applyOptionalParam req (Diet xs) =
    req `setQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
instance HasOptionalParam SearchRecipesComplex Intolerances where
  applyOptionalParam req (Intolerances xs) =
    req `setQuery` toQuery ("intolerances", Just xs)

-- | /Optional Param/ "equipment" - The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
instance HasOptionalParam SearchRecipesComplex Equipment where
  applyOptionalParam req (Equipment xs) =
    req `setQuery` toQuery ("equipment", Just xs)

-- | /Optional Param/ "includeIngredients" - A comma-separated list of ingredients that should/must be contained in the recipe.
instance HasOptionalParam SearchRecipesComplex IncludeIngredients where
  applyOptionalParam req (IncludeIngredients xs) =
    req `setQuery` toQuery ("includeIngredients", Just xs)

-- | /Optional Param/ "excludeIngredients" - A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
instance HasOptionalParam SearchRecipesComplex ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `setQuery` toQuery ("excludeIngredients", Just xs)

-- | /Optional Param/ "type" - The type of the recipes. See a full list of supported meal types.
instance HasOptionalParam SearchRecipesComplex ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "instructionsRequired" - Whether the recipes must have instructions.
instance HasOptionalParam SearchRecipesComplex InstructionsRequired where
  applyOptionalParam req (InstructionsRequired xs) =
    req `setQuery` toQuery ("instructionsRequired", Just xs)

-- | /Optional Param/ "fillIngredients" - Add information about the used and missing ingredients in each recipe.
instance HasOptionalParam SearchRecipesComplex FillIngredients where
  applyOptionalParam req (FillIngredients xs) =
    req `setQuery` toQuery ("fillIngredients", Just xs)

-- | /Optional Param/ "addRecipeInformation" - If set to true, you get more information about the recipes returned. This saves the calls to get recipe information.
instance HasOptionalParam SearchRecipesComplex AddRecipeInformation where
  applyOptionalParam req (AddRecipeInformation xs) =
    req `setQuery` toQuery ("addRecipeInformation", Just xs)

-- | /Optional Param/ "author" - The username of the recipe author.
instance HasOptionalParam SearchRecipesComplex Author where
  applyOptionalParam req (Author xs) =
    req `setQuery` toQuery ("author", Just xs)

-- | /Optional Param/ "tags" - User defined tags that have to match.
instance HasOptionalParam SearchRecipesComplex Tags where
  applyOptionalParam req (Tags xs) =
    req `setQuery` toQuery ("tags", Just xs)

-- | /Optional Param/ "titleMatch" - A text that has to match in the title of the recipes.
instance HasOptionalParam SearchRecipesComplex TitleMatch where
  applyOptionalParam req (TitleMatch xs) =
    req `setQuery` toQuery ("titleMatch", Just xs)

-- | /Optional Param/ "sort" - The strategy to sort recipes by. See a full list of supported sorting options.
instance HasOptionalParam SearchRecipesComplex Sort where
  applyOptionalParam req (Sort xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "sortDirection" - The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
instance HasOptionalParam SearchRecipesComplex SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `setQuery` toQuery ("sortDirection", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum number of carbohydrates in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum number of carbohydrates in grams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum number of protein in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum number of protein in grams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minCalories" - The minimum number of calories the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum number of calories the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minFat" - The minimum number of fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum number of fat in grams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "minAlcohol" - The minimum number of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinAlcohol where
  applyOptionalParam req (MinAlcohol xs) =
    req `setQuery` toQuery ("minAlcohol", Just xs)

-- | /Optional Param/ "maxAlcohol" - The maximum number of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxAlcohol where
  applyOptionalParam req (MaxAlcohol xs) =
    req `setQuery` toQuery ("maxAlcohol", Just xs)

-- | /Optional Param/ "minCaffeine" - The minimum number of milligrams of caffeine the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinCaffeine where
  applyOptionalParam req (MinCaffeine xs) =
    req `setQuery` toQuery ("minCaffeine", Just xs)

-- | /Optional Param/ "maxCaffeine" - The maximum number of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxCaffeine where
  applyOptionalParam req (MaxCaffeine xs) =
    req `setQuery` toQuery ("maxCaffeine", Just xs)

-- | /Optional Param/ "minCopper" - The minimum number of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinCopper where
  applyOptionalParam req (MinCopper xs) =
    req `setQuery` toQuery ("minCopper", Just xs)

-- | /Optional Param/ "maxCopper" - The maximum number of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxCopper where
  applyOptionalParam req (MaxCopper xs) =
    req `setQuery` toQuery ("maxCopper", Just xs)

-- | /Optional Param/ "minCalcium" - The minimum number of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinCalcium where
  applyOptionalParam req (MinCalcium xs) =
    req `setQuery` toQuery ("minCalcium", Just xs)

-- | /Optional Param/ "maxCalcium" - The maximum number of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxCalcium where
  applyOptionalParam req (MaxCalcium xs) =
    req `setQuery` toQuery ("maxCalcium", Just xs)

-- | /Optional Param/ "minCholine" - The minimum number of choline in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinCholine where
  applyOptionalParam req (MinCholine xs) =
    req `setQuery` toQuery ("minCholine", Just xs)

-- | /Optional Param/ "maxCholine" - The maximum number of choline in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxCholine where
  applyOptionalParam req (MaxCholine xs) =
    req `setQuery` toQuery ("maxCholine", Just xs)

-- | /Optional Param/ "minCholesterol" - The minimum number of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinCholesterol where
  applyOptionalParam req (MinCholesterol xs) =
    req `setQuery` toQuery ("minCholesterol", Just xs)

-- | /Optional Param/ "maxCholesterol" - The maximum number of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxCholesterol where
  applyOptionalParam req (MaxCholesterol xs) =
    req `setQuery` toQuery ("maxCholesterol", Just xs)

-- | /Optional Param/ "minFluoride" - The minimum number of fluoride in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinFluoride where
  applyOptionalParam req (MinFluoride xs) =
    req `setQuery` toQuery ("minFluoride", Just xs)

-- | /Optional Param/ "maxFluoride" - The maximum number of fluoride in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxFluoride where
  applyOptionalParam req (MaxFluoride xs) =
    req `setQuery` toQuery ("maxFluoride", Just xs)

-- | /Optional Param/ "minSaturatedFat" - The minimum number of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinSaturatedFat where
  applyOptionalParam req (MinSaturatedFat xs) =
    req `setQuery` toQuery ("minSaturatedFat", Just xs)

-- | /Optional Param/ "maxSaturatedFat" - The maximum number of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxSaturatedFat where
  applyOptionalParam req (MaxSaturatedFat xs) =
    req `setQuery` toQuery ("maxSaturatedFat", Just xs)

-- | /Optional Param/ "minVitaminA" - The minimum number of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminA where
  applyOptionalParam req (MinVitaminA xs) =
    req `setQuery` toQuery ("minVitaminA", Just xs)

-- | /Optional Param/ "maxVitaminA" - The maximum number of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminA where
  applyOptionalParam req (MaxVitaminA xs) =
    req `setQuery` toQuery ("maxVitaminA", Just xs)

-- | /Optional Param/ "minVitaminC" - The minimum number of Vitamin C milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminC where
  applyOptionalParam req (MinVitaminC xs) =
    req `setQuery` toQuery ("minVitaminC", Just xs)

-- | /Optional Param/ "maxVitaminC" - The maximum number of Vitamin C in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminC where
  applyOptionalParam req (MaxVitaminC xs) =
    req `setQuery` toQuery ("maxVitaminC", Just xs)

-- | /Optional Param/ "minVitaminD" - The minimum number of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminD where
  applyOptionalParam req (MinVitaminD xs) =
    req `setQuery` toQuery ("minVitaminD", Just xs)

-- | /Optional Param/ "maxVitaminD" - The maximum number of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminD where
  applyOptionalParam req (MaxVitaminD xs) =
    req `setQuery` toQuery ("maxVitaminD", Just xs)

-- | /Optional Param/ "minVitaminE" - The minimum number of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminE where
  applyOptionalParam req (MinVitaminE xs) =
    req `setQuery` toQuery ("minVitaminE", Just xs)

-- | /Optional Param/ "maxVitaminE" - The maximum number of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminE where
  applyOptionalParam req (MaxVitaminE xs) =
    req `setQuery` toQuery ("maxVitaminE", Just xs)

-- | /Optional Param/ "minVitaminK" - The minimum number of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminK where
  applyOptionalParam req (MinVitaminK xs) =
    req `setQuery` toQuery ("minVitaminK", Just xs)

-- | /Optional Param/ "maxVitaminK" - The maximum number of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminK where
  applyOptionalParam req (MaxVitaminK xs) =
    req `setQuery` toQuery ("maxVitaminK", Just xs)

-- | /Optional Param/ "minVitaminB1" - The minimum number of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminB1 where
  applyOptionalParam req (MinVitaminB1 xs) =
    req `setQuery` toQuery ("minVitaminB1", Just xs)

-- | /Optional Param/ "maxVitaminB1" - The maximum number of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminB1 where
  applyOptionalParam req (MaxVitaminB1 xs) =
    req `setQuery` toQuery ("maxVitaminB1", Just xs)

-- | /Optional Param/ "minVitaminB2" - The minimum number of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminB2 where
  applyOptionalParam req (MinVitaminB2 xs) =
    req `setQuery` toQuery ("minVitaminB2", Just xs)

-- | /Optional Param/ "maxVitaminB2" - The maximum number of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminB2 where
  applyOptionalParam req (MaxVitaminB2 xs) =
    req `setQuery` toQuery ("maxVitaminB2", Just xs)

-- | /Optional Param/ "minVitaminB5" - The minimum number of Vitamin B5 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminB5 where
  applyOptionalParam req (MinVitaminB5 xs) =
    req `setQuery` toQuery ("minVitaminB5", Just xs)

-- | /Optional Param/ "maxVitaminB5" - The maximum number of Vitamin B5 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminB5 where
  applyOptionalParam req (MaxVitaminB5 xs) =
    req `setQuery` toQuery ("maxVitaminB5", Just xs)

-- | /Optional Param/ "minVitaminB3" - The minimum number of Vitamin B3 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminB3 where
  applyOptionalParam req (MinVitaminB3 xs) =
    req `setQuery` toQuery ("minVitaminB3", Just xs)

-- | /Optional Param/ "maxVitaminB3" - The maximum number of Vitamin B3 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminB3 where
  applyOptionalParam req (MaxVitaminB3 xs) =
    req `setQuery` toQuery ("maxVitaminB3", Just xs)

-- | /Optional Param/ "minVitaminB6" - The minimum number of Vitamin B6 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminB6 where
  applyOptionalParam req (MinVitaminB6 xs) =
    req `setQuery` toQuery ("minVitaminB6", Just xs)

-- | /Optional Param/ "maxVitaminB6" - The maximum number of Vitamin B6 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminB6 where
  applyOptionalParam req (MaxVitaminB6 xs) =
    req `setQuery` toQuery ("maxVitaminB6", Just xs)

-- | /Optional Param/ "minVitaminB12" - The minimum number of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinVitaminB12 where
  applyOptionalParam req (MinVitaminB12 xs) =
    req `setQuery` toQuery ("minVitaminB12", Just xs)

-- | /Optional Param/ "maxVitaminB12" - The maximum number of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxVitaminB12 where
  applyOptionalParam req (MaxVitaminB12 xs) =
    req `setQuery` toQuery ("maxVitaminB12", Just xs)

-- | /Optional Param/ "minFiber" - The minimum number of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinFiber where
  applyOptionalParam req (MinFiber xs) =
    req `setQuery` toQuery ("minFiber", Just xs)

-- | /Optional Param/ "maxFiber" - The maximum number of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxFiber where
  applyOptionalParam req (MaxFiber xs) =
    req `setQuery` toQuery ("maxFiber", Just xs)

-- | /Optional Param/ "minFolate" - The minimum number of folate in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinFolate where
  applyOptionalParam req (MinFolate xs) =
    req `setQuery` toQuery ("minFolate", Just xs)

-- | /Optional Param/ "maxFolate" - The maximum number of folate in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxFolate where
  applyOptionalParam req (MaxFolate xs) =
    req `setQuery` toQuery ("maxFolate", Just xs)

-- | /Optional Param/ "minFolicAcid" - The minimum number of folic acid in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinFolicAcid where
  applyOptionalParam req (MinFolicAcid xs) =
    req `setQuery` toQuery ("minFolicAcid", Just xs)

-- | /Optional Param/ "maxFolicAcid" - The maximum number of folic acid in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxFolicAcid where
  applyOptionalParam req (MaxFolicAcid xs) =
    req `setQuery` toQuery ("maxFolicAcid", Just xs)

-- | /Optional Param/ "minIodine" - The minimum number of Iodine in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinIodine where
  applyOptionalParam req (MinIodine xs) =
    req `setQuery` toQuery ("minIodine", Just xs)

-- | /Optional Param/ "maxIodine" - The maximum number of iodine in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxIodine where
  applyOptionalParam req (MaxIodine xs) =
    req `setQuery` toQuery ("maxIodine", Just xs)

-- | /Optional Param/ "minIron" - The minimum number of iron in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinIron where
  applyOptionalParam req (MinIron xs) =
    req `setQuery` toQuery ("minIron", Just xs)

-- | /Optional Param/ "maxIron" - The maximum number of iron in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxIron where
  applyOptionalParam req (MaxIron xs) =
    req `setQuery` toQuery ("maxIron", Just xs)

-- | /Optional Param/ "minMagnesium" - The minimum number of magnesium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinMagnesium where
  applyOptionalParam req (MinMagnesium xs) =
    req `setQuery` toQuery ("minMagnesium", Just xs)

-- | /Optional Param/ "maxMagnesium" - The maximum number of magnesium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxMagnesium where
  applyOptionalParam req (MaxMagnesium xs) =
    req `setQuery` toQuery ("maxMagnesium", Just xs)

-- | /Optional Param/ "minManganese" - The minimum number of manganese in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinManganese where
  applyOptionalParam req (MinManganese xs) =
    req `setQuery` toQuery ("minManganese", Just xs)

-- | /Optional Param/ "maxManganese" - The maximum number of manganese in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxManganese where
  applyOptionalParam req (MaxManganese xs) =
    req `setQuery` toQuery ("maxManganese", Just xs)

-- | /Optional Param/ "minPhosphorus" - The minimum number of phosphorus in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinPhosphorus where
  applyOptionalParam req (MinPhosphorus xs) =
    req `setQuery` toQuery ("minPhosphorus", Just xs)

-- | /Optional Param/ "maxPhosphorus" - The maximum number of phosphorus in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxPhosphorus where
  applyOptionalParam req (MaxPhosphorus xs) =
    req `setQuery` toQuery ("maxPhosphorus", Just xs)

-- | /Optional Param/ "minPotassium" - The minimum number of potassium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinPotassium where
  applyOptionalParam req (MinPotassium xs) =
    req `setQuery` toQuery ("minPotassium", Just xs)

-- | /Optional Param/ "maxPotassium" - The maximum number of potassium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxPotassium where
  applyOptionalParam req (MaxPotassium xs) =
    req `setQuery` toQuery ("maxPotassium", Just xs)

-- | /Optional Param/ "minSelenium" - The minimum number of selenium in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinSelenium where
  applyOptionalParam req (MinSelenium xs) =
    req `setQuery` toQuery ("minSelenium", Just xs)

-- | /Optional Param/ "maxSelenium" - The maximum number of selenium in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxSelenium where
  applyOptionalParam req (MaxSelenium xs) =
    req `setQuery` toQuery ("maxSelenium", Just xs)

-- | /Optional Param/ "minSodium" - The minimum number of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinSodium where
  applyOptionalParam req (MinSodium xs) =
    req `setQuery` toQuery ("minSodium", Just xs)

-- | /Optional Param/ "maxSodium" - The maximum number of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxSodium where
  applyOptionalParam req (MaxSodium xs) =
    req `setQuery` toQuery ("maxSodium", Just xs)

-- | /Optional Param/ "minSugar" - The minimum number of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinSugar where
  applyOptionalParam req (MinSugar xs) =
    req `setQuery` toQuery ("minSugar", Just xs)

-- | /Optional Param/ "maxSugar" - The maximum number of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MaxSugar where
  applyOptionalParam req (MaxSugar xs) =
    req `setQuery` toQuery ("maxSugar", Just xs)

-- | /Optional Param/ "minZinc" - The minimum number of zinc in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesComplex MinZinc where
  applyOptionalParam req (MinZinc xs) =
    req `setQuery` toQuery ("minZinc", Just xs)

-- | /Optional Param/ "maxZinc" - The maximum number of zinc in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesComplex MaxZinc where
  applyOptionalParam req (MaxZinc xs) =
    req `setQuery` toQuery ("maxZinc", Just xs)

-- | /Optional Param/ "offset" - The offset number for paging (between 0 and 990).
instance HasOptionalParam SearchRecipesComplex Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 10).
instance HasOptionalParam SearchRecipesComplex Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows for displaying with proper attribution.
instance HasOptionalParam SearchRecipesComplex LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces SearchRecipesComplex MimeJSON


-- *** searchSiteContent

-- | @GET \/food\/site\/search@
-- 
-- Search Site Content
-- 
-- Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggests on spoonacular.com. This is a suggest API so you can send partial strings as queries.
-- 
searchSiteContent 
  :: Query -- ^ "query" -  The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
  -> SpoonacularRequest SearchSiteContent MimeNoContent A.Value MimeJSON
searchSiteContent (Query query) =
  _mkRequest "GET" ["/food/site/search"]
    `setQuery` toQuery ("query", Just query)

data SearchSiteContent  
-- | @application/json@
instance Produces SearchSiteContent MimeJSON


-- *** summarizeRecipe

-- | @GET \/recipes\/{id}\/summary@
-- 
-- Summarize Recipe
-- 
-- Summarize the recipe in a short text.
-- 
summarizeRecipe 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest SummarizeRecipe MimeNoContent A.Value MimeJSON
summarizeRecipe (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/summary"]

data SummarizeRecipe  
-- | @application/json@
instance Produces SummarizeRecipe MimeJSON


-- *** talkToChatbot

-- | @GET \/food\/converse@
-- 
-- Talk to Chatbot
-- 
-- This endpoint can be used to have a conversation about food with the spoonacular chat bot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
-- 
talkToChatbot 
  :: ParamText -- ^ "text" -  The request / question / answer from the user to the chat bot.
  -> SpoonacularRequest TalkToChatbot MimeNoContent A.Value MimeJSON
talkToChatbot (ParamText text) =
  _mkRequest "GET" ["/food/converse"]
    `setQuery` toQuery ("text", Just text)

data TalkToChatbot  

-- | /Optional Param/ "contextId" - An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
instance HasOptionalParam TalkToChatbot ContextId where
  applyOptionalParam req (ContextId xs) =
    req `setQuery` toQuery ("contextId", Just xs)
-- | @application/json@
instance Produces TalkToChatbot MimeJSON


-- *** visualizeEquipment

-- | @POST \/recipes\/visualizeEquipment@
-- 
-- Visualize Equipment
-- 
-- Visualize the equipment used to make a recipe.
-- 
visualizeEquipment 
  :: (Consumes VisualizeEquipment MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings.
  -> SpoonacularRequest VisualizeEquipment MimeFormUrlEncoded Text MimeTextHtml
visualizeEquipment (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/visualizeEquipment"]
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data VisualizeEquipment  

-- | /Optional Param/ "view" - Either \\\"grid\\\" or \\\"list\\\" as visualization of the equipment.
instance HasOptionalParam VisualizeEquipment View where
  applyOptionalParam req (View xs) =
    req `addForm` toForm ("view", xs)

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeEquipment DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizeEquipment ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeEquipment MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeEquipment MimeTextHtml


-- *** visualizeIngredients

-- | @POST \/recipes\/visualizeIngredients@
-- 
-- Visualize Ingredients
-- 
-- Visualize ingredients of a recipe.
-- 
visualizeIngredients 
  :: (Consumes VisualizeIngredients MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings.
  -> SpoonacularRequest VisualizeIngredients MimeFormUrlEncoded Text MimeTextHtml
visualizeIngredients (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/visualizeIngredients"]
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data VisualizeIngredients  

-- | /Optional Param/ "measure" - The initial measure, either \\\"metric\\\" or \\\"us\\\".
instance HasOptionalParam VisualizeIngredients Measure where
  applyOptionalParam req (Measure xs) =
    req `addForm` toForm ("measure", xs)

-- | /Optional Param/ "view" - Either \\\"grid\\\" or \\\"list\\\" as visualization of the equipment.
instance HasOptionalParam VisualizeIngredients View where
  applyOptionalParam req (View xs) =
    req `addForm` toForm ("view", xs)

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeIngredients DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizeIngredients ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeIngredients MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeIngredients MimeTextHtml


-- *** visualizeMenuItemNutritionByID

-- | @GET \/food\/menuItems\/{id}\/nutritionWidget@
-- 
-- Visualize Menu Item Nutrition by ID
-- 
-- Visualize a menu items' nutrition data.
-- 
visualizeMenuItemNutritionByID 
  :: Id -- ^ "id" -  The menu item id.
  -> SpoonacularRequest VisualizeMenuItemNutritionByID MimeNoContent Text MimeTextHtml
visualizeMenuItemNutritionByID (Id id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id,"/nutritionWidget"]

data VisualizeMenuItemNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeMenuItemNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeMenuItemNutritionByID MimeTextHtml


-- *** visualizePriceBreakdown

-- | @POST \/recipes\/visualizePriceEstimator@
-- 
-- Visualize Price Breakdown
-- 
-- Visualize the price breakdown of a recipe.
-- 
visualizePriceBreakdown 
  :: (Consumes VisualizePriceBreakdown MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings.
  -> SpoonacularRequest VisualizePriceBreakdown MimeFormUrlEncoded Text MimeTextHtml
visualizePriceBreakdown (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/visualizePriceEstimator"]
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data VisualizePriceBreakdown  

-- | /Optional Param/ "mode" - The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
instance HasOptionalParam VisualizePriceBreakdown Mode where
  applyOptionalParam req (Mode xs) =
    req `addForm` toForm ("mode", xs)

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizePriceBreakdown DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizePriceBreakdown ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizePriceBreakdown MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizePriceBreakdown MimeTextHtml


-- *** visualizeProductNutritionByID

-- | @GET \/food\/products\/{id}\/nutritionWidget@
-- 
-- Visualize Product Nutrition by ID
-- 
-- Visualize a grocery product's nutritional information.
-- 
visualizeProductNutritionByID 
  :: Id -- ^ "id" -  The id of the product.
  -> SpoonacularRequest VisualizeProductNutritionByID MimeNoContent Text MimeTextHtml
visualizeProductNutritionByID (Id id) =
  _mkRequest "GET" ["/food/products/",toPath id,"/nutritionWidget"]

data VisualizeProductNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeProductNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeProductNutritionByID MimeTextHtml


-- *** visualizeRecipeEquipmentByID

-- | @GET \/recipes\/{id}\/equipmentWidget@
-- 
-- Visualize Recipe Equipment by ID
-- 
-- Visualize a recipe's equipment list.
-- 
visualizeRecipeEquipmentByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipeEquipmentByID MimeNoContent Text MimeTextHtml
visualizeRecipeEquipmentByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/equipmentWidget"]

data VisualizeRecipeEquipmentByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeEquipmentByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeEquipmentByID MimeTextHtml


-- *** visualizeRecipeIngredientsByID

-- | @GET \/recipes\/{id}\/ingredientWidget@
-- 
-- Visualize Recipe Ingredients by ID
-- 
-- Visualize a recipe's ingredient list.
-- 
visualizeRecipeIngredientsByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipeIngredientsByID MimeNoContent Text MimeTextHtml
visualizeRecipeIngredientsByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/ingredientWidget"]

data VisualizeRecipeIngredientsByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeIngredientsByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeIngredientsByID MimeTextHtml


-- *** visualizeRecipeNutrition

-- | @POST \/recipes\/visualizeNutrition@
-- 
-- Visualize Recipe Nutrition
-- 
-- Visualize a recipe's nutrition data.
-- 
visualizeRecipeNutrition 
  :: (Consumes VisualizeRecipeNutrition MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings.
  -> SpoonacularRequest VisualizeRecipeNutrition MimeFormUrlEncoded Text MimeTextHtml
visualizeRecipeNutrition (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/visualizeNutrition"]
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data VisualizeRecipeNutrition  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeNutrition DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizeRecipeNutrition ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeRecipeNutrition MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeRecipeNutrition MimeTextHtml


-- *** visualizeRecipeNutritionByID

-- | @GET \/recipes\/{id}\/nutritionWidget@
-- 
-- Visualize Recipe Nutrition by ID
-- 
-- Visualize a recipe's nutritional information.
-- 
visualizeRecipeNutritionByID 
  :: Id -- ^ "id" -  The id of the product.
  -> SpoonacularRequest VisualizeRecipeNutritionByID MimeNoContent Text MimeTextHtml
visualizeRecipeNutritionByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionWidget"]

data VisualizeRecipeNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeNutritionByID MimeTextHtml


-- *** visualizeRecipePriceBreakdownByID

-- | @GET \/recipes\/{id}\/priceBreakdownWidget@
-- 
-- Visualize Recipe Price Breakdown by ID
-- 
-- Visualize a recipe's price breakdown.
-- 
visualizeRecipePriceBreakdownByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipePriceBreakdownByID MimeNoContent Text MimeTextHtml
visualizeRecipePriceBreakdownByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/priceBreakdownWidget"]

data VisualizeRecipePriceBreakdownByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipePriceBreakdownByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipePriceBreakdownByID MimeTextHtml

