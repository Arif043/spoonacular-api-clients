{-
   spoonacular API

   The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   OpenAPI Version: 3.0.0
   spoonacular API API version: 1.0
   Contact: david@spoonacular.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Spoonacular.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Spoonacular.API.ApiDefault where

import Spoonacular.Core
import Spoonacular.MimeTypes
import Spoonacular.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Default

-- *** addToMealPlan

-- | @POST \/mealplanner\/{username}\/items@
-- 
-- Add to Meal Plan
-- 
-- Add an item to the user's meal plan.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
addToMealPlan 
  :: (Consumes AddToMealPlan , MimeRender  InlineObject11)
  => InlineObject11 -- ^ "inlineObject11"
  -> Username -- ^ "username" -  The username.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest AddToMealPlan  A.Value MimeJSON
addToMealPlan inlineObject11 (Username username) (Hash hash) =
  _mkRequest "POST" ["/mealplanner/",toPath username,"/items"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` inlineObject11
    `setQuery` toQuery ("hash", Just hash)

data AddToMealPlan 
instance HasBodyParam AddToMealPlan InlineObject11 

-- | @@
instance Consumes AddToMealPlan 

-- | @application/json@
instance Produces AddToMealPlan MimeJSON


-- *** addToShoppingList

-- | @POST \/mealplanner\/{username}\/shopping-list\/items@
-- 
-- Add to Shopping List
-- 
-- Add an item to the current shopping list of a user.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
addToShoppingList 
  :: (Consumes AddToShoppingList , MimeRender  InlineObject14)
  => InlineObject14 -- ^ "inlineObject14"
  -> Username -- ^ "username" -  The username.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest AddToShoppingList  A.Value MimeJSON
addToShoppingList inlineObject14 (Username username) (Hash hash) =
  _mkRequest "POST" ["/mealplanner/",toPath username,"/shopping-list/items"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` inlineObject14
    `setQuery` toQuery ("hash", Just hash)

data AddToShoppingList 
instance HasBodyParam AddToShoppingList InlineObject14 

-- | @@
instance Consumes AddToShoppingList 

-- | @application/json@
instance Produces AddToShoppingList MimeJSON


-- *** analyzeARecipeSearchQuery

-- | @GET \/recipes\/queries\/analyze@
-- 
-- Analyze a Recipe Search Query
-- 
-- Parse a recipe search query to find out its intention.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
analyzeARecipeSearchQuery 
  :: Q -- ^ "q" -  The recipe search query.
  -> SpoonacularRequest AnalyzeARecipeSearchQuery MimeNoContent A.Value MimeJSON
analyzeARecipeSearchQuery (Q q) =
  _mkRequest "GET" ["/recipes/queries/analyze"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("q", Just q)

data AnalyzeARecipeSearchQuery  
-- | @application/json@
instance Produces AnalyzeARecipeSearchQuery MimeJSON


-- *** analyzeRecipeInstructions

-- | @POST \/recipes\/analyzeInstructions@
-- 
-- Analyze Recipe Instructions
-- 
-- This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
analyzeRecipeInstructions 
  :: (Consumes AnalyzeRecipeInstructions MimeFormUrlEncoded)
  => Instructions -- ^ "instructions" -  The instructions to be analyzed.
  -> SpoonacularRequest AnalyzeRecipeInstructions MimeFormUrlEncoded A.Value MimeJSON
analyzeRecipeInstructions (Instructions instructions) =
  _mkRequest "POST" ["/recipes/analyzeInstructions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("instructions", instructions)

data AnalyzeRecipeInstructions  

-- | @application/x-www-form-urlencoded@
instance Consumes AnalyzeRecipeInstructions MimeFormUrlEncoded

-- | @application/json@
instance Produces AnalyzeRecipeInstructions MimeJSON


-- *** autocompleteIngredientSearch

-- | @GET \/food\/ingredients\/autocomplete@
-- 
-- Autocomplete Ingredient Search
-- 
-- Autocomplete the entry of an ingredient.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
autocompleteIngredientSearch 
  :: Query -- ^ "query" -  The partial or full ingredient name.
  -> SpoonacularRequest AutocompleteIngredientSearch MimeNoContent A.Value MimeJSON
autocompleteIngredientSearch (Query query) =
  _mkRequest "GET" ["/food/ingredients/autocomplete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data AutocompleteIngredientSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 100).
instance HasOptionalParam AutocompleteIngredientSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "metaInformation" - Whether to return more meta information about the ingredients.
instance HasOptionalParam AutocompleteIngredientSearch MetaInformation where
  applyOptionalParam req (MetaInformation xs) =
    req `setQuery` toQuery ("metaInformation", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
instance HasOptionalParam AutocompleteIngredientSearch Intolerances where
  applyOptionalParam req (Intolerances xs) =
    req `setQuery` toQuery ("intolerances", Just xs)
-- | @application/json@
instance Produces AutocompleteIngredientSearch MimeJSON


-- *** autocompleteMenuItemSearch

-- | @GET \/food\/menuItems\/suggest@
-- 
-- Autocomplete Menu Item Search
-- 
-- Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
autocompleteMenuItemSearch 
  :: Query -- ^ "query" -  The (partial) search query.
  -> SpoonacularRequest AutocompleteMenuItemSearch MimeNoContent A.Value MimeJSON
autocompleteMenuItemSearch (Query query) =
  _mkRequest "GET" ["/food/menuItems/suggest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data AutocompleteMenuItemSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 25).
instance HasOptionalParam AutocompleteMenuItemSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteMenuItemSearch MimeJSON


-- *** autocompleteProductSearch

-- | @GET \/food\/products\/suggest@
-- 
-- Autocomplete Product Search
-- 
-- Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
autocompleteProductSearch 
  :: Query -- ^ "query" -  The (partial) search query.
  -> SpoonacularRequest AutocompleteProductSearch MimeNoContent A.Value MimeJSON
autocompleteProductSearch (Query query) =
  _mkRequest "GET" ["/food/products/suggest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data AutocompleteProductSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 25).
instance HasOptionalParam AutocompleteProductSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteProductSearch MimeJSON


-- *** autocompleteRecipeSearch

-- | @GET \/recipes\/autocomplete@
-- 
-- Autocomplete Recipe Search
-- 
-- Autocomplete a partial input to suggest possible recipe names.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
autocompleteRecipeSearch 
  :: Query -- ^ "query" -  The query to be autocompleted.
  -> SpoonacularRequest AutocompleteRecipeSearch MimeNoContent A.Value MimeJSON
autocompleteRecipeSearch (Query query) =
  _mkRequest "GET" ["/recipes/autocomplete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data AutocompleteRecipeSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 25).
instance HasOptionalParam AutocompleteRecipeSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteRecipeSearch MimeJSON


-- *** classifyCuisine

-- | @POST \/recipes\/cuisine@
-- 
-- Classify Cuisine
-- 
-- Classify the recipe's cuisine.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
classifyCuisine 
  :: (Consumes ClassifyCuisine MimeFormUrlEncoded)
  => Title -- ^ "title" -  The title of the recipe.
  -> IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  -> SpoonacularRequest ClassifyCuisine MimeFormUrlEncoded A.Value MimeJSON
classifyCuisine (Title title) (IngredientList ingredientList) =
  _mkRequest "POST" ["/recipes/cuisine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("title", title)
    `addForm` toForm ("ingredientList", ingredientList)

data ClassifyCuisine  

-- | @application/x-www-form-urlencoded@
instance Consumes ClassifyCuisine MimeFormUrlEncoded

-- | @application/json@
instance Produces ClassifyCuisine MimeJSON


-- *** classifyGroceryProduct

-- | @POST \/food\/products\/classify@
-- 
-- Classify Grocery Product
-- 
-- This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
classifyGroceryProduct 
  :: (Consumes ClassifyGroceryProduct MimeJSON, MimeRender MimeJSON InlineObject9)
  => InlineObject9 -- ^ "inlineObject9"
  -> SpoonacularRequest ClassifyGroceryProduct MimeJSON A.Value MimeJSON
classifyGroceryProduct inlineObject9 =
  _mkRequest "POST" ["/food/products/classify"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` inlineObject9

data ClassifyGroceryProduct 
instance HasBodyParam ClassifyGroceryProduct InlineObject9 

-- | /Optional Param/ "locale" - The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
instance HasOptionalParam ClassifyGroceryProduct Locale where
  applyOptionalParam req (Locale xs) =
    req `setQuery` toQuery ("locale", Just xs)

-- | @application/json@
instance Consumes ClassifyGroceryProduct MimeJSON

-- | @application/json@
instance Produces ClassifyGroceryProduct MimeJSON


-- *** classifyGroceryProductBulk

-- | @POST \/food\/products\/classifyBatch@
-- 
-- Classify Grocery Product Bulk
-- 
-- Provide a set of product jsons, get back classified products.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
classifyGroceryProductBulk 
  :: (Consumes ClassifyGroceryProductBulk MimeJSON, MimeRender MimeJSON AValue)
  => AValue -- ^ "aValue"
  -> SpoonacularRequest ClassifyGroceryProductBulk MimeJSON A.Value MimeJSON
classifyGroceryProductBulk aValue =
  _mkRequest "POST" ["/food/products/classifyBatch"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` aValue

data ClassifyGroceryProductBulk 
instance HasBodyParam ClassifyGroceryProductBulk AValue 

-- | /Optional Param/ "locale" - The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
instance HasOptionalParam ClassifyGroceryProductBulk Locale where
  applyOptionalParam req (Locale xs) =
    req `setQuery` toQuery ("locale", Just xs)

-- | @application/json@
instance Consumes ClassifyGroceryProductBulk MimeJSON

-- | @application/json@
instance Produces ClassifyGroceryProductBulk MimeJSON


-- *** clearMealPlanDay

-- | @DELETE \/mealplanner\/{username}\/day\/{date}@
-- 
-- Clear Meal Plan Day
-- 
-- Delete all planned items from the user's meal plan for a specific day.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
clearMealPlanDay 
  :: (Consumes ClearMealPlanDay , MimeRender  InlineObject10)
  => InlineObject10 -- ^ "inlineObject10"
  -> Username -- ^ "username" -  The username.
  -> ParamDate -- ^ "date" -  The date in the format yyyy-mm-dd.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest ClearMealPlanDay  A.Value MimeJSON
clearMealPlanDay inlineObject10 (Username username) (ParamDate date) (Hash hash) =
  _mkRequest "DELETE" ["/mealplanner/",toPath username,"/day/",toPath date]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` inlineObject10
    `setQuery` toQuery ("hash", Just hash)

data ClearMealPlanDay 
instance HasBodyParam ClearMealPlanDay InlineObject10 

-- | @@
instance Consumes ClearMealPlanDay 

-- | @application/json@
instance Produces ClearMealPlanDay MimeJSON


-- *** computeGlycemicLoad

-- | @POST \/food\/ingredients\/glycemicLoad@
-- 
-- Compute Glycemic Load
-- 
-- Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
computeGlycemicLoad 
  :: (Consumes ComputeGlycemicLoad MimeJSON, MimeRender MimeJSON Body)
  => Body -- ^ "body"
  -> SpoonacularRequest ComputeGlycemicLoad MimeJSON A.Value MimeJSON
computeGlycemicLoad body =
  _mkRequest "POST" ["/food/ingredients/glycemicLoad"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` body

data ComputeGlycemicLoad 
instance HasBodyParam ComputeGlycemicLoad Body 

-- | @application/json@
instance Consumes ComputeGlycemicLoad MimeJSON

-- | @application/json@
instance Produces ComputeGlycemicLoad MimeJSON


-- *** connectUser

-- | @POST \/users\/connect@
-- 
-- Connect User
-- 
-- In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
connectUser 
  :: (Consumes ConnectUser , MimeRender  Body)
  => Body -- ^ "body"
  -> SpoonacularRequest ConnectUser  A.Value MimeJSON
connectUser body =
  _mkRequest "POST" ["/users/connect"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` body

data ConnectUser 
instance HasBodyParam ConnectUser Body 

-- | @@
instance Consumes ConnectUser 

-- | @application/json@
instance Produces ConnectUser MimeJSON


-- *** convertAmounts

-- | @GET \/recipes\/convert@
-- 
-- Convert Amounts
-- 
-- Convert amounts like \"2 cups of flour to grams\".
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
convertAmounts 
  :: IngredientName -- ^ "ingredientName" -  The ingredient which you want to convert.
  -> SourceAmount -- ^ "sourceAmount" -  The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
  -> SourceUnit -- ^ "sourceUnit" -  The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  -> TargetUnit -- ^ "targetUnit" -  The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  -> SpoonacularRequest ConvertAmounts MimeNoContent A.Value MimeJSON
convertAmounts (IngredientName ingredientName) (SourceAmount sourceAmount) (SourceUnit sourceUnit) (TargetUnit targetUnit) =
  _mkRequest "GET" ["/recipes/convert"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("ingredientName", Just ingredientName)
    `setQuery` toQuery ("sourceAmount", Just sourceAmount)
    `setQuery` toQuery ("sourceUnit", Just sourceUnit)
    `setQuery` toQuery ("targetUnit", Just targetUnit)

data ConvertAmounts  
-- | @application/json@
instance Produces ConvertAmounts MimeJSON


-- *** createRecipeCard

-- | @POST \/recipes\/visualizeRecipe@
-- 
-- Create Recipe Card
-- 
-- Generate a recipe card for a recipe.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
createRecipeCard 
  :: (Consumes CreateRecipeCard MimeMultipartFormData)
  => Title -- ^ "title" -  The title of the recipe.
  -> Image -- ^ "image" -  The binary image of the recipe as jpg.
  -> Ingredients -- ^ "ingredients" -  The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  -> Instructions -- ^ "instructions" -  The instructions to make the recipe. One step per line (separate lines with \\\\n).
  -> ReadyInMinutes -- ^ "readyInMinutes" -  The number of minutes it takes to get the recipe on the table.
  -> Servings -- ^ "servings" -  The number of servings the recipe makes.
  -> Mask -- ^ "mask" -  The mask to put over the recipe image (\\\"ellipseMask\\\", \\\"diamondMask\\\", \\\"starMask\\\", \\\"heartMask\\\", \\\"potMask\\\", \\\"fishMask\\\").
  -> BackgroundImage -- ^ "backgroundImage" -  The background image (\\\"none\\\",\\\"background1\\\", or \\\"background2\\\").
  -> SpoonacularRequest CreateRecipeCard MimeMultipartFormData A.Value MimeJSON
createRecipeCard (Title title) (Image image) (Ingredients ingredients) (Instructions instructions) (ReadyInMinutes readyInMinutes) (Servings servings) (Mask mask) (BackgroundImage backgroundImage) =
  _mkRequest "POST" ["/recipes/visualizeRecipe"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `_addMultiFormPart` NH.partLBS "title" (mimeRender' MimeMultipartFormData title)
    `_addMultiFormPart` NH.partFileSource "image" image
    `_addMultiFormPart` NH.partLBS "ingredients" (mimeRender' MimeMultipartFormData ingredients)
    `_addMultiFormPart` NH.partLBS "instructions" (mimeRender' MimeMultipartFormData instructions)
    `_addMultiFormPart` NH.partLBS "readyInMinutes" (mimeRender' MimeMultipartFormData readyInMinutes)
    `_addMultiFormPart` NH.partLBS "servings" (mimeRender' MimeMultipartFormData servings)
    `_addMultiFormPart` NH.partLBS "mask" (mimeRender' MimeMultipartFormData mask)
    `_addMultiFormPart` NH.partLBS "backgroundImage" (mimeRender' MimeMultipartFormData backgroundImage)

data CreateRecipeCard  

-- | /Optional Param/ "author" - The author of the recipe.
instance HasOptionalParam CreateRecipeCard Author where
  applyOptionalParam req (Author xs) =
    req `_addMultiFormPart` NH.partLBS "author" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "backgroundColor" - The background color for the recipe card as a hex-string.
instance HasOptionalParam CreateRecipeCard BackgroundColor where
  applyOptionalParam req (BackgroundColor xs) =
    req `_addMultiFormPart` NH.partLBS "backgroundColor" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "fontColor" - The font color for the recipe card as a hex-string.
instance HasOptionalParam CreateRecipeCard FontColor where
  applyOptionalParam req (FontColor xs) =
    req `_addMultiFormPart` NH.partLBS "fontColor" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "source" - The source of the recipe.
instance HasOptionalParam CreateRecipeCard Source where
  applyOptionalParam req (Source xs) =
    req `_addMultiFormPart` NH.partLBS "source" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes CreateRecipeCard MimeMultipartFormData

-- | @application/json@
instance Produces CreateRecipeCard MimeJSON


-- *** deleteFromMealPlan

-- | @DELETE \/mealplanner\/{username}\/items\/{id}@
-- 
-- Delete from Meal Plan
-- 
-- Delete an item from the user's meal plan.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
deleteFromMealPlan 
  :: (Consumes DeleteFromMealPlan , MimeRender  InlineObject12)
  => InlineObject12 -- ^ "inlineObject12"
  -> Username -- ^ "username" -  The username.
  -> Id -- ^ "id" -  The shopping list item id.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest DeleteFromMealPlan  A.Value MimeJSON
deleteFromMealPlan inlineObject12 (Username username) (Id id) (Hash hash) =
  _mkRequest "DELETE" ["/mealplanner/",toPath username,"/items/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` inlineObject12
    `setQuery` toQuery ("hash", Just hash)

data DeleteFromMealPlan 
instance HasBodyParam DeleteFromMealPlan InlineObject12 

-- | @@
instance Consumes DeleteFromMealPlan 

-- | @application/json@
instance Produces DeleteFromMealPlan MimeJSON


-- *** deleteFromShoppingList

-- | @DELETE \/mealplanner\/{username}\/shopping-list\/items\/{id}@
-- 
-- Delete from Shopping List
-- 
-- Delete an item from the current shopping list of the user.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
deleteFromShoppingList 
  :: (Consumes DeleteFromShoppingList , MimeRender  InlineObject15)
  => InlineObject15 -- ^ "inlineObject15"
  -> Username -- ^ "username" -  The username.
  -> Id -- ^ "id" -  The shopping list item id.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest DeleteFromShoppingList  A.Value MimeJSON
deleteFromShoppingList inlineObject15 (Username username) (Id id) (Hash hash) =
  _mkRequest "DELETE" ["/mealplanner/",toPath username,"/shopping-list/items/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` inlineObject15
    `setQuery` toQuery ("hash", Just hash)

data DeleteFromShoppingList 
instance HasBodyParam DeleteFromShoppingList InlineObject15 

-- | @@
instance Consumes DeleteFromShoppingList 

-- | @application/json@
instance Produces DeleteFromShoppingList MimeJSON


-- *** detectFoodInText

-- | @POST \/food\/detect@
-- 
-- Detect Food in Text
-- 
-- Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
detectFoodInText 
  :: (Consumes DetectFoodInText MimeFormUrlEncoded)
  => ParamText -- ^ "text" -  The text in which food items, such as dish names and ingredients, should be detected in.
  -> SpoonacularRequest DetectFoodInText MimeFormUrlEncoded A.Value MimeJSON
detectFoodInText (ParamText text) =
  _mkRequest "POST" ["/food/detect"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("text", text)

data DetectFoodInText  

-- | @application/x-www-form-urlencoded@
instance Consumes DetectFoodInText MimeFormUrlEncoded

-- | @application/json@
instance Produces DetectFoodInText MimeJSON


-- *** extractRecipeFromWebsite

-- | @GET \/recipes\/extract@
-- 
-- Extract Recipe from Website
-- 
-- This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
extractRecipeFromWebsite 
  :: Url -- ^ "url" -  The URL of the recipe page.
  -> SpoonacularRequest ExtractRecipeFromWebsite MimeNoContent A.Value MimeJSON
extractRecipeFromWebsite (Url url) =
  _mkRequest "GET" ["/recipes/extract"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("url", Just url)

data ExtractRecipeFromWebsite  

-- | /Optional Param/ "forceExtraction" - If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
instance HasOptionalParam ExtractRecipeFromWebsite ForceExtraction where
  applyOptionalParam req (ForceExtraction xs) =
    req `setQuery` toQuery ("forceExtraction", Just xs)

-- | /Optional Param/ "analyze" - If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
instance HasOptionalParam ExtractRecipeFromWebsite Analyze where
  applyOptionalParam req (Analyze xs) =
    req `setQuery` toQuery ("analyze", Just xs)
-- | @application/json@
instance Produces ExtractRecipeFromWebsite MimeJSON


-- *** generateMealPlan

-- | @GET \/mealplanner\/generate@
-- 
-- Generate Meal Plan
-- 
-- Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
generateMealPlan 
  :: SpoonacularRequest GenerateMealPlan MimeNoContent A.Value MimeJSON
generateMealPlan =
  _mkRequest "GET" ["/mealplanner/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GenerateMealPlan  

-- | /Optional Param/ "timeFrame" - Either for one \"day\" or an entire \"week\".
instance HasOptionalParam GenerateMealPlan TimeFrame where
  applyOptionalParam req (TimeFrame xs) =
    req `setQuery` toQuery ("timeFrame", Just xs)

-- | /Optional Param/ "targetCalories" - What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
instance HasOptionalParam GenerateMealPlan TargetCalories where
  applyOptionalParam req (TargetCalories xs) =
    req `setQuery` toQuery ("targetCalories", Just xs)

-- | /Optional Param/ "diet" - Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
instance HasOptionalParam GenerateMealPlan Diet where
  applyOptionalParam req (Diet xs) =
    req `setQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "exclude" - A comma-separated list of allergens or ingredients that must be excluded.
instance HasOptionalParam GenerateMealPlan Exclude where
  applyOptionalParam req (Exclude xs) =
    req `setQuery` toQuery ("exclude", Just xs)
-- | @application/json@
instance Produces GenerateMealPlan MimeJSON


-- *** generateShoppingList

-- | @POST \/mealplanner\/{username}\/shopping-list\/{start-date}\/{end-date}@
-- 
-- Generate Shopping List
-- 
-- Generate the shopping list for a user from the meal planner in a given time frame.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
generateShoppingList 
  :: (Consumes GenerateShoppingList , MimeRender  InlineObject13)
  => InlineObject13 -- ^ "inlineObject13"
  -> Username -- ^ "username" -  The username.
  -> StartDate -- ^ "startDate" -  The start date in the format yyyy-mm-dd.
  -> EndDate -- ^ "endDate" -  The end date in the format yyyy-mm-dd.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest GenerateShoppingList  A.Value MimeJSON
generateShoppingList inlineObject13 (Username username) (StartDate startDate) (EndDate endDate) (Hash hash) =
  _mkRequest "POST" ["/mealplanner/",toPath username,"/shopping-list/",toPath startDate,"/",toPath endDate]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` inlineObject13
    `setQuery` toQuery ("hash", Just hash)

data GenerateShoppingList 
instance HasBodyParam GenerateShoppingList InlineObject13 

-- | @@
instance Consumes GenerateShoppingList 

-- | @application/json@
instance Produces GenerateShoppingList MimeJSON


-- *** getARandomFoodJoke

-- | @GET \/food\/jokes\/random@
-- 
-- Get a Random Food Joke
-- 
-- Get a random joke that is related to food. Caution: this is an endpoint for adults!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getARandomFoodJoke 
  :: SpoonacularRequest GetARandomFoodJoke MimeNoContent A.Value MimeJSON
getARandomFoodJoke =
  _mkRequest "GET" ["/food/jokes/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetARandomFoodJoke  
-- | @application/json@
instance Produces GetARandomFoodJoke MimeJSON


-- *** getAnalyzedRecipeInstructions

-- | @GET \/recipes\/{id}\/analyzedInstructions@
-- 
-- Get Analyzed Recipe Instructions
-- 
-- Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getAnalyzedRecipeInstructions 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetAnalyzedRecipeInstructions MimeNoContent A.Value MimeJSON
getAnalyzedRecipeInstructions (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/analyzedInstructions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetAnalyzedRecipeInstructions  

-- | /Optional Param/ "stepBreakdown" - Whether to break down the recipe steps even more.
instance HasOptionalParam GetAnalyzedRecipeInstructions StepBreakdown where
  applyOptionalParam req (StepBreakdown xs) =
    req `setQuery` toQuery ("stepBreakdown", Just xs)
-- | @application/json@
instance Produces GetAnalyzedRecipeInstructions MimeJSON


-- *** getComparableProducts

-- | @GET \/food\/products\/upc\/{upc}\/comparable@
-- 
-- Get Comparable Products
-- 
-- Find comparable products to the given one.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getComparableProducts 
  :: Upc -- ^ "upc" -  The UPC of the product for which you want to find comparable products.
  -> SpoonacularRequest GetComparableProducts MimeNoContent A.Value MimeJSON
getComparableProducts (Upc upc) =
  _mkRequest "GET" ["/food/products/upc/",toPath upc,"/comparable"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetComparableProducts  
-- | @application/json@
instance Produces GetComparableProducts MimeJSON


-- *** getConversationSuggests

-- | @GET \/food\/converse\/suggest@
-- 
-- Get Conversation Suggests
-- 
-- This endpoint returns suggestions for things the user can say or ask the chatbot.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getConversationSuggests 
  :: Query -- ^ "query" -  A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
  -> SpoonacularRequest GetConversationSuggests MimeNoContent A.Value MimeJSON
getConversationSuggests (Query query) =
  _mkRequest "GET" ["/food/converse/suggest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data GetConversationSuggests  

-- | /Optional Param/ "number" - The number of suggestions to return (between 1 and 25).
instance HasOptionalParam GetConversationSuggests Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetConversationSuggests MimeJSON


-- *** getDishPairingForWine

-- | @GET \/food\/wine\/dishes@
-- 
-- Get Dish Pairing for Wine
-- 
-- Find a dish that goes well with a given wine.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getDishPairingForWine 
  :: Wine -- ^ "wine" -  The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  -> SpoonacularRequest GetDishPairingForWine MimeNoContent A.Value MimeJSON
getDishPairingForWine (Wine wine) =
  _mkRequest "GET" ["/food/wine/dishes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("wine", Just wine)

data GetDishPairingForWine  
-- | @application/json@
instance Produces GetDishPairingForWine MimeJSON


-- *** getIngredientInformation

-- | @GET \/food\/ingredients\/{id}\/information@
-- 
-- Get Ingredient Information
-- 
-- Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getIngredientInformation 
  :: Id -- ^ "id" -  The ingredient id.
  -> SpoonacularRequest GetIngredientInformation MimeNoContent A.Value MimeJSON
getIngredientInformation (Id id) =
  _mkRequest "GET" ["/food/ingredients/",toPath id,"/information"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetIngredientInformation  

-- | /Optional Param/ "amount" - The amount of this ingredient.
instance HasOptionalParam GetIngredientInformation Amount where
  applyOptionalParam req (Amount xs) =
    req `setQuery` toQuery ("amount", Just xs)

-- | /Optional Param/ "unit" - The unit for the given amount.
instance HasOptionalParam GetIngredientInformation Unit where
  applyOptionalParam req (Unit xs) =
    req `setQuery` toQuery ("unit", Just xs)
-- | @application/json@
instance Produces GetIngredientInformation MimeJSON


-- *** getIngredientSubstitutes

-- | @GET \/food\/ingredients\/substitutes@
-- 
-- Get Ingredient Substitutes
-- 
-- Search for substitutes for a given ingredient.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getIngredientSubstitutes 
  :: IngredientName -- ^ "ingredientName" -  The name of the ingredient you want to replace.
  -> SpoonacularRequest GetIngredientSubstitutes MimeNoContent A.Value MimeJSON
getIngredientSubstitutes (IngredientName ingredientName) =
  _mkRequest "GET" ["/food/ingredients/substitutes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("ingredientName", Just ingredientName)

data GetIngredientSubstitutes  
-- | @application/json@
instance Produces GetIngredientSubstitutes MimeJSON


-- *** getIngredientSubstitutesByID

-- | @GET \/food\/ingredients\/{id}\/substitutes@
-- 
-- Get Ingredient Substitutes by ID
-- 
-- Search for substitutes for a given ingredient.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getIngredientSubstitutesByID 
  :: Id -- ^ "id" -  The id of the ingredient you want substitutes for.
  -> SpoonacularRequest GetIngredientSubstitutesByID MimeNoContent A.Value MimeJSON
getIngredientSubstitutesByID (Id id) =
  _mkRequest "GET" ["/food/ingredients/",toPath id,"/substitutes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetIngredientSubstitutesByID  
-- | @application/json@
instance Produces GetIngredientSubstitutesByID MimeJSON


-- *** getMealPlanTemplate

-- | @GET \/mealplanner\/{username}\/templates\/{id}@
-- 
-- Get Meal Plan Template
-- 
-- Get information about a meal plan template.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getMealPlanTemplate 
  :: Username -- ^ "username" -  The username.
  -> Id -- ^ "id" -  The shopping list item id.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest GetMealPlanTemplate MimeNoContent A.Value MimeJSON
getMealPlanTemplate (Username username) (Id id) (Hash hash) =
  _mkRequest "GET" ["/mealplanner/",toPath username,"/templates/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("hash", Just hash)

data GetMealPlanTemplate  
-- | @application/json@
instance Produces GetMealPlanTemplate MimeJSON


-- *** getMealPlanTemplates

-- | @GET \/mealplanner\/{username}\/templates@
-- 
-- Get Meal Plan Templates
-- 
-- Get meal plan templates from user or public ones.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getMealPlanTemplates 
  :: Username -- ^ "username" -  The username.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest GetMealPlanTemplates MimeNoContent A.Value MimeJSON
getMealPlanTemplates (Username username) (Hash hash) =
  _mkRequest "GET" ["/mealplanner/",toPath username,"/templates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("hash", Just hash)

data GetMealPlanTemplates  
-- | @application/json@
instance Produces GetMealPlanTemplates MimeJSON


-- *** getMealPlanWeek

-- | @GET \/mealplanner\/{username}\/week\/{start-date}@
-- 
-- Get Meal Plan Week
-- 
-- Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getMealPlanWeek 
  :: Username -- ^ "username" -  The username.
  -> StartDate -- ^ "startDate" -  The start date of the meal planned week in the format yyyy-mm-dd.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest GetMealPlanWeek MimeNoContent A.Value MimeJSON
getMealPlanWeek (Username username) (StartDate startDate) (Hash hash) =
  _mkRequest "GET" ["/mealplanner/",toPath username,"/week/",toPath startDate]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("hash", Just hash)

data GetMealPlanWeek  
-- | @application/json@
instance Produces GetMealPlanWeek MimeJSON


-- *** getMenuItemInformation

-- | @GET \/food\/menuItems\/{id}@
-- 
-- Get Menu Item Information
-- 
-- Use a menu item id to get all available information about a menu item, such as nutrition.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getMenuItemInformation 
  :: Id -- ^ "id" -  The menu item id.
  -> SpoonacularRequest GetMenuItemInformation MimeNoContent A.Value MimeJSON
getMenuItemInformation (Id id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetMenuItemInformation  
-- | @application/json@
instance Produces GetMenuItemInformation MimeJSON


-- *** getProductInformation

-- | @GET \/food\/products\/{id}@
-- 
-- Get Product Information
-- 
-- Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getProductInformation 
  :: Id -- ^ "id" -  The id of the packaged food.
  -> SpoonacularRequest GetProductInformation MimeNoContent A.Value MimeJSON
getProductInformation (Id id) =
  _mkRequest "GET" ["/food/products/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetProductInformation  
-- | @application/json@
instance Produces GetProductInformation MimeJSON


-- *** getRandomFoodTrivia

-- | @GET \/food\/trivia\/random@
-- 
-- Get Random Food Trivia
-- 
-- Returns random food trivia.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRandomFoodTrivia 
  :: SpoonacularRequest GetRandomFoodTrivia MimeNoContent A.Value MimeJSON
getRandomFoodTrivia =
  _mkRequest "GET" ["/food/trivia/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRandomFoodTrivia  
-- | @application/json@
instance Produces GetRandomFoodTrivia MimeJSON


-- *** getRandomRecipes

-- | @GET \/recipes\/random@
-- 
-- Get Random Recipes
-- 
-- Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRandomRecipes 
  :: SpoonacularRequest GetRandomRecipes MimeNoContent A.Value MimeJSON
getRandomRecipes =
  _mkRequest "GET" ["/recipes/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRandomRecipes  

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam GetRandomRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)

-- | /Optional Param/ "tags" - The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
instance HasOptionalParam GetRandomRecipes Tags where
  applyOptionalParam req (Tags xs) =
    req `setQuery` toQuery ("tags", Just xs)

-- | /Optional Param/ "number" - The number of random recipes to be returned (between 1 and 100).
instance HasOptionalParam GetRandomRecipes Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetRandomRecipes MimeJSON


-- *** getRecipeEquipmentByID

-- | @GET \/recipes\/{id}\/equipmentWidget.json@
-- 
-- Get Recipe Equipment by ID
-- 
-- Get a recipe's equipment list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeEquipmentByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipeEquipmentByID MimeNoContent A.Value MimeJSON
getRecipeEquipmentByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/equipmentWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeEquipmentByID  
-- | @application/json@
instance Produces GetRecipeEquipmentByID MimeJSON


-- *** getRecipeInformation

-- | @GET \/recipes\/{id}\/information@
-- 
-- Get Recipe Information
-- 
-- Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeInformation 
  :: Id -- ^ "id" -  The id of the recipe.
  -> SpoonacularRequest GetRecipeInformation MimeNoContent A.Value MimeJSON
getRecipeInformation (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/information"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeInformation  

-- | /Optional Param/ "includeNutrition" - Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
instance HasOptionalParam GetRecipeInformation IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `setQuery` toQuery ("includeNutrition", Just xs)
-- | @application/json@
instance Produces GetRecipeInformation MimeJSON


-- *** getRecipeInformationBulk

-- | @GET \/recipes\/informationBulk@
-- 
-- Get Recipe Information Bulk
-- 
-- Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeInformationBulk 
  :: Ids -- ^ "ids" -  A comma-separated list of recipe ids.
  -> SpoonacularRequest GetRecipeInformationBulk MimeNoContent A.Value MimeJSON
getRecipeInformationBulk (Ids ids) =
  _mkRequest "GET" ["/recipes/informationBulk"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("ids", Just ids)

data GetRecipeInformationBulk  

-- | /Optional Param/ "includeNutrition" - Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
instance HasOptionalParam GetRecipeInformationBulk IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `setQuery` toQuery ("includeNutrition", Just xs)
-- | @application/json@
instance Produces GetRecipeInformationBulk MimeJSON


-- *** getRecipeIngredientsByID

-- | @GET \/recipes\/{id}\/ingredientWidget.json@
-- 
-- Get Recipe Ingredients by ID
-- 
-- Get a recipe's ingredient list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeIngredientsByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipeIngredientsByID MimeNoContent A.Value MimeJSON
getRecipeIngredientsByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/ingredientWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeIngredientsByID  
-- | @application/json@
instance Produces GetRecipeIngredientsByID MimeJSON


-- *** getRecipeNutritionWidgetByID

-- | @GET \/recipes\/{id}\/nutritionWidget.json@
-- 
-- Get Recipe Nutrition Widget by ID
-- 
-- Get a recipe's nutrition widget data.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeNutritionWidgetByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipeNutritionWidgetByID MimeNoContent A.Value MimeJSON
getRecipeNutritionWidgetByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeNutritionWidgetByID  
-- | @application/json@
instance Produces GetRecipeNutritionWidgetByID MimeJSON


-- *** getRecipePriceBreakdownByID

-- | @GET \/recipes\/{id}\/priceBreakdownWidget.json@
-- 
-- Get Recipe Price Breakdown by ID
-- 
-- Get a recipe's price breakdown data.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipePriceBreakdownByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipePriceBreakdownByID MimeNoContent A.Value MimeJSON
getRecipePriceBreakdownByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/priceBreakdownWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipePriceBreakdownByID  
-- | @application/json@
instance Produces GetRecipePriceBreakdownByID MimeJSON


-- *** getRecipeTasteByID

-- | @GET \/recipes\/{id}\/tasteWidget.json@
-- 
-- Get Recipe Taste by ID
-- 
-- Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeTasteByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest GetRecipeTasteByID MimeNoContent A.Value MimeJSON
getRecipeTasteByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/tasteWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeTasteByID  
-- | @application/json@
instance Produces GetRecipeTasteByID MimeJSON


-- *** getShoppingList

-- | @GET \/mealplanner\/{username}\/shopping-list@
-- 
-- Get Shopping List
-- 
-- Get the current shopping list for the given user.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getShoppingList 
  :: Username -- ^ "username" -  The username.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest GetShoppingList MimeNoContent A.Value MimeJSON
getShoppingList (Username username) (Hash hash) =
  _mkRequest "GET" ["/mealplanner/",toPath username,"/shopping-list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("hash", Just hash)

data GetShoppingList  
-- | @application/json@
instance Produces GetShoppingList MimeJSON


-- *** getSimilarRecipes

-- | @GET \/recipes\/{id}\/similar@
-- 
-- Get Similar Recipes
-- 
-- Find recipes which are similar to the given one.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getSimilarRecipes 
  :: Id -- ^ "id" -  The id of the source recipe for which similar recipes should be found.
  -> SpoonacularRequest GetSimilarRecipes MimeNoContent A.Value MimeJSON
getSimilarRecipes (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/similar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetSimilarRecipes  

-- | /Optional Param/ "number" - The number of random recipes to be returned (between 1 and 100).
instance HasOptionalParam GetSimilarRecipes Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam GetSimilarRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces GetSimilarRecipes MimeJSON


-- *** getWineDescription

-- | @GET \/food\/wine\/description@
-- 
-- Get Wine Description
-- 
-- Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getWineDescription 
  :: Wine -- ^ "wine" -  The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  -> SpoonacularRequest GetWineDescription MimeNoContent A.Value MimeJSON
getWineDescription (Wine wine) =
  _mkRequest "GET" ["/food/wine/description"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("wine", Just wine)

data GetWineDescription  
-- | @application/json@
instance Produces GetWineDescription MimeJSON


-- *** getWinePairing

-- | @GET \/food\/wine\/pairing@
-- 
-- Get Wine Pairing
-- 
-- Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getWinePairing 
  :: Food -- ^ "food" -  The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
  -> SpoonacularRequest GetWinePairing MimeNoContent A.Value MimeJSON
getWinePairing (Food food) =
  _mkRequest "GET" ["/food/wine/pairing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("food", Just food)

data GetWinePairing  

-- | /Optional Param/ "maxPrice" - The maximum price for the specific wine recommendation in USD.
instance HasOptionalParam GetWinePairing MaxPrice where
  applyOptionalParam req (MaxPrice xs) =
    req `setQuery` toQuery ("maxPrice", Just xs)
-- | @application/json@
instance Produces GetWinePairing MimeJSON


-- *** getWineRecommendation

-- | @GET \/food\/wine\/recommendation@
-- 
-- Get Wine Recommendation
-- 
-- Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getWineRecommendation 
  :: Wine -- ^ "wine" -  The type of wine to get a specific product recommendation for.
  -> SpoonacularRequest GetWineRecommendation MimeNoContent A.Value MimeJSON
getWineRecommendation (Wine wine) =
  _mkRequest "GET" ["/food/wine/recommendation"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("wine", Just wine)

data GetWineRecommendation  

-- | /Optional Param/ "maxPrice" - The maximum price for the specific wine recommendation in USD.
instance HasOptionalParam GetWineRecommendation MaxPrice where
  applyOptionalParam req (MaxPrice xs) =
    req `setQuery` toQuery ("maxPrice", Just xs)

-- | /Optional Param/ "minRating" - The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
instance HasOptionalParam GetWineRecommendation MinRating where
  applyOptionalParam req (MinRating xs) =
    req `setQuery` toQuery ("minRating", Just xs)

-- | /Optional Param/ "number" - The number of wine recommendations expected (between 1 and 100).
instance HasOptionalParam GetWineRecommendation Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetWineRecommendation MimeJSON


-- *** guessNutritionByDishName

-- | @GET \/recipes\/guessNutrition@
-- 
-- Guess Nutrition by Dish Name
-- 
-- Estimate the macronutrients of a dish based on its title.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
guessNutritionByDishName 
  :: Title -- ^ "title" -  The title of the dish.
  -> SpoonacularRequest GuessNutritionByDishName MimeNoContent A.Value MimeJSON
guessNutritionByDishName (Title title) =
  _mkRequest "GET" ["/recipes/guessNutrition"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("title", Just title)

data GuessNutritionByDishName  
-- | @application/json@
instance Produces GuessNutritionByDishName MimeJSON


-- *** imageAnalysisByURL

-- | @GET \/food\/images\/analyze@
-- 
-- Image Analysis by URL
-- 
-- Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
imageAnalysisByURL 
  :: ImageUrl -- ^ "imageUrl" -  The URL of the image to be analyzed.
  -> SpoonacularRequest ImageAnalysisByURL MimeNoContent A.Value MimeJSON
imageAnalysisByURL (ImageUrl imageUrl) =
  _mkRequest "GET" ["/food/images/analyze"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("imageUrl", Just imageUrl)

data ImageAnalysisByURL  
-- | @application/json@
instance Produces ImageAnalysisByURL MimeJSON


-- *** imageClassificationByURL

-- | @GET \/food\/images\/classify@
-- 
-- Image Classification by URL
-- 
-- Classify a food image. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
imageClassificationByURL 
  :: ImageUrl -- ^ "imageUrl" -  The URL of the image to be classified.
  -> SpoonacularRequest ImageClassificationByURL MimeNoContent A.Value MimeJSON
imageClassificationByURL (ImageUrl imageUrl) =
  _mkRequest "GET" ["/food/images/classify"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("imageUrl", Just imageUrl)

data ImageClassificationByURL  
-- | @application/json@
instance Produces ImageClassificationByURL MimeJSON


-- *** ingredientSearch

-- | @GET \/food\/ingredients\/search@
-- 
-- Ingredient Search
-- 
-- Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
ingredientSearch 
  :: Query -- ^ "query" -  The partial or full ingredient name.
  -> SpoonacularRequest IngredientSearch MimeNoContent A.Value MimeJSON
ingredientSearch (Query query) =
  _mkRequest "GET" ["/food/ingredients/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data IngredientSearch  

-- | /Optional Param/ "addChildren" - Whether to add children of found foods.
instance HasOptionalParam IngredientSearch AddChildren where
  applyOptionalParam req (AddChildren xs) =
    req `setQuery` toQuery ("addChildren", Just xs)

-- | /Optional Param/ "minProteinPercent" - The minimum percentage of protein the food must have (between 0 and 100).
instance HasOptionalParam IngredientSearch MinProteinPercent where
  applyOptionalParam req (MinProteinPercent xs) =
    req `setQuery` toQuery ("minProteinPercent", Just xs)

-- | /Optional Param/ "maxProteinPercent" - The maximum percentage of protein the food can have (between 0 and 100).
instance HasOptionalParam IngredientSearch MaxProteinPercent where
  applyOptionalParam req (MaxProteinPercent xs) =
    req `setQuery` toQuery ("maxProteinPercent", Just xs)

-- | /Optional Param/ "minFatPercent" - The minimum percentage of fat the food must have (between 0 and 100).
instance HasOptionalParam IngredientSearch MinFatPercent where
  applyOptionalParam req (MinFatPercent xs) =
    req `setQuery` toQuery ("minFatPercent", Just xs)

-- | /Optional Param/ "maxFatPercent" - The maximum percentage of fat the food can have (between 0 and 100).
instance HasOptionalParam IngredientSearch MaxFatPercent where
  applyOptionalParam req (MaxFatPercent xs) =
    req `setQuery` toQuery ("maxFatPercent", Just xs)

-- | /Optional Param/ "minCarbsPercent" - The minimum percentage of carbs the food must have (between 0 and 100).
instance HasOptionalParam IngredientSearch MinCarbsPercent where
  applyOptionalParam req (MinCarbsPercent xs) =
    req `setQuery` toQuery ("minCarbsPercent", Just xs)

-- | /Optional Param/ "maxCarbsPercent" - The maximum percentage of carbs the food can have (between 0 and 100).
instance HasOptionalParam IngredientSearch MaxCarbsPercent where
  applyOptionalParam req (MaxCarbsPercent xs) =
    req `setQuery` toQuery ("maxCarbsPercent", Just xs)

-- | /Optional Param/ "metaInformation" - Whether to return more meta information about the ingredients.
instance HasOptionalParam IngredientSearch MetaInformation where
  applyOptionalParam req (MetaInformation xs) =
    req `setQuery` toQuery ("metaInformation", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
instance HasOptionalParam IngredientSearch Intolerances where
  applyOptionalParam req (Intolerances xs) =
    req `setQuery` toQuery ("intolerances", Just xs)

-- | /Optional Param/ "sort" - The strategy to sort recipes by. See a full list of supported sorting options.
instance HasOptionalParam IngredientSearch Sort where
  applyOptionalParam req (Sort xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "sortDirection" - The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
instance HasOptionalParam IngredientSearch SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `setQuery` toQuery ("sortDirection", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 990).
instance HasOptionalParam IngredientSearch Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam IngredientSearch Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces IngredientSearch MimeJSON


-- *** mapIngredientsToGroceryProducts

-- | @POST \/food\/ingredients\/map@
-- 
-- Map Ingredients to Grocery Products
-- 
-- Map a set of ingredients to products you can buy in the grocery store.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
mapIngredientsToGroceryProducts 
  :: (Consumes MapIngredientsToGroceryProducts MimeJSON, MimeRender MimeJSON Body)
  => Body -- ^ "body"
  -> SpoonacularRequest MapIngredientsToGroceryProducts MimeJSON A.Value MimeJSON
mapIngredientsToGroceryProducts body =
  _mkRequest "POST" ["/food/ingredients/map"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` body

data MapIngredientsToGroceryProducts 
instance HasBodyParam MapIngredientsToGroceryProducts Body 

-- | @application/json@
instance Consumes MapIngredientsToGroceryProducts MimeJSON

-- | @application/json@
instance Produces MapIngredientsToGroceryProducts MimeJSON


-- *** parseIngredients

-- | @POST \/recipes\/parseIngredients@
-- 
-- Parse Ingredients
-- 
-- Extract an ingredient from plain text.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
parseIngredients 
  :: (Consumes ParseIngredients MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings that you can make from the ingredients.
  -> SpoonacularRequest ParseIngredients MimeFormUrlEncoded A.Value MimeJSON
parseIngredients (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/parseIngredients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data ParseIngredients  

-- | /Optional Param/ "includeNutrition" - Whether nutrition data should be added to correctly parsed ingredients.
instance HasOptionalParam ParseIngredients IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `addForm` toForm ("includeNutrition", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes ParseIngredients MimeFormUrlEncoded

-- | @application/json@
instance Produces ParseIngredients MimeJSON


-- *** quickAnswer

-- | @GET \/recipes\/quickAnswer@
-- 
-- Quick Answer
-- 
-- Answer a nutrition related natural language question.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
quickAnswer 
  :: Q -- ^ "q" -  The nutrition related question.
  -> SpoonacularRequest QuickAnswer MimeNoContent A.Value MimeJSON
quickAnswer (Q q) =
  _mkRequest "GET" ["/recipes/quickAnswer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("q", Just q)

data QuickAnswer  
-- | @application/json@
instance Produces QuickAnswer MimeJSON


-- *** searchAllFood

-- | @GET \/food\/search@
-- 
-- Search All Food
-- 
-- Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchAllFood 
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchAllFood MimeNoContent A.Value MimeJSON
searchAllFood (Query query) =
  _mkRequest "GET" ["/food/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data SearchAllFood  

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 990).
instance HasOptionalParam SearchAllFood Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam SearchAllFood Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchAllFood MimeJSON


-- *** searchCustomFoods

-- | @GET \/food\/customFoods\/search@
-- 
-- Search Custom Foods
-- 
-- Search custom foods in a user's account.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchCustomFoods 
  :: Query -- ^ "query" -  The search query.
  -> Username -- ^ "username" -  The username.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest SearchCustomFoods MimeNoContent A.Value MimeJSON
searchCustomFoods (Query query) (Username username) (Hash hash) =
  _mkRequest "GET" ["/food/customFoods/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)
    `setQuery` toQuery ("username", Just username)
    `setQuery` toQuery ("hash", Just hash)

data SearchCustomFoods  

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 990).
instance HasOptionalParam SearchCustomFoods Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam SearchCustomFoods Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchCustomFoods MimeJSON


-- *** searchFoodVideos

-- | @GET \/food\/videos\/search@
-- 
-- Search Food Videos
-- 
-- Find recipe and other food related videos.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchFoodVideos 
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchFoodVideos MimeNoContent A.Value MimeJSON
searchFoodVideos (Query query) =
  _mkRequest "GET" ["/food/videos/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data SearchFoodVideos  

-- | /Optional Param/ "type" - The type of the recipes. See a full list of supported meal types.
instance HasOptionalParam SearchFoodVideos ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "cuisine" - The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
instance HasOptionalParam SearchFoodVideos Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `setQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "diet" - The diet for which the recipes must be suitable. See a full list of supported diets.
instance HasOptionalParam SearchFoodVideos Diet where
  applyOptionalParam req (Diet xs) =
    req `setQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "includeIngredients" - A comma-separated list of ingredients that the recipes should contain.
instance HasOptionalParam SearchFoodVideos IncludeIngredients where
  applyOptionalParam req (IncludeIngredients xs) =
    req `setQuery` toQuery ("includeIngredients", Just xs)

-- | /Optional Param/ "excludeIngredients" - A comma-separated list of ingredients or ingredient types that the recipes must not contain.
instance HasOptionalParam SearchFoodVideos ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `setQuery` toQuery ("excludeIngredients", Just xs)

-- | /Optional Param/ "minLength" - Minimum video length in seconds.
instance HasOptionalParam SearchFoodVideos MinLength where
  applyOptionalParam req (MinLength xs) =
    req `setQuery` toQuery ("minLength", Just xs)

-- | /Optional Param/ "maxLength" - Maximum video length in seconds.
instance HasOptionalParam SearchFoodVideos MaxLength where
  applyOptionalParam req (MaxLength xs) =
    req `setQuery` toQuery ("maxLength", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchFoodVideos Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of results to return (between 1 and 100).
instance HasOptionalParam SearchFoodVideos Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchFoodVideos MimeJSON


-- *** searchGroceryProducts

-- | @GET \/food\/products\/search@
-- 
-- Search Grocery Products
-- 
-- Search packaged food products, such as frozen pizza or Greek yogurt.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchGroceryProducts 
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchGroceryProducts MimeNoContent A.Value MimeJSON
searchGroceryProducts (Query query) =
  _mkRequest "GET" ["/food/products/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data SearchGroceryProducts  

-- | /Optional Param/ "minCalories" - The minimum amount of calories the product must have.
instance HasOptionalParam SearchGroceryProducts MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum amount of calories the product can have.
instance HasOptionalParam SearchGroceryProducts MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum amount of carbohydrates in grams the product must have.
instance HasOptionalParam SearchGroceryProducts MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum amount of carbohydrates in grams the product can have.
instance HasOptionalParam SearchGroceryProducts MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum amount of protein in grams the product must have.
instance HasOptionalParam SearchGroceryProducts MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum amount of protein in grams the product can have.
instance HasOptionalParam SearchGroceryProducts MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minFat" - The minimum amount of fat in grams the product must have.
instance HasOptionalParam SearchGroceryProducts MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum amount of fat in grams the product can have.
instance HasOptionalParam SearchGroceryProducts MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 990).
instance HasOptionalParam SearchGroceryProducts Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam SearchGroceryProducts Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchGroceryProducts MimeJSON


-- *** searchGroceryProductsByUPC

-- | @GET \/food\/products\/upc\/{upc}@
-- 
-- Search Grocery Products by UPC
-- 
-- Get information about a packaged food using its UPC.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchGroceryProductsByUPC 
  :: Upc -- ^ "upc" -  The product's UPC.
  -> SpoonacularRequest SearchGroceryProductsByUPC MimeNoContent A.Value MimeJSON
searchGroceryProductsByUPC (Upc upc) =
  _mkRequest "GET" ["/food/products/upc/",toPath upc]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SearchGroceryProductsByUPC  
-- | @application/json@
instance Produces SearchGroceryProductsByUPC MimeJSON


-- *** searchMenuItems

-- | @GET \/food\/menuItems\/search@
-- 
-- Search Menu Items
-- 
-- Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchMenuItems 
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchMenuItems MimeNoContent A.Value MimeJSON
searchMenuItems (Query query) =
  _mkRequest "GET" ["/food/menuItems/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data SearchMenuItems  

-- | /Optional Param/ "minCalories" - The minimum amount of calories the menu item must have.
instance HasOptionalParam SearchMenuItems MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum amount of calories the menu item can have.
instance HasOptionalParam SearchMenuItems MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum amount of carbohydrates in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum amount of carbohydrates in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum amount of protein in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum amount of protein in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minFat" - The minimum amount of fat in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum amount of fat in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "offset" - The offset number for paging (between 0 and 990).
instance HasOptionalParam SearchMenuItems Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 10).
instance HasOptionalParam SearchMenuItems Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchMenuItems MimeJSON


-- *** searchRecipes

-- | @GET \/recipes\/complexSearch@
-- 
-- Search Recipes
-- 
-- Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchRecipes 
  :: Query -- ^ "query" -  The (natural language) recipe search query.
  -> SpoonacularRequest SearchRecipes MimeNoContent A.Value MimeJSON
searchRecipes (Query query) =
  _mkRequest "GET" ["/recipes/complexSearch"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data SearchRecipes  

-- | /Optional Param/ "cuisine" - The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
instance HasOptionalParam SearchRecipes Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `setQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "excludeCuisine" - The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
instance HasOptionalParam SearchRecipes ExcludeCuisine where
  applyOptionalParam req (ExcludeCuisine xs) =
    req `setQuery` toQuery ("excludeCuisine", Just xs)

-- | /Optional Param/ "diet" - The diet for which the recipes must be suitable. See a full list of supported diets.
instance HasOptionalParam SearchRecipes Diet where
  applyOptionalParam req (Diet xs) =
    req `setQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
instance HasOptionalParam SearchRecipes Intolerances where
  applyOptionalParam req (Intolerances xs) =
    req `setQuery` toQuery ("intolerances", Just xs)

-- | /Optional Param/ "equipment" - The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
instance HasOptionalParam SearchRecipes Equipment where
  applyOptionalParam req (Equipment xs) =
    req `setQuery` toQuery ("equipment", Just xs)

-- | /Optional Param/ "includeIngredients" - A comma-separated list of ingredients that should/must be used in the recipes.
instance HasOptionalParam SearchRecipes IncludeIngredients where
  applyOptionalParam req (IncludeIngredients xs) =
    req `setQuery` toQuery ("includeIngredients", Just xs)

-- | /Optional Param/ "excludeIngredients" - A comma-separated list of ingredients or ingredient types that the recipes must not contain.
instance HasOptionalParam SearchRecipes ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `setQuery` toQuery ("excludeIngredients", Just xs)

-- | /Optional Param/ "type" - The type of recipe. See a full list of supported meal types.
instance HasOptionalParam SearchRecipes ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "instructionsRequired" - Whether the recipes must have instructions.
instance HasOptionalParam SearchRecipes InstructionsRequired where
  applyOptionalParam req (InstructionsRequired xs) =
    req `setQuery` toQuery ("instructionsRequired", Just xs)

-- | /Optional Param/ "fillIngredients" - Add information about the ingredients and whether they are used or missing in relation to the query.
instance HasOptionalParam SearchRecipes FillIngredients where
  applyOptionalParam req (FillIngredients xs) =
    req `setQuery` toQuery ("fillIngredients", Just xs)

-- | /Optional Param/ "addRecipeInformation" - If set to true, you get more information about the recipes returned.
instance HasOptionalParam SearchRecipes AddRecipeInformation where
  applyOptionalParam req (AddRecipeInformation xs) =
    req `setQuery` toQuery ("addRecipeInformation", Just xs)

-- | /Optional Param/ "addRecipeNutrition" - If set to true, you get nutritional information about each recipes returned.
instance HasOptionalParam SearchRecipes AddRecipeNutrition where
  applyOptionalParam req (AddRecipeNutrition xs) =
    req `setQuery` toQuery ("addRecipeNutrition", Just xs)

-- | /Optional Param/ "author" - The username of the recipe author.
instance HasOptionalParam SearchRecipes Author where
  applyOptionalParam req (Author xs) =
    req `setQuery` toQuery ("author", Just xs)

-- | /Optional Param/ "tags" - User defined tags that have to match. The author param has to be set.
instance HasOptionalParam SearchRecipes Tags where
  applyOptionalParam req (Tags xs) =
    req `setQuery` toQuery ("tags", Just xs)

-- | /Optional Param/ "recipeBoxId" - The id of the recipe box to which the search should be limited to.
instance HasOptionalParam SearchRecipes RecipeBoxId where
  applyOptionalParam req (RecipeBoxId xs) =
    req `setQuery` toQuery ("recipeBoxId", Just xs)

-- | /Optional Param/ "titleMatch" - Enter text that must be found in the title of the recipes.
instance HasOptionalParam SearchRecipes TitleMatch where
  applyOptionalParam req (TitleMatch xs) =
    req `setQuery` toQuery ("titleMatch", Just xs)

-- | /Optional Param/ "maxReadyTime" - The maximum time in minutes it should take to prepare and cook the recipe.
instance HasOptionalParam SearchRecipes MaxReadyTime where
  applyOptionalParam req (MaxReadyTime xs) =
    req `setQuery` toQuery ("maxReadyTime", Just xs)

-- | /Optional Param/ "ignorePantry" - Whether to ignore typical pantry items, such as water, salt, flour, etc.
instance HasOptionalParam SearchRecipes IgnorePantry where
  applyOptionalParam req (IgnorePantry xs) =
    req `setQuery` toQuery ("ignorePantry", Just xs)

-- | /Optional Param/ "sort" - The strategy to sort recipes by. See a full list of supported sorting options.
instance HasOptionalParam SearchRecipes Sort where
  applyOptionalParam req (Sort xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "sortDirection" - The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
instance HasOptionalParam SearchRecipes SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `setQuery` toQuery ("sortDirection", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum amount of carbohydrates in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum amount of carbohydrates in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum amount of protein in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum amount of protein in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minCalories" - The minimum amount of calories the recipe must have.
instance HasOptionalParam SearchRecipes MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum amount of calories the recipe can have.
instance HasOptionalParam SearchRecipes MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minFat" - The minimum amount of fat in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum amount of fat in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "minAlcohol" - The minimum amount of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinAlcohol where
  applyOptionalParam req (MinAlcohol xs) =
    req `setQuery` toQuery ("minAlcohol", Just xs)

-- | /Optional Param/ "maxAlcohol" - The maximum amount of alcohol in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxAlcohol where
  applyOptionalParam req (MaxAlcohol xs) =
    req `setQuery` toQuery ("maxAlcohol", Just xs)

-- | /Optional Param/ "minCaffeine" - The minimum amount of caffeine in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCaffeine where
  applyOptionalParam req (MinCaffeine xs) =
    req `setQuery` toQuery ("minCaffeine", Just xs)

-- | /Optional Param/ "maxCaffeine" - The maximum amount of caffeine in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCaffeine where
  applyOptionalParam req (MaxCaffeine xs) =
    req `setQuery` toQuery ("maxCaffeine", Just xs)

-- | /Optional Param/ "minCopper" - The minimum amount of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCopper where
  applyOptionalParam req (MinCopper xs) =
    req `setQuery` toQuery ("minCopper", Just xs)

-- | /Optional Param/ "maxCopper" - The maximum amount of copper in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCopper where
  applyOptionalParam req (MaxCopper xs) =
    req `setQuery` toQuery ("maxCopper", Just xs)

-- | /Optional Param/ "minCalcium" - The minimum amount of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCalcium where
  applyOptionalParam req (MinCalcium xs) =
    req `setQuery` toQuery ("minCalcium", Just xs)

-- | /Optional Param/ "maxCalcium" - The maximum amount of calcium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCalcium where
  applyOptionalParam req (MaxCalcium xs) =
    req `setQuery` toQuery ("maxCalcium", Just xs)

-- | /Optional Param/ "minCholine" - The minimum amount of choline in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCholine where
  applyOptionalParam req (MinCholine xs) =
    req `setQuery` toQuery ("minCholine", Just xs)

-- | /Optional Param/ "maxCholine" - The maximum amount of choline in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCholine where
  applyOptionalParam req (MaxCholine xs) =
    req `setQuery` toQuery ("maxCholine", Just xs)

-- | /Optional Param/ "minCholesterol" - The minimum amount of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCholesterol where
  applyOptionalParam req (MinCholesterol xs) =
    req `setQuery` toQuery ("minCholesterol", Just xs)

-- | /Optional Param/ "maxCholesterol" - The maximum amount of cholesterol in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCholesterol where
  applyOptionalParam req (MaxCholesterol xs) =
    req `setQuery` toQuery ("maxCholesterol", Just xs)

-- | /Optional Param/ "minFluoride" - The minimum amount of fluoride in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinFluoride where
  applyOptionalParam req (MinFluoride xs) =
    req `setQuery` toQuery ("minFluoride", Just xs)

-- | /Optional Param/ "maxFluoride" - The maximum amount of fluoride in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxFluoride where
  applyOptionalParam req (MaxFluoride xs) =
    req `setQuery` toQuery ("maxFluoride", Just xs)

-- | /Optional Param/ "minSaturatedFat" - The minimum amount of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinSaturatedFat where
  applyOptionalParam req (MinSaturatedFat xs) =
    req `setQuery` toQuery ("minSaturatedFat", Just xs)

-- | /Optional Param/ "maxSaturatedFat" - The maximum amount of saturated fat in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxSaturatedFat where
  applyOptionalParam req (MaxSaturatedFat xs) =
    req `setQuery` toQuery ("maxSaturatedFat", Just xs)

-- | /Optional Param/ "minVitaminA" - The minimum amount of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminA where
  applyOptionalParam req (MinVitaminA xs) =
    req `setQuery` toQuery ("minVitaminA", Just xs)

-- | /Optional Param/ "maxVitaminA" - The maximum amount of Vitamin A in IU the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminA where
  applyOptionalParam req (MaxVitaminA xs) =
    req `setQuery` toQuery ("maxVitaminA", Just xs)

-- | /Optional Param/ "minVitaminC" - The minimum amount of Vitamin C milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminC where
  applyOptionalParam req (MinVitaminC xs) =
    req `setQuery` toQuery ("minVitaminC", Just xs)

-- | /Optional Param/ "maxVitaminC" - The maximum amount of Vitamin C in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminC where
  applyOptionalParam req (MaxVitaminC xs) =
    req `setQuery` toQuery ("maxVitaminC", Just xs)

-- | /Optional Param/ "minVitaminD" - The minimum amount of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminD where
  applyOptionalParam req (MinVitaminD xs) =
    req `setQuery` toQuery ("minVitaminD", Just xs)

-- | /Optional Param/ "maxVitaminD" - The maximum amount of Vitamin D in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminD where
  applyOptionalParam req (MaxVitaminD xs) =
    req `setQuery` toQuery ("maxVitaminD", Just xs)

-- | /Optional Param/ "minVitaminE" - The minimum amount of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminE where
  applyOptionalParam req (MinVitaminE xs) =
    req `setQuery` toQuery ("minVitaminE", Just xs)

-- | /Optional Param/ "maxVitaminE" - The maximum amount of Vitamin E in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminE where
  applyOptionalParam req (MaxVitaminE xs) =
    req `setQuery` toQuery ("maxVitaminE", Just xs)

-- | /Optional Param/ "minVitaminK" - The minimum amount of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminK where
  applyOptionalParam req (MinVitaminK xs) =
    req `setQuery` toQuery ("minVitaminK", Just xs)

-- | /Optional Param/ "maxVitaminK" - The maximum amount of Vitamin K in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminK where
  applyOptionalParam req (MaxVitaminK xs) =
    req `setQuery` toQuery ("maxVitaminK", Just xs)

-- | /Optional Param/ "minVitaminB1" - The minimum amount of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB1 where
  applyOptionalParam req (MinVitaminB1 xs) =
    req `setQuery` toQuery ("minVitaminB1", Just xs)

-- | /Optional Param/ "maxVitaminB1" - The maximum amount of Vitamin B1 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB1 where
  applyOptionalParam req (MaxVitaminB1 xs) =
    req `setQuery` toQuery ("maxVitaminB1", Just xs)

-- | /Optional Param/ "minVitaminB2" - The minimum amount of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB2 where
  applyOptionalParam req (MinVitaminB2 xs) =
    req `setQuery` toQuery ("minVitaminB2", Just xs)

-- | /Optional Param/ "maxVitaminB2" - The maximum amount of Vitamin B2 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB2 where
  applyOptionalParam req (MaxVitaminB2 xs) =
    req `setQuery` toQuery ("maxVitaminB2", Just xs)

-- | /Optional Param/ "minVitaminB5" - The minimum amount of Vitamin B5 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB5 where
  applyOptionalParam req (MinVitaminB5 xs) =
    req `setQuery` toQuery ("minVitaminB5", Just xs)

-- | /Optional Param/ "maxVitaminB5" - The maximum amount of Vitamin B5 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB5 where
  applyOptionalParam req (MaxVitaminB5 xs) =
    req `setQuery` toQuery ("maxVitaminB5", Just xs)

-- | /Optional Param/ "minVitaminB3" - The minimum amount of Vitamin B3 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB3 where
  applyOptionalParam req (MinVitaminB3 xs) =
    req `setQuery` toQuery ("minVitaminB3", Just xs)

-- | /Optional Param/ "maxVitaminB3" - The maximum amount of Vitamin B3 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB3 where
  applyOptionalParam req (MaxVitaminB3 xs) =
    req `setQuery` toQuery ("maxVitaminB3", Just xs)

-- | /Optional Param/ "minVitaminB6" - The minimum amount of Vitamin B6 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB6 where
  applyOptionalParam req (MinVitaminB6 xs) =
    req `setQuery` toQuery ("minVitaminB6", Just xs)

-- | /Optional Param/ "maxVitaminB6" - The maximum amount of Vitamin B6 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB6 where
  applyOptionalParam req (MaxVitaminB6 xs) =
    req `setQuery` toQuery ("maxVitaminB6", Just xs)

-- | /Optional Param/ "minVitaminB12" - The minimum amount of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB12 where
  applyOptionalParam req (MinVitaminB12 xs) =
    req `setQuery` toQuery ("minVitaminB12", Just xs)

-- | /Optional Param/ "maxVitaminB12" - The maximum amount of Vitamin B12 in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB12 where
  applyOptionalParam req (MaxVitaminB12 xs) =
    req `setQuery` toQuery ("maxVitaminB12", Just xs)

-- | /Optional Param/ "minFiber" - The minimum amount of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinFiber where
  applyOptionalParam req (MinFiber xs) =
    req `setQuery` toQuery ("minFiber", Just xs)

-- | /Optional Param/ "maxFiber" - The maximum amount of fiber in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxFiber where
  applyOptionalParam req (MaxFiber xs) =
    req `setQuery` toQuery ("maxFiber", Just xs)

-- | /Optional Param/ "minFolate" - The minimum amount of folate in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinFolate where
  applyOptionalParam req (MinFolate xs) =
    req `setQuery` toQuery ("minFolate", Just xs)

-- | /Optional Param/ "maxFolate" - The maximum amount of folate in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxFolate where
  applyOptionalParam req (MaxFolate xs) =
    req `setQuery` toQuery ("maxFolate", Just xs)

-- | /Optional Param/ "minFolicAcid" - The minimum amount of folic acid in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinFolicAcid where
  applyOptionalParam req (MinFolicAcid xs) =
    req `setQuery` toQuery ("minFolicAcid", Just xs)

-- | /Optional Param/ "maxFolicAcid" - The maximum amount of folic acid in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxFolicAcid where
  applyOptionalParam req (MaxFolicAcid xs) =
    req `setQuery` toQuery ("maxFolicAcid", Just xs)

-- | /Optional Param/ "minIodine" - The minimum amount of iodine in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinIodine where
  applyOptionalParam req (MinIodine xs) =
    req `setQuery` toQuery ("minIodine", Just xs)

-- | /Optional Param/ "maxIodine" - The maximum amount of iodine in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxIodine where
  applyOptionalParam req (MaxIodine xs) =
    req `setQuery` toQuery ("maxIodine", Just xs)

-- | /Optional Param/ "minIron" - The minimum amount of iron in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinIron where
  applyOptionalParam req (MinIron xs) =
    req `setQuery` toQuery ("minIron", Just xs)

-- | /Optional Param/ "maxIron" - The maximum amount of iron in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxIron where
  applyOptionalParam req (MaxIron xs) =
    req `setQuery` toQuery ("maxIron", Just xs)

-- | /Optional Param/ "minMagnesium" - The minimum amount of magnesium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinMagnesium where
  applyOptionalParam req (MinMagnesium xs) =
    req `setQuery` toQuery ("minMagnesium", Just xs)

-- | /Optional Param/ "maxMagnesium" - The maximum amount of magnesium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxMagnesium where
  applyOptionalParam req (MaxMagnesium xs) =
    req `setQuery` toQuery ("maxMagnesium", Just xs)

-- | /Optional Param/ "minManganese" - The minimum amount of manganese in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinManganese where
  applyOptionalParam req (MinManganese xs) =
    req `setQuery` toQuery ("minManganese", Just xs)

-- | /Optional Param/ "maxManganese" - The maximum amount of manganese in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxManganese where
  applyOptionalParam req (MaxManganese xs) =
    req `setQuery` toQuery ("maxManganese", Just xs)

-- | /Optional Param/ "minPhosphorus" - The minimum amount of phosphorus in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinPhosphorus where
  applyOptionalParam req (MinPhosphorus xs) =
    req `setQuery` toQuery ("minPhosphorus", Just xs)

-- | /Optional Param/ "maxPhosphorus" - The maximum amount of phosphorus in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxPhosphorus where
  applyOptionalParam req (MaxPhosphorus xs) =
    req `setQuery` toQuery ("maxPhosphorus", Just xs)

-- | /Optional Param/ "minPotassium" - The minimum amount of potassium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinPotassium where
  applyOptionalParam req (MinPotassium xs) =
    req `setQuery` toQuery ("minPotassium", Just xs)

-- | /Optional Param/ "maxPotassium" - The maximum amount of potassium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxPotassium where
  applyOptionalParam req (MaxPotassium xs) =
    req `setQuery` toQuery ("maxPotassium", Just xs)

-- | /Optional Param/ "minSelenium" - The minimum amount of selenium in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinSelenium where
  applyOptionalParam req (MinSelenium xs) =
    req `setQuery` toQuery ("minSelenium", Just xs)

-- | /Optional Param/ "maxSelenium" - The maximum amount of selenium in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxSelenium where
  applyOptionalParam req (MaxSelenium xs) =
    req `setQuery` toQuery ("maxSelenium", Just xs)

-- | /Optional Param/ "minSodium" - The minimum amount of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinSodium where
  applyOptionalParam req (MinSodium xs) =
    req `setQuery` toQuery ("minSodium", Just xs)

-- | /Optional Param/ "maxSodium" - The maximum amount of sodium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxSodium where
  applyOptionalParam req (MaxSodium xs) =
    req `setQuery` toQuery ("maxSodium", Just xs)

-- | /Optional Param/ "minSugar" - The minimum amount of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinSugar where
  applyOptionalParam req (MinSugar xs) =
    req `setQuery` toQuery ("minSugar", Just xs)

-- | /Optional Param/ "maxSugar" - The maximum amount of sugar in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxSugar where
  applyOptionalParam req (MaxSugar xs) =
    req `setQuery` toQuery ("maxSugar", Just xs)

-- | /Optional Param/ "minZinc" - The minimum amount of zinc in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinZinc where
  applyOptionalParam req (MinZinc xs) =
    req `setQuery` toQuery ("minZinc", Just xs)

-- | /Optional Param/ "maxZinc" - The maximum amount of zinc in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxZinc where
  applyOptionalParam req (MaxZinc xs) =
    req `setQuery` toQuery ("maxZinc", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchRecipes Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam SearchRecipes Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam SearchRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces SearchRecipes MimeJSON


-- *** searchRecipesByIngredients

-- | @GET \/recipes\/findByIngredients@
-- 
-- Search Recipes by Ingredients
-- 
--              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchRecipesByIngredients 
  :: Ingredients -- ^ "ingredients" -  A comma-separated list of ingredients that the recipes should contain.
  -> SpoonacularRequest SearchRecipesByIngredients MimeNoContent A.Value MimeJSON
searchRecipesByIngredients (Ingredients ingredients) =
  _mkRequest "GET" ["/recipes/findByIngredients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("ingredients", Just ingredients)

data SearchRecipesByIngredients  

-- | /Optional Param/ "number" - The maximum number of recipes to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchRecipesByIngredients Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam SearchRecipesByIngredients LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)

-- | /Optional Param/ "ranking" - Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
instance HasOptionalParam SearchRecipesByIngredients Ranking where
  applyOptionalParam req (Ranking xs) =
    req `setQuery` toQuery ("ranking", Just xs)

-- | /Optional Param/ "ignorePantry" - Whether to ignore typical pantry items, such as water, salt, flour, etc.
instance HasOptionalParam SearchRecipesByIngredients IgnorePantry where
  applyOptionalParam req (IgnorePantry xs) =
    req `setQuery` toQuery ("ignorePantry", Just xs)
-- | @application/json@
instance Produces SearchRecipesByIngredients MimeJSON


-- *** searchRecipesByNutrients

-- | @GET \/recipes\/findByNutrients@
-- 
-- Search Recipes by Nutrients
-- 
-- Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchRecipesByNutrients 
  :: SpoonacularRequest SearchRecipesByNutrients MimeNoContent A.Value MimeJSON
searchRecipesByNutrients =
  _mkRequest "GET" ["/recipes/findByNutrients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SearchRecipesByNutrients  

-- | /Optional Param/ "minCarbs" - The minimum amount of carbohydrates in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `setQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum amount of carbohydrates in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `setQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum amount of protein in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `setQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum amount of protein in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `setQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minCalories" - The minimum amount of calories the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `setQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum amount of calories the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `setQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minFat" - The minimum amount of fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFat where
  applyOptionalParam req (MinFat xs) =
    req `setQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum amount of fat in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `setQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "minAlcohol" - The minimum amount of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinAlcohol where
  applyOptionalParam req (MinAlcohol xs) =
    req `setQuery` toQuery ("minAlcohol", Just xs)

-- | /Optional Param/ "maxAlcohol" - The maximum amount of alcohol in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxAlcohol where
  applyOptionalParam req (MaxAlcohol xs) =
    req `setQuery` toQuery ("maxAlcohol", Just xs)

-- | /Optional Param/ "minCaffeine" - The minimum amount of caffeine in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCaffeine where
  applyOptionalParam req (MinCaffeine xs) =
    req `setQuery` toQuery ("minCaffeine", Just xs)

-- | /Optional Param/ "maxCaffeine" - The maximum amount of caffeine in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCaffeine where
  applyOptionalParam req (MaxCaffeine xs) =
    req `setQuery` toQuery ("maxCaffeine", Just xs)

-- | /Optional Param/ "minCopper" - The minimum amount of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCopper where
  applyOptionalParam req (MinCopper xs) =
    req `setQuery` toQuery ("minCopper", Just xs)

-- | /Optional Param/ "maxCopper" - The maximum amount of copper in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCopper where
  applyOptionalParam req (MaxCopper xs) =
    req `setQuery` toQuery ("maxCopper", Just xs)

-- | /Optional Param/ "minCalcium" - The minimum amount of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCalcium where
  applyOptionalParam req (MinCalcium xs) =
    req `setQuery` toQuery ("minCalcium", Just xs)

-- | /Optional Param/ "maxCalcium" - The maximum amount of calcium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCalcium where
  applyOptionalParam req (MaxCalcium xs) =
    req `setQuery` toQuery ("maxCalcium", Just xs)

-- | /Optional Param/ "minCholine" - The minimum amount of choline in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCholine where
  applyOptionalParam req (MinCholine xs) =
    req `setQuery` toQuery ("minCholine", Just xs)

-- | /Optional Param/ "maxCholine" - The maximum amount of choline in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCholine where
  applyOptionalParam req (MaxCholine xs) =
    req `setQuery` toQuery ("maxCholine", Just xs)

-- | /Optional Param/ "minCholesterol" - The minimum amount of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCholesterol where
  applyOptionalParam req (MinCholesterol xs) =
    req `setQuery` toQuery ("minCholesterol", Just xs)

-- | /Optional Param/ "maxCholesterol" - The maximum amount of cholesterol in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCholesterol where
  applyOptionalParam req (MaxCholesterol xs) =
    req `setQuery` toQuery ("maxCholesterol", Just xs)

-- | /Optional Param/ "minFluoride" - The minimum amount of fluoride in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFluoride where
  applyOptionalParam req (MinFluoride xs) =
    req `setQuery` toQuery ("minFluoride", Just xs)

-- | /Optional Param/ "maxFluoride" - The maximum amount of fluoride in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFluoride where
  applyOptionalParam req (MaxFluoride xs) =
    req `setQuery` toQuery ("maxFluoride", Just xs)

-- | /Optional Param/ "minSaturatedFat" - The minimum amount of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSaturatedFat where
  applyOptionalParam req (MinSaturatedFat xs) =
    req `setQuery` toQuery ("minSaturatedFat", Just xs)

-- | /Optional Param/ "maxSaturatedFat" - The maximum amount of saturated fat in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSaturatedFat where
  applyOptionalParam req (MaxSaturatedFat xs) =
    req `setQuery` toQuery ("maxSaturatedFat", Just xs)

-- | /Optional Param/ "minVitaminA" - The minimum amount of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminA where
  applyOptionalParam req (MinVitaminA xs) =
    req `setQuery` toQuery ("minVitaminA", Just xs)

-- | /Optional Param/ "maxVitaminA" - The maximum amount of Vitamin A in IU the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminA where
  applyOptionalParam req (MaxVitaminA xs) =
    req `setQuery` toQuery ("maxVitaminA", Just xs)

-- | /Optional Param/ "minVitaminC" - The minimum amount of Vitamin C in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminC where
  applyOptionalParam req (MinVitaminC xs) =
    req `setQuery` toQuery ("minVitaminC", Just xs)

-- | /Optional Param/ "maxVitaminC" - The maximum amount of Vitamin C in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminC where
  applyOptionalParam req (MaxVitaminC xs) =
    req `setQuery` toQuery ("maxVitaminC", Just xs)

-- | /Optional Param/ "minVitaminD" - The minimum amount of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminD where
  applyOptionalParam req (MinVitaminD xs) =
    req `setQuery` toQuery ("minVitaminD", Just xs)

-- | /Optional Param/ "maxVitaminD" - The maximum amount of Vitamin D in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminD where
  applyOptionalParam req (MaxVitaminD xs) =
    req `setQuery` toQuery ("maxVitaminD", Just xs)

-- | /Optional Param/ "minVitaminE" - The minimum amount of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminE where
  applyOptionalParam req (MinVitaminE xs) =
    req `setQuery` toQuery ("minVitaminE", Just xs)

-- | /Optional Param/ "maxVitaminE" - The maximum amount of Vitamin E in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminE where
  applyOptionalParam req (MaxVitaminE xs) =
    req `setQuery` toQuery ("maxVitaminE", Just xs)

-- | /Optional Param/ "minVitaminK" - The minimum amount of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminK where
  applyOptionalParam req (MinVitaminK xs) =
    req `setQuery` toQuery ("minVitaminK", Just xs)

-- | /Optional Param/ "maxVitaminK" - The maximum amount of Vitamin K in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminK where
  applyOptionalParam req (MaxVitaminK xs) =
    req `setQuery` toQuery ("maxVitaminK", Just xs)

-- | /Optional Param/ "minVitaminB1" - The minimum amount of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB1 where
  applyOptionalParam req (MinVitaminB1 xs) =
    req `setQuery` toQuery ("minVitaminB1", Just xs)

-- | /Optional Param/ "maxVitaminB1" - The maximum amount of Vitamin B1 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB1 where
  applyOptionalParam req (MaxVitaminB1 xs) =
    req `setQuery` toQuery ("maxVitaminB1", Just xs)

-- | /Optional Param/ "minVitaminB2" - The minimum amount of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB2 where
  applyOptionalParam req (MinVitaminB2 xs) =
    req `setQuery` toQuery ("minVitaminB2", Just xs)

-- | /Optional Param/ "maxVitaminB2" - The maximum amount of Vitamin B2 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB2 where
  applyOptionalParam req (MaxVitaminB2 xs) =
    req `setQuery` toQuery ("maxVitaminB2", Just xs)

-- | /Optional Param/ "minVitaminB5" - The minimum amount of Vitamin B5 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB5 where
  applyOptionalParam req (MinVitaminB5 xs) =
    req `setQuery` toQuery ("minVitaminB5", Just xs)

-- | /Optional Param/ "maxVitaminB5" - The maximum amount of Vitamin B5 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB5 where
  applyOptionalParam req (MaxVitaminB5 xs) =
    req `setQuery` toQuery ("maxVitaminB5", Just xs)

-- | /Optional Param/ "minVitaminB3" - The minimum amount of Vitamin B3 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB3 where
  applyOptionalParam req (MinVitaminB3 xs) =
    req `setQuery` toQuery ("minVitaminB3", Just xs)

-- | /Optional Param/ "maxVitaminB3" - The maximum amount of Vitamin B3 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB3 where
  applyOptionalParam req (MaxVitaminB3 xs) =
    req `setQuery` toQuery ("maxVitaminB3", Just xs)

-- | /Optional Param/ "minVitaminB6" - The minimum amount of Vitamin B6 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB6 where
  applyOptionalParam req (MinVitaminB6 xs) =
    req `setQuery` toQuery ("minVitaminB6", Just xs)

-- | /Optional Param/ "maxVitaminB6" - The maximum amount of Vitamin B6 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB6 where
  applyOptionalParam req (MaxVitaminB6 xs) =
    req `setQuery` toQuery ("maxVitaminB6", Just xs)

-- | /Optional Param/ "minVitaminB12" - The minimum amount of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB12 where
  applyOptionalParam req (MinVitaminB12 xs) =
    req `setQuery` toQuery ("minVitaminB12", Just xs)

-- | /Optional Param/ "maxVitaminB12" - The maximum amount of Vitamin B12 in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB12 where
  applyOptionalParam req (MaxVitaminB12 xs) =
    req `setQuery` toQuery ("maxVitaminB12", Just xs)

-- | /Optional Param/ "minFiber" - The minimum amount of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFiber where
  applyOptionalParam req (MinFiber xs) =
    req `setQuery` toQuery ("minFiber", Just xs)

-- | /Optional Param/ "maxFiber" - The maximum amount of fiber in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFiber where
  applyOptionalParam req (MaxFiber xs) =
    req `setQuery` toQuery ("maxFiber", Just xs)

-- | /Optional Param/ "minFolate" - The minimum amount of folate in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFolate where
  applyOptionalParam req (MinFolate xs) =
    req `setQuery` toQuery ("minFolate", Just xs)

-- | /Optional Param/ "maxFolate" - The maximum amount of folate in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFolate where
  applyOptionalParam req (MaxFolate xs) =
    req `setQuery` toQuery ("maxFolate", Just xs)

-- | /Optional Param/ "minFolicAcid" - The minimum amount of folic acid in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFolicAcid where
  applyOptionalParam req (MinFolicAcid xs) =
    req `setQuery` toQuery ("minFolicAcid", Just xs)

-- | /Optional Param/ "maxFolicAcid" - The maximum amount of folic acid in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFolicAcid where
  applyOptionalParam req (MaxFolicAcid xs) =
    req `setQuery` toQuery ("maxFolicAcid", Just xs)

-- | /Optional Param/ "minIodine" - The minimum amount of iodine in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinIodine where
  applyOptionalParam req (MinIodine xs) =
    req `setQuery` toQuery ("minIodine", Just xs)

-- | /Optional Param/ "maxIodine" - The maximum amount of iodine in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxIodine where
  applyOptionalParam req (MaxIodine xs) =
    req `setQuery` toQuery ("maxIodine", Just xs)

-- | /Optional Param/ "minIron" - The minimum amount of iron in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinIron where
  applyOptionalParam req (MinIron xs) =
    req `setQuery` toQuery ("minIron", Just xs)

-- | /Optional Param/ "maxIron" - The maximum amount of iron in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxIron where
  applyOptionalParam req (MaxIron xs) =
    req `setQuery` toQuery ("maxIron", Just xs)

-- | /Optional Param/ "minMagnesium" - The minimum amount of magnesium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinMagnesium where
  applyOptionalParam req (MinMagnesium xs) =
    req `setQuery` toQuery ("minMagnesium", Just xs)

-- | /Optional Param/ "maxMagnesium" - The maximum amount of magnesium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxMagnesium where
  applyOptionalParam req (MaxMagnesium xs) =
    req `setQuery` toQuery ("maxMagnesium", Just xs)

-- | /Optional Param/ "minManganese" - The minimum amount of manganese in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinManganese where
  applyOptionalParam req (MinManganese xs) =
    req `setQuery` toQuery ("minManganese", Just xs)

-- | /Optional Param/ "maxManganese" - The maximum amount of manganese in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxManganese where
  applyOptionalParam req (MaxManganese xs) =
    req `setQuery` toQuery ("maxManganese", Just xs)

-- | /Optional Param/ "minPhosphorus" - The minimum amount of phosphorus in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinPhosphorus where
  applyOptionalParam req (MinPhosphorus xs) =
    req `setQuery` toQuery ("minPhosphorus", Just xs)

-- | /Optional Param/ "maxPhosphorus" - The maximum amount of phosphorus in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxPhosphorus where
  applyOptionalParam req (MaxPhosphorus xs) =
    req `setQuery` toQuery ("maxPhosphorus", Just xs)

-- | /Optional Param/ "minPotassium" - The minimum amount of potassium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinPotassium where
  applyOptionalParam req (MinPotassium xs) =
    req `setQuery` toQuery ("minPotassium", Just xs)

-- | /Optional Param/ "maxPotassium" - The maximum amount of potassium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxPotassium where
  applyOptionalParam req (MaxPotassium xs) =
    req `setQuery` toQuery ("maxPotassium", Just xs)

-- | /Optional Param/ "minSelenium" - The minimum amount of selenium in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSelenium where
  applyOptionalParam req (MinSelenium xs) =
    req `setQuery` toQuery ("minSelenium", Just xs)

-- | /Optional Param/ "maxSelenium" - The maximum amount of selenium in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSelenium where
  applyOptionalParam req (MaxSelenium xs) =
    req `setQuery` toQuery ("maxSelenium", Just xs)

-- | /Optional Param/ "minSodium" - The minimum amount of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSodium where
  applyOptionalParam req (MinSodium xs) =
    req `setQuery` toQuery ("minSodium", Just xs)

-- | /Optional Param/ "maxSodium" - The maximum amount of sodium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSodium where
  applyOptionalParam req (MaxSodium xs) =
    req `setQuery` toQuery ("maxSodium", Just xs)

-- | /Optional Param/ "minSugar" - The minimum amount of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSugar where
  applyOptionalParam req (MinSugar xs) =
    req `setQuery` toQuery ("minSugar", Just xs)

-- | /Optional Param/ "maxSugar" - The maximum amount of sugar in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSugar where
  applyOptionalParam req (MaxSugar xs) =
    req `setQuery` toQuery ("maxSugar", Just xs)

-- | /Optional Param/ "minZinc" - The minimum amount of zinc in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinZinc where
  applyOptionalParam req (MinZinc xs) =
    req `setQuery` toQuery ("minZinc", Just xs)

-- | /Optional Param/ "maxZinc" - The maximum amount of zinc in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxZinc where
  applyOptionalParam req (MaxZinc xs) =
    req `setQuery` toQuery ("maxZinc", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchRecipesByNutrients Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of expected results (between 1 and 100).
instance HasOptionalParam SearchRecipesByNutrients Number where
  applyOptionalParam req (Number xs) =
    req `setQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "random" - If true, every request will give you a random set of recipes within the requested limits.
instance HasOptionalParam SearchRecipesByNutrients Random where
  applyOptionalParam req (Random xs) =
    req `setQuery` toQuery ("random", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam SearchRecipesByNutrients LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `setQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces SearchRecipesByNutrients MimeJSON


-- *** searchSiteContent

-- | @GET \/food\/site\/search@
-- 
-- Search Site Content
-- 
-- Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchSiteContent 
  :: Query -- ^ "query" -  The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
  -> SpoonacularRequest SearchSiteContent MimeNoContent A.Value MimeJSON
searchSiteContent (Query query) =
  _mkRequest "GET" ["/food/site/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("query", Just query)

data SearchSiteContent  
-- | @application/json@
instance Produces SearchSiteContent MimeJSON


-- *** summarizeRecipe

-- | @GET \/recipes\/{id}\/summary@
-- 
-- Summarize Recipe
-- 
-- Automatically generate a short description that summarizes key information about the recipe.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
summarizeRecipe 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest SummarizeRecipe MimeNoContent A.Value MimeJSON
summarizeRecipe (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/summary"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SummarizeRecipe  
-- | @application/json@
instance Produces SummarizeRecipe MimeJSON


-- *** talkToChatbot

-- | @GET \/food\/converse@
-- 
-- Talk to Chatbot
-- 
-- This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
talkToChatbot 
  :: ParamText -- ^ "text" -  The request / question / answer from the user to the chatbot.
  -> SpoonacularRequest TalkToChatbot MimeNoContent A.Value MimeJSON
talkToChatbot (ParamText text) =
  _mkRequest "GET" ["/food/converse"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setQuery` toQuery ("text", Just text)

data TalkToChatbot  

-- | /Optional Param/ "contextId" - An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
instance HasOptionalParam TalkToChatbot ContextId where
  applyOptionalParam req (ContextId xs) =
    req `setQuery` toQuery ("contextId", Just xs)
-- | @application/json@
instance Produces TalkToChatbot MimeJSON


-- *** visualizeEquipment

-- | @POST \/recipes\/visualizeEquipment@
-- 
-- Visualize Equipment
-- 
-- Visualize the equipment used to make a recipe. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeEquipment 
  :: (Consumes VisualizeEquipment MimeFormUrlEncoded)
  => Instructions -- ^ "instructions" -  The recipe's instructions.
  -> SpoonacularRequest VisualizeEquipment MimeFormUrlEncoded Text MimeTextHtml
visualizeEquipment (Instructions instructions) =
  _mkRequest "POST" ["/recipes/visualizeEquipment"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("instructions", instructions)

data VisualizeEquipment  

-- | /Optional Param/ "view" - How to visualize the equipment, either \\\"grid\\\" or \\\"list\\\".
instance HasOptionalParam VisualizeEquipment View where
  applyOptionalParam req (View xs) =
    req `addForm` toForm ("view", xs)

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeEquipment DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizeEquipment ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeEquipment MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeEquipment MimeTextHtml


-- *** visualizeIngredients

-- | @POST \/recipes\/visualizeIngredients@
-- 
-- Visualize Ingredients
-- 
-- Visualize ingredients of a recipe. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeIngredients 
  :: (Consumes VisualizeIngredients MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings.
  -> SpoonacularRequest VisualizeIngredients MimeFormUrlEncoded Text MimeTextHtml
visualizeIngredients (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/visualizeIngredients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data VisualizeIngredients  

-- | /Optional Param/ "measure" - The original system of measurement, either \\\"metric\\\" or \\\"us\\\".
instance HasOptionalParam VisualizeIngredients Measure where
  applyOptionalParam req (Measure xs) =
    req `addForm` toForm ("measure", xs)

-- | /Optional Param/ "view" - How to visualize the ingredients, either \\\"grid\\\" or \\\"list\\\".
instance HasOptionalParam VisualizeIngredients View where
  applyOptionalParam req (View xs) =
    req `addForm` toForm ("view", xs)

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeIngredients DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizeIngredients ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeIngredients MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeIngredients MimeTextHtml


-- *** visualizeMenuItemNutritionByID

-- | @GET \/food\/menuItems\/{id}\/nutritionWidget@
-- 
-- Visualize Menu Item Nutrition by ID
-- 
-- Visualize a menu item's nutritional information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeMenuItemNutritionByID 
  :: Id -- ^ "id" -  The menu item id.
  -> SpoonacularRequest VisualizeMenuItemNutritionByID MimeNoContent Text MimeTextHtml
visualizeMenuItemNutritionByID (Id id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id,"/nutritionWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeMenuItemNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeMenuItemNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeMenuItemNutritionByID MimeTextHtml


-- *** visualizePriceBreakdown

-- | @POST \/recipes\/visualizePriceEstimator@
-- 
-- Visualize Price Breakdown
-- 
-- Visualize the price breakdown of a recipe. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizePriceBreakdown 
  :: (Consumes VisualizePriceBreakdown MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings.
  -> SpoonacularRequest VisualizePriceBreakdown MimeFormUrlEncoded Text MimeTextHtml
visualizePriceBreakdown (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/visualizePriceEstimator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data VisualizePriceBreakdown  

-- | /Optional Param/ "mode" - The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
instance HasOptionalParam VisualizePriceBreakdown Mode where
  applyOptionalParam req (Mode xs) =
    req `addForm` toForm ("mode", xs)

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizePriceBreakdown DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizePriceBreakdown ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizePriceBreakdown MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizePriceBreakdown MimeTextHtml


-- *** visualizeProductNutritionByID

-- | @GET \/food\/products\/{id}\/nutritionWidget@
-- 
-- Visualize Product Nutrition by ID
-- 
-- Visualize a product's nutritional information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeProductNutritionByID 
  :: Id -- ^ "id" -  The id of the product.
  -> SpoonacularRequest VisualizeProductNutritionByID MimeNoContent Text MimeTextHtml
visualizeProductNutritionByID (Id id) =
  _mkRequest "GET" ["/food/products/",toPath id,"/nutritionWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeProductNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeProductNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeProductNutritionByID MimeTextHtml


-- *** visualizeRecipeEquipmentByID

-- | @GET \/recipes\/{id}\/equipmentWidget@
-- 
-- Visualize Recipe Equipment by ID
-- 
-- Visualize a recipe's equipment list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeEquipmentByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipeEquipmentByID MimeNoContent Text MimeTextHtml
visualizeRecipeEquipmentByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/equipmentWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeEquipmentByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeEquipmentByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeEquipmentByID MimeTextHtml


-- *** visualizeRecipeIngredientsByID

-- | @GET \/recipes\/{id}\/ingredientWidget@
-- 
-- Visualize Recipe Ingredients by ID
-- 
-- Visualize a recipe's ingredient list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeIngredientsByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipeIngredientsByID MimeNoContent Text MimeTextHtml
visualizeRecipeIngredientsByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/ingredientWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeIngredientsByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeIngredientsByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeIngredientsByID MimeTextHtml


-- *** visualizeRecipeNutrition

-- | @POST \/recipes\/visualizeNutrition@
-- 
-- Visualize Recipe Nutrition
-- 
-- Visualize a recipe's nutritional information as HTML including CSS. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeNutrition 
  :: (Consumes VisualizeRecipeNutrition MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> Servings -- ^ "servings" -  The number of servings.
  -> SpoonacularRequest VisualizeRecipeNutrition MimeFormUrlEncoded Text MimeTextHtml
visualizeRecipeNutrition (IngredientList ingredientList) (Servings servings) =
  _mkRequest "POST" ["/recipes/visualizeNutrition"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("ingredientList", ingredientList)
    `addForm` toForm ("servings", servings)

data VisualizeRecipeNutrition  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeNutrition DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addForm` toForm ("defaultCss", xs)

-- | /Optional Param/ "showBacklink" - Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
instance HasOptionalParam VisualizeRecipeNutrition ShowBacklink where
  applyOptionalParam req (ShowBacklink xs) =
    req `addForm` toForm ("showBacklink", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeRecipeNutrition MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeRecipeNutrition MimeTextHtml


-- *** visualizeRecipeNutritionByID

-- | @GET \/recipes\/{id}\/nutritionWidget@
-- 
-- Visualize Recipe Nutrition by ID
-- 
-- Visualize a recipe's nutritional information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeNutritionByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipeNutritionByID MimeNoContent Text MimeTextHtml
visualizeRecipeNutritionByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeNutritionByID MimeTextHtml


-- *** visualizeRecipePriceBreakdownByID

-- | @GET \/recipes\/{id}\/priceBreakdownWidget@
-- 
-- Visualize Recipe Price Breakdown by ID
-- 
-- Visualize a recipe's price breakdown.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipePriceBreakdownByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipePriceBreakdownByID MimeNoContent Text MimeTextHtml
visualizeRecipePriceBreakdownByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/priceBreakdownWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipePriceBreakdownByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipePriceBreakdownByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `setQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipePriceBreakdownByID MimeTextHtml


-- *** visualizeRecipeTaste

-- | @POST \/recipes\/visualizeTaste@
-- 
-- Visualize Recipe Taste
-- 
-- Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeTaste 
  :: (Consumes VisualizeRecipeTaste MimeFormUrlEncoded)
  => IngredientList -- ^ "ingredientList" -  The ingredient list of the recipe, one ingredient per line.
  -> SpoonacularRequest VisualizeRecipeTaste MimeFormUrlEncoded Text MimeTextHtml
visualizeRecipeTaste (IngredientList ingredientList) =
  _mkRequest "POST" ["/recipes/visualizeTaste"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("ingredientList", ingredientList)

data VisualizeRecipeTaste  

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeRecipeTaste MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeRecipeTaste MimeTextHtml


-- *** visualizeRecipeTasteByID

-- | @GET \/recipes\/{id}\/tasteWidget@
-- 
-- Visualize Recipe Taste by ID
-- 
-- Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeTasteByID 
  :: Id -- ^ "id" -  The recipe id.
  -> SpoonacularRequest VisualizeRecipeTasteByID MimeNoContent Text MimeTextHtml
visualizeRecipeTasteByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/tasteWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeTasteByID  
-- | @text/html@
instance Produces VisualizeRecipeTasteByID MimeTextHtml

