{-
   spoonacular API

   The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   OpenAPI Version: 3.0.0
   spoonacular API API version: 1.1
   Contact: mail@spoonacular.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Spoonacular.API.Wine
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Spoonacular.API.Wine where

import Spoonacular.Core
import Spoonacular.MimeTypes
import Spoonacular.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Wine

-- *** getDishPairingForWine

-- | @GET \/food\/wine\/dishes@
-- 
-- Dish Pairing for Wine
-- 
-- Find a dish that goes well with a given wine.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getDishPairingForWine
  :: Wine -- ^ "wine" -  The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  -> SpoonacularRequest GetDishPairingForWine MimeNoContent GetDishPairingForWine200Response MimeJSON
getDishPairingForWine (Wine wine) =
  _mkRequest "GET" ["/food/wine/dishes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("wine", Just wine)

data GetDishPairingForWine  
-- | @application/json@
instance Produces GetDishPairingForWine MimeJSON


-- *** getWineDescription

-- | @GET \/food\/wine\/description@
-- 
-- Wine Description
-- 
-- Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getWineDescription
  :: Wine -- ^ "wine" -  The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  -> SpoonacularRequest GetWineDescription MimeNoContent GetWineDescription200Response MimeJSON
getWineDescription (Wine wine) =
  _mkRequest "GET" ["/food/wine/description"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("wine", Just wine)

data GetWineDescription  
-- | @application/json@
instance Produces GetWineDescription MimeJSON


-- *** getWinePairing

-- | @GET \/food\/wine\/pairing@
-- 
-- Wine Pairing
-- 
-- Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getWinePairing
  :: Food -- ^ "food" -  The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
  -> SpoonacularRequest GetWinePairing MimeNoContent GetWinePairing200Response MimeJSON
getWinePairing (Food food) =
  _mkRequest "GET" ["/food/wine/pairing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("food", Just food)

data GetWinePairing  

-- | /Optional Param/ "maxPrice" - The maximum price for the specific wine recommendation in USD.
instance HasOptionalParam GetWinePairing MaxPrice where
  applyOptionalParam req (MaxPrice xs) =
    req `addQuery` toQuery ("maxPrice", Just xs)
-- | @application/json@
instance Produces GetWinePairing MimeJSON


-- *** getWineRecommendation

-- | @GET \/food\/wine\/recommendation@
-- 
-- Wine Recommendation
-- 
-- Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getWineRecommendation
  :: Wine -- ^ "wine" -  The type of wine to get a specific product recommendation for.
  -> SpoonacularRequest GetWineRecommendation MimeNoContent GetWineRecommendation200Response MimeJSON
getWineRecommendation (Wine wine) =
  _mkRequest "GET" ["/food/wine/recommendation"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("wine", Just wine)

data GetWineRecommendation  

-- | /Optional Param/ "maxPrice" - The maximum price for the specific wine recommendation in USD.
instance HasOptionalParam GetWineRecommendation MaxPrice where
  applyOptionalParam req (MaxPrice xs) =
    req `addQuery` toQuery ("maxPrice", Just xs)

-- | /Optional Param/ "minRating" - The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
instance HasOptionalParam GetWineRecommendation MinRating where
  applyOptionalParam req (MinRating xs) =
    req `addQuery` toQuery ("minRating", Just xs)

-- | /Optional Param/ "number" - The number of wine recommendations expected (between 1 and 100).
instance HasOptionalParam GetWineRecommendation NumberDouble where
  applyOptionalParam req (NumberDouble xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetWineRecommendation MimeJSON

