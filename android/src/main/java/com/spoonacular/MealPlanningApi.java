/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular;

import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiInvoker;
import com.spoonacular.client.Pair;

import com.spoonacular.client.model.*;

import java.util.*;

import java.math.BigDecimal;
import com.spoonacular.client.model.InlineObject3;
import com.spoonacular.client.model.InlineObject4;
import com.spoonacular.client.model.InlineObject5;
import com.spoonacular.client.model.InlineObject6;
import com.spoonacular.client.model.InlineObject7;
import com.spoonacular.client.model.InlineObject8;
import com.spoonacular.client.model.InlineResponse20037;
import com.spoonacular.client.model.InlineResponse20038;
import com.spoonacular.client.model.InlineResponse20039;
import com.spoonacular.client.model.InlineResponse20040;
import com.spoonacular.client.model.InlineResponse20041;
import com.spoonacular.client.model.InlineResponse20042;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class MealPlanningApi {
  String basePath = "https://api.spoonacular.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Add to Meal Plan
   * Add an item to the user&#39;s meal plan.
   * @param username The username.
   * @param hash The private hash for the username.
   * @param inlineObject4 
   * @return Object
   */
  public Object  addToMealPlan (String username, String hash, InlineObject4 inlineObject4) throws ApiException {
    Object localVarPostBody = inlineObject4;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling addToMealPlan");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling addToMealPlan");
    }
    // verify the required parameter 'inlineObject4' is set
    if (inlineObject4 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject4' when calling addToMealPlan");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      "","application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Add to Shopping List
   * Add an item to the current shopping list of a user.
   * @param username The username.
   * @param hash The private hash for the username.
   * @param inlineObject7 
   * @return InlineResponse20041
   */
  public InlineResponse20041  addToShoppingList (String username, String hash, InlineObject7 inlineObject7) throws ApiException {
    Object localVarPostBody = inlineObject7;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling addToShoppingList");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling addToShoppingList");
    }
    // verify the required parameter 'inlineObject7' is set
    if (inlineObject7 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject7' when calling addToShoppingList");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/shopping-list/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      "","application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20041) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20041.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Clear Meal Plan Day
   * Delete all planned items from the user&#39;s meal plan for a specific day.
   * @param username The username.
   * @param date The date in the format yyyy-mm-dd.
   * @param hash The private hash for the username.
   * @param inlineObject3 
   * @return Object
   */
  public Object  clearMealPlanDay (String username, String date, String hash, InlineObject3 inlineObject3) throws ApiException {
    Object localVarPostBody = inlineObject3;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling clearMealPlanDay");
    }
    // verify the required parameter 'date' is set
    if (date == null) {
       throw new ApiException(400, "Missing the required parameter 'date' when calling clearMealPlanDay");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling clearMealPlanDay");
    }
    // verify the required parameter 'inlineObject3' is set
    if (inlineObject3 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject3' when calling clearMealPlanDay");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/day/{date}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "date" + "\\}", apiInvoker.escapeString(date.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      ""
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Connect User
   * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
   * @param body 
   * @return InlineResponse20042
   */
  public InlineResponse20042  connectUser (Object body) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, "Missing the required parameter 'body' when calling connectUser");
    }

    // create path and map variables
    String localVarPath = "/users/connect".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "","application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20042) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20042.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Delete from Meal Plan
   * Delete an item from the user&#39;s meal plan.
   * @param username The username.
   * @param id The shopping list item id.
   * @param hash The private hash for the username.
   * @param inlineObject5 
   * @return Object
   */
  public Object  deleteFromMealPlan (String username, BigDecimal id, String hash, InlineObject5 inlineObject5) throws ApiException {
    Object localVarPostBody = inlineObject5;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling deleteFromMealPlan");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling deleteFromMealPlan");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling deleteFromMealPlan");
    }
    // verify the required parameter 'inlineObject5' is set
    if (inlineObject5 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject5' when calling deleteFromMealPlan");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/items/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      ""
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Delete from Shopping List
   * Delete an item from the current shopping list of the user.
   * @param username The username.
   * @param id The item&#39;s id.
   * @param hash The private hash for the username.
   * @param inlineObject8 
   * @return Object
   */
  public Object  deleteFromShoppingList (String username, Integer id, String hash, InlineObject8 inlineObject8) throws ApiException {
    Object localVarPostBody = inlineObject8;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling deleteFromShoppingList");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling deleteFromShoppingList");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling deleteFromShoppingList");
    }
    // verify the required parameter 'inlineObject8' is set
    if (inlineObject8 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject8' when calling deleteFromShoppingList");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/shopping-list/items/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      ""
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Generate Meal Plan
   * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
   * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
   * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
   * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
   * @param exclude A comma-separated list of allergens or ingredients that must be excluded.
   * @return InlineResponse20037
   */
  public InlineResponse20037  generateMealPlan (String timeFrame, BigDecimal targetCalories, String diet, String exclude) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/mealplanner/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "timeFrame", timeFrame));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "targetCalories", targetCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20037) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20037.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Generate Shopping List
   * Generate the shopping list for a user from the meal planner in a given time frame.
   * @param username The username.
   * @param startDate The start date in the format yyyy-mm-dd.
   * @param endDate The end date in the format yyyy-mm-dd.
   * @param hash The private hash for the username.
   * @param inlineObject6 
   * @return InlineResponse20041
   */
  public InlineResponse20041  generateShoppingList (String username, String startDate, String endDate, String hash, InlineObject6 inlineObject6) throws ApiException {
    Object localVarPostBody = inlineObject6;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling generateShoppingList");
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       throw new ApiException(400, "Missing the required parameter 'startDate' when calling generateShoppingList");
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
       throw new ApiException(400, "Missing the required parameter 'endDate' when calling generateShoppingList");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling generateShoppingList");
    }
    // verify the required parameter 'inlineObject6' is set
    if (inlineObject6 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject6' when calling generateShoppingList");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/shopping-list/{start-date}/{end-date}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "start-date" + "\\}", apiInvoker.escapeString(startDate.toString())).replaceAll("\\{" + "end-date" + "\\}", apiInvoker.escapeString(endDate.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      ""
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20041) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20041.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Meal Plan Template
   * Get information about a meal plan template.
   * @param username The username.
   * @param id The item&#39;s id.
   * @param hash The private hash for the username.
   * @return InlineResponse20040
   */
  public InlineResponse20040  getMealPlanTemplate (String username, Integer id, String hash) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanTemplate");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getMealPlanTemplate");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanTemplate");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/templates/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20040) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20040.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Meal Plan Templates
   * Get meal plan templates from user or public ones.
   * @param username The username.
   * @param hash The private hash for the username.
   * @return InlineResponse20039
   */
  public InlineResponse20039  getMealPlanTemplates (String username, String hash) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanTemplates");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanTemplates");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/templates".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20039) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20039.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Meal Plan Week
   * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
   * @param username The username.
   * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.
   * @param hash The private hash for the username.
   * @return InlineResponse20038
   */
  public InlineResponse20038  getMealPlanWeek (String username, String startDate, String hash) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanWeek");
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       throw new ApiException(400, "Missing the required parameter 'startDate' when calling getMealPlanWeek");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanWeek");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/week/{start-date}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "start-date" + "\\}", apiInvoker.escapeString(startDate.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20038) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20038.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Shopping List
   * Get the current shopping list for the given user.
   * @param username The username.
   * @param hash The private hash for the username.
   * @return InlineResponse20041
   */
  public InlineResponse20041  getShoppingList (String username, String hash) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling getShoppingList");
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
       throw new ApiException(400, "Missing the required parameter 'hash' when calling getShoppingList");
    }

    // create path and map variables
    String localVarPath = "/mealplanner/{username}/shopping-list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20041) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20041.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
