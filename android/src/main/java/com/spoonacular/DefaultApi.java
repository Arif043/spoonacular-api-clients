/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular;

import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiInvoker;
import com.spoonacular.client.Pair;

import com.spoonacular.client.model.*;

import java.util.*;

import java.math.BigDecimal;
import java.io.File;
import com.spoonacular.client.model.InlineObject8;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class DefaultApi {
  String basePath = "https://api.spoonacular.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Analyze a Recipe Search Query
   * Parse a recipe search query to find out its intention.
   * @param q The recipe search query.
   * @return Object
   */
  public Object  analyzeARecipeSearchQuery (String q) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
       throw new ApiException(400, "Missing the required parameter 'q' when calling analyzeARecipeSearchQuery");
    }

    // create path and map variables
    String localVarPath = "/recipes/queries/analyze".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Analyze Recipe Instructions
   * Extract ingredients and equipment from the recipe instruction steps.
   * @param instructions The instructions text.
   * @return Object
   */
  public Object  analyzeRecipeInstructions (String instructions) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'instructions' is set
    if (instructions == null) {
       throw new ApiException(400, "Missing the required parameter 'instructions' when calling analyzeRecipeInstructions");
    }

    // create path and map variables
    String localVarPath = "/recipes/analyzeInstructions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (instructions != null) {
        localVarBuilder.addTextBody("instructions", ApiInvoker.parameterToString(instructions), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("instructions", ApiInvoker.parameterToString(instructions));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Autocomplete Ingredient Search
   * Autocomplete a search for an ingredient.
   * @param query The query - a partial or full ingredient name.
   * @param number The number of results to return (between 1 and 100).
   * @param metaInformation Whether to return more meta information about the ingredients.
   * @param intolerances A comma-separated list of intolerances. All found ingredients must not cause problems for people with one of the given tolerances. See a full list of supported intolerances.
   * @return Object
   */
  public Object  autocompleteIngredientSearch (String query, BigDecimal number, Boolean metaInformation, Boolean intolerances) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling autocompleteIngredientSearch");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/autocomplete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "metaInformation", metaInformation));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "intolerances", intolerances));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Autocomplete Menu Item Search
   * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
   * @param query The (partial) search query.
   * @param number The number of results to return (between 1 and 25).
   * @return Object
   */
  public Object  autocompleteMenuItemSearch (String query, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling autocompleteMenuItemSearch");
    }

    // create path and map variables
    String localVarPath = "/food/menuItems/suggest".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Autocomplete Product Search
   * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
   * @param query The (partial) search query.
   * @param number The number of results to return (between 1 and 25).
   * @return Object
   */
  public Object  autocompleteProductSearch (String query, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling autocompleteProductSearch");
    }

    // create path and map variables
    String localVarPath = "/food/products/suggest".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Autocomplete Recipe Search
   * Autocomplete a partial input to possible recipe names.
   * @param query The query to be autocompleted.
   * @param number The number of results to return (between 1 and 25).
   * @return Object
   */
  public Object  autocompleteRecipeSearch (String query, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling autocompleteRecipeSearch");
    }

    // create path and map variables
    String localVarPath = "/recipes/autocomplete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Classify Cuisine
   * Classify the recipe&#39;s cuisine.
   * @param title The title of the recipe.
   * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
   * @return Object
   */
  public Object  classifyCuisine (String title, String ingredientList) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'title' is set
    if (title == null) {
       throw new ApiException(400, "Missing the required parameter 'title' when calling classifyCuisine");
    }
    // verify the required parameter 'ingredientList' is set
    if (ingredientList == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientList' when calling classifyCuisine");
    }

    // create path and map variables
    String localVarPath = "/recipes/cuisine".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (title != null) {
        localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (ingredientList != null) {
        localVarBuilder.addTextBody("ingredientList", ApiInvoker.parameterToString(ingredientList), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("title", ApiInvoker.parameterToString(title));
localVarFormParams.put("ingredientList", ApiInvoker.parameterToString(ingredientList));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Classify Grocery Product
   * Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
   * @param inlineObject8 
   * @param locale The locale of the returned category, supported is en_US and en_GB.
   * @return Object
   */
  public Object  classifyGroceryProduct (InlineObject8 inlineObject8, String locale) throws ApiException {
    Object localVarPostBody = inlineObject8;
    // verify the required parameter 'inlineObject8' is set
    if (inlineObject8 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject8' when calling classifyGroceryProduct");
    }

    // create path and map variables
    String localVarPath = "/food/products/classify".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));


    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Classify Grocery Product Bulk
   * Given a set of product jsons, get back classified products.
   * @param body 
   * @param locale The locale of the returned category, supported is en_US and en_GB.
   * @return Object
   */
  public Object  classifyGroceryProductBulk (Object body, String locale) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, "Missing the required parameter 'body' when calling classifyGroceryProductBulk");
    }

    // create path and map variables
    String localVarPath = "/food/products/classifyBatch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));


    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Convert Amounts
   * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
   * @param ingredientName The ingredient which you want to convert.
   * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
   * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
   * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
   * @return Object
   */
  public Object  convertAmounts (String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientName' is set
    if (ingredientName == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientName' when calling convertAmounts");
    }
    // verify the required parameter 'sourceAmount' is set
    if (sourceAmount == null) {
       throw new ApiException(400, "Missing the required parameter 'sourceAmount' when calling convertAmounts");
    }
    // verify the required parameter 'sourceUnit' is set
    if (sourceUnit == null) {
       throw new ApiException(400, "Missing the required parameter 'sourceUnit' when calling convertAmounts");
    }
    // verify the required parameter 'targetUnit' is set
    if (targetUnit == null) {
       throw new ApiException(400, "Missing the required parameter 'targetUnit' when calling convertAmounts");
    }

    // create path and map variables
    String localVarPath = "/recipes/convert".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ingredientName", ingredientName));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sourceAmount", sourceAmount));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sourceUnit", sourceUnit));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "targetUnit", targetUnit));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Create Recipe Card
   * Create Recipe Card.
   * @param title The title of the recipe.
   * @param image The binary image of the recipe as jpg.
   * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
   * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
   * @param readyInMinutes The number of minutes it takes to get the recipe on the table.
   * @param servings The number of servings that you can make from the ingredients.
   * @param mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
   * @param backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
   * @param author The author of the recipe.
   * @param backgroundColor The background color on the recipe card as a hex-string.
   * @param fontColor The font color on the recipe card as a hex-string.
   * @param source The source of the recipe.
   * @return Object
   */
  public Object  createRecipeCard (String title, File image, String ingredients, String instructions, BigDecimal readyInMinutes, BigDecimal servings, String mask, String backgroundImage, String author, String backgroundColor, String fontColor, String source) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'title' is set
    if (title == null) {
       throw new ApiException(400, "Missing the required parameter 'title' when calling createRecipeCard");
    }
    // verify the required parameter 'image' is set
    if (image == null) {
       throw new ApiException(400, "Missing the required parameter 'image' when calling createRecipeCard");
    }
    // verify the required parameter 'ingredients' is set
    if (ingredients == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredients' when calling createRecipeCard");
    }
    // verify the required parameter 'instructions' is set
    if (instructions == null) {
       throw new ApiException(400, "Missing the required parameter 'instructions' when calling createRecipeCard");
    }
    // verify the required parameter 'readyInMinutes' is set
    if (readyInMinutes == null) {
       throw new ApiException(400, "Missing the required parameter 'readyInMinutes' when calling createRecipeCard");
    }
    // verify the required parameter 'servings' is set
    if (servings == null) {
       throw new ApiException(400, "Missing the required parameter 'servings' when calling createRecipeCard");
    }
    // verify the required parameter 'mask' is set
    if (mask == null) {
       throw new ApiException(400, "Missing the required parameter 'mask' when calling createRecipeCard");
    }
    // verify the required parameter 'backgroundImage' is set
    if (backgroundImage == null) {
       throw new ApiException(400, "Missing the required parameter 'backgroundImage' when calling createRecipeCard");
    }

    // create path and map variables
    String localVarPath = "/recipes/visualizeRecipe".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "multipart/form-data"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (title != null) {
        localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      
      if (ingredients != null) {
        localVarBuilder.addTextBody("ingredients", ApiInvoker.parameterToString(ingredients), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (instructions != null) {
        localVarBuilder.addTextBody("instructions", ApiInvoker.parameterToString(instructions), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (readyInMinutes != null) {
        localVarBuilder.addTextBody("readyInMinutes", ApiInvoker.parameterToString(readyInMinutes), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (servings != null) {
        localVarBuilder.addTextBody("servings", ApiInvoker.parameterToString(servings), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mask != null) {
        localVarBuilder.addTextBody("mask", ApiInvoker.parameterToString(mask), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (backgroundImage != null) {
        localVarBuilder.addTextBody("backgroundImage", ApiInvoker.parameterToString(backgroundImage), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (author != null) {
        localVarBuilder.addTextBody("author", ApiInvoker.parameterToString(author), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (backgroundColor != null) {
        localVarBuilder.addTextBody("backgroundColor", ApiInvoker.parameterToString(backgroundColor), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fontColor != null) {
        localVarBuilder.addTextBody("fontColor", ApiInvoker.parameterToString(fontColor), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (source != null) {
        localVarBuilder.addTextBody("source", ApiInvoker.parameterToString(source), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("title", ApiInvoker.parameterToString(title));

localVarFormParams.put("ingredients", ApiInvoker.parameterToString(ingredients));
localVarFormParams.put("instructions", ApiInvoker.parameterToString(instructions));
localVarFormParams.put("readyInMinutes", ApiInvoker.parameterToString(readyInMinutes));
localVarFormParams.put("servings", ApiInvoker.parameterToString(servings));
localVarFormParams.put("mask", ApiInvoker.parameterToString(mask));
localVarFormParams.put("backgroundImage", ApiInvoker.parameterToString(backgroundImage));
localVarFormParams.put("author", ApiInvoker.parameterToString(author));
localVarFormParams.put("backgroundColor", ApiInvoker.parameterToString(backgroundColor));
localVarFormParams.put("fontColor", ApiInvoker.parameterToString(fontColor));
localVarFormParams.put("source", ApiInvoker.parameterToString(source));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Detect Food in Text
   * Detect ingredients and dishes in texts. This task is also called Named Entity Recognition (NER). In our case the entities are foods. Either dishes, such as pizza and cheeseburger or ingredients, such as cucumber and almonds.
   * @param text The text in which food items such as dish names and ingredients should be detected in.
   * @return Object
   */
  public Object  detectFoodInText (String text) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'text' is set
    if (text == null) {
       throw new ApiException(400, "Missing the required parameter 'text' when calling detectFoodInText");
    }

    // create path and map variables
    String localVarPath = "/food/detect".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (text != null) {
        localVarBuilder.addTextBody("text", ApiInvoker.parameterToString(text), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("text", ApiInvoker.parameterToString(text));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Extract Recipe from Website
   * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and the equipment that is used.
   * @param url The URL of the recipe page.
   * @param forceExtraction If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.
   * @return Object
   */
  public Object  extractRecipeFromWebsite (String url, Boolean forceExtraction) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'url' is set
    if (url == null) {
       throw new ApiException(400, "Missing the required parameter 'url' when calling extractRecipeFromWebsite");
    }

    // create path and map variables
    String localVarPath = "/recipes/extract".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "forceExtraction", forceExtraction));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Generate Meal Plan
   * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
   * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
   * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
   * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
   * @param exclude A comma-separated list of allergens or ingredients that must be excluded.
   * @return Object
   */
  public Object  generateMealPlan (String timeFrame, BigDecimal targetCalories, String diet, String exclude) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/mealplans/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "timeFrame", timeFrame));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "targetCalories", targetCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get a Random Food Joke
   * Get a random joke that includes or is about food.
   * @return Object
   */
  public Object  getARandomFoodJoke () throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/food/jokes/random".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Analyzed Recipe Instructions
   * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and the equipment that is used.
   * @param id The recipe id.
   * @param stepBreakdown Whether to break down the recipe steps even more.
   * @return Object
   */
  public Object  getAnalyzedRecipeInstructions (BigDecimal id, Boolean stepBreakdown) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getAnalyzedRecipeInstructions");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/analyzedInstructions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "stepBreakdown", stepBreakdown));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Comparable Products
   * Find comparable products to the given one.
   * @param upc The UPC of the product for that you want to find comparable products.
   * @return Object
   */
  public Object  getComparableProducts (BigDecimal upc) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'upc' is set
    if (upc == null) {
       throw new ApiException(400, "Missing the required parameter 'upc' when calling getComparableProducts");
    }

    // create path and map variables
    String localVarPath = "/food/products/upc/{upc}/comparable".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upc" + "\\}", apiInvoker.escapeString(upc.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Conversation Suggests
   * This endpoint returns suggestions for things the user can say or ask the chat bot.
   * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
   * @param number The number of suggestions to return (between 1 and 25).
   * @return Object
   */
  public Object  getConversationSuggests (String query, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling getConversationSuggests");
    }

    // create path and map variables
    String localVarPath = "/food/converse/suggest".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Dish Pairing for Wine
   * Get a dish that goes well with a given wine.
   * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
   * @return Object
   */
  public Object  getDishPairingForWine (String wine) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'wine' is set
    if (wine == null) {
       throw new ApiException(400, "Missing the required parameter 'wine' when calling getDishPairingForWine");
    }

    // create path and map variables
    String localVarPath = "/food/wine/dishes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "wine", wine));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Food Information
   * Get information about a certain food (ingredient).
   * @param id The id of the food / ingredient.
   * @param amount The amount of that food.
   * @param unit The unit for the given amount.
   * @return Object
   */
  public Object  getFoodInformation (BigDecimal id, BigDecimal amount, String unit) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getFoodInformation");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/{id}/information".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "amount", amount));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "unit", unit));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Ingredient Substitutes
   * Search for substitutes for a given ingredient.
   * @param ingredientName The name of the ingredient you want to replace.
   * @return Object
   */
  public Object  getIngredientSubstitutes (String ingredientName) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientName' is set
    if (ingredientName == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientName' when calling getIngredientSubstitutes");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/substitutes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ingredientName", ingredientName));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Ingredient Substitutes by ID
   * Search for substitutes for a given ingredient.
   * @param id The id of the ingredient you want substitutes for.
   * @return Object
   */
  public Object  getIngredientSubstitutesByID (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getIngredientSubstitutesByID");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/{id}/substitutes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Menu Item Information
   * Get information about a certain menu item.
   * @param id The menu item id.
   * @return Object
   */
  public Object  getMenuItemInformation (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getMenuItemInformation");
    }

    // create path and map variables
    String localVarPath = "/food/menuItems/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Product Information
   * Get information about a packaged food product.
   * @param id The id of the packaged food product.
   * @return Object
   */
  public Object  getProductInformation (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getProductInformation");
    }

    // create path and map variables
    String localVarPath = "/food/products/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Random Food Trivia
   * Returns random food trivia.
   * @return Object
   */
  public Object  getRandomFoodTrivia () throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/food/trivia/random".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Random Recipes
   * Find random (popular) recipes.
   * @param limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
   * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must adhere to.
   * @param number The number of random recipes to be returned (between 1 and 100).
   * @return Object
   */
  public Object  getRandomRecipes (Boolean limitLicense, String tags, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/random".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Equipment by ID
   * Get a recipe&#39;s equipment list.
   * @param id The recipe id.
   * @return Object
   */
  public Object  getRecipeEquipmentByID (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeEquipmentByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/equipmentWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Information
   * Get information about a recipe.
   * @param id The id of the recipe.
   * @param includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
   * @return Object
   */
  public Object  getRecipeInformation (BigDecimal id, Boolean includeNutrition) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeInformation");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/information".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeNutrition", includeNutrition));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Information Bulk
   * Get information about multiple recipes at once. That is equivalent of calling the Get Recipe Information endpoint multiple times but is faster.
   * @param ids A comma-separated list of recipe ids.
   * @param includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
   * @return Object
   */
  public Object  getRecipeInformationBulk (String ids, Boolean includeNutrition) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ids' is set
    if (ids == null) {
       throw new ApiException(400, "Missing the required parameter 'ids' when calling getRecipeInformationBulk");
    }

    // create path and map variables
    String localVarPath = "/recipes/informationBulk".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeNutrition", includeNutrition));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Ingredients by ID
   * Get a recipe&#39;s ingredient list.
   * @param id The recipe id.
   * @return Object
   */
  public Object  getRecipeIngredientsByID (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeIngredientsByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/ingredientWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Nutrition by ID
   * Get a recipe&#39;s nutrition widget data.
   * @param id The recipe id.
   * @return Object
   */
  public Object  getRecipeNutritionByID (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeNutritionByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/nutritionWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Price Breakdown by ID
   * Get a recipe&#39;s price breakdown data.
   * @param id The recipe id.
   * @return Object
   */
  public Object  getRecipePriceBreakdownByID (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipePriceBreakdownByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/priceBreakdownWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Similar Recipes
   * Find recipes which are similar to the given one.
   * @param id The id of the source recipe to which similar recipes should be found.
   * @param number The number of random recipes to be returned (between 1 and 100).
   * @return Object
   */
  public Object  getSimilarRecipes (BigDecimal id, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getSimilarRecipes");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/similar".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Wine Description
   * Get the description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
   * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
   * @return Object
   */
  public Object  getWineDescription (String wine) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'wine' is set
    if (wine == null) {
       throw new ApiException(400, "Missing the required parameter 'wine' when calling getWineDescription");
    }

    // create path and map variables
    String localVarPath = "/food/wine/description".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "wine", wine));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Wine Pairing
   * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
   * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
   * @param maxPrice The maximum price for the specific wine recommendation in USD.
   * @return Object
   */
  public Object  getWinePairing (String food, BigDecimal maxPrice) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'food' is set
    if (food == null) {
       throw new ApiException(400, "Missing the required parameter 'food' when calling getWinePairing");
    }

    // create path and map variables
    String localVarPath = "/food/wine/pairing".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "food", food));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPrice", maxPrice));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Wine Recommendation
   * Get a specific wine recommendation (concrete product) for a given wine, e.g. \&quot;merlot\&quot;.
   * @param wine The name of the wine to get a specific product recommendation for.
   * @param maxPrice The maximum price for the specific wine recommendation in USD.
   * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
   * @param number The number of wine recommendations expected (between 1 and 100).
   * @return Object
   */
  public Object  getWineRecommendation (String wine, BigDecimal maxPrice, BigDecimal minRating, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'wine' is set
    if (wine == null) {
       throw new ApiException(400, "Missing the required parameter 'wine' when calling getWineRecommendation");
    }

    // create path and map variables
    String localVarPath = "/food/wine/recommendation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "wine", wine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPrice", maxPrice));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minRating", minRating));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Guess Nutrition by Dish Name
   * Guess the macro nutrients of a dish given its title.
   * @param title The title of the dish.
   * @return Object
   */
  public Object  guessNutritionByDishName (String title) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'title' is set
    if (title == null) {
       throw new ApiException(400, "Missing the required parameter 'title' when calling guessNutritionByDishName");
    }

    // create path and map variables
    String localVarPath = "/recipes/guessNutrition".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "title", title));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Map Ingredients to Grocery Products
   * Map a set of ingredients to products you can buy in the grocery store.
   * @param body 
   * @return Object
   */
  public Object  mapIngredientsToGroceryProducts (Object body) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, "Missing the required parameter 'body' when calling mapIngredientsToGroceryProducts");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/map".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Parse Ingredients
   * Extract an ingredient from plain text.
   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
   * @param servings The number of servings that you can make from the ingredients.
   * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients.
   * @return Object
   */
  public Object  parseIngredients (String ingredientList, BigDecimal servings, Boolean includeNutrition) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientList' is set
    if (ingredientList == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientList' when calling parseIngredients");
    }
    // verify the required parameter 'servings' is set
    if (servings == null) {
       throw new ApiException(400, "Missing the required parameter 'servings' when calling parseIngredients");
    }

    // create path and map variables
    String localVarPath = "/recipes/parseIngredients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (ingredientList != null) {
        localVarBuilder.addTextBody("ingredientList", ApiInvoker.parameterToString(ingredientList), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (servings != null) {
        localVarBuilder.addTextBody("servings", ApiInvoker.parameterToString(servings), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (includeNutrition != null) {
        localVarBuilder.addTextBody("includeNutrition", ApiInvoker.parameterToString(includeNutrition), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("ingredientList", ApiInvoker.parameterToString(ingredientList));
localVarFormParams.put("servings", ApiInvoker.parameterToString(servings));
localVarFormParams.put("includeNutrition", ApiInvoker.parameterToString(includeNutrition));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Quick Answer
   * Answer a nutrition related natural language question.
   * @param q The nutrition-related question.
   * @return Object
   */
  public Object  quickAnswer (String q) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
       throw new ApiException(400, "Missing the required parameter 'q' when calling quickAnswer");
    }

    // create path and map variables
    String localVarPath = "/recipes/quickAnswer".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Food Videos
   * Find recipe and other food related videos.
   * @param query The search query.
   * @param type The type of the recipes. See a full list of supported meal types.
   * @param cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
   * @param diet The diet to which the recipes must be compliant. See a full list of supported diets.
   * @param includeIngredients A comma-separated list of ingredients that should/must be contained in the recipe.
   * @param excludeIngredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
   * @param minLength Minimum video length in seconds.
   * @param maxLength Maximum video length in seconds.
   * @param offset The number of results to skip (between 0 and 900).
   * @param number The number of results to return (between 1 and 100).
   * @return Object
   */
  public Object  searchFoodVideos (String query, String type, String cuisine, String diet, String includeIngredients, String excludeIngredients, BigDecimal minLength, BigDecimal maxLength, BigDecimal offset, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling searchFoodVideos");
    }

    // create path and map variables
    String localVarPath = "/food/videos/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "cuisine", cuisine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeIngredients", includeIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "excludeIngredients", excludeIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minLength", minLength));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxLength", maxLength));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Grocery Products
   * Search packaged food products such as frozen pizza and snickers bars.
   * @param query The search query.
   * @param minCalories The minimum number of calories the product must have.
   * @param maxCalories The maximum number of calories the product can have.
   * @param minCarbs The minimum number of carbohydrates in grams the product must have.
   * @param maxCarbs The maximum number of carbohydrates in grams the product can have.
   * @param minProtein The minimum number of protein in grams the product must have.
   * @param maxProtein The maximum number of protein in grams the product can have.
   * @param minFat The minimum number of fat in grams the product must have.
   * @param maxFat The maximum number of fat in grams the product can have.
   * @param offset The offset number for paging (between 0 and 990).
   * @param number The number of expected results (between 1 and 100).
   * @return Object
   */
  public Object  searchGroceryProducts (String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling searchGroceryProducts");
    }

    // create path and map variables
    String localVarPath = "/food/products/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Grocery Products by UPC
   * Get information about a food product given its UPC.
   * @param upc The product&#39;s UPC.
   * @return Object
   */
  public Object  searchGroceryProductsByUPC (BigDecimal upc) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'upc' is set
    if (upc == null) {
       throw new ApiException(400, "Missing the required parameter 'upc' when calling searchGroceryProductsByUPC");
    }

    // create path and map variables
    String localVarPath = "/food/products/upc/{upc}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upc" + "\\}", apiInvoker.escapeString(upc.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Menu Items
   * Search over 115,000 menu items from over 800 fast food and chain restaurants such as McDonalds Big Mac or Starbucks Mocha.
   * @param query The search query.
   * @param minCalories The minimum number of calories the menu item must have.
   * @param maxCalories The maximum number of calories the menu item can have.
   * @param minCarbs The minimum number of carbohydrates in grams the menu item must have.
   * @param maxCarbs The maximum number of carbohydrates in grams the menu item can have.
   * @param minProtein The minimum number of protein in grams the menu item must have.
   * @param maxProtein The maximum number of protein in grams the menu item can have.
   * @param minFat The minimum number of fat in grams the menu item must have.
   * @param maxFat The maximum number of fat in grams the menu item can have.
   * @param offset The offset number for paging (between 0 and 990).
   * @param number The number of expected results (between 1 and 10).
   * @return Object
   */
  public Object  searchMenuItems (String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, BigDecimal offset, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling searchMenuItems");
    }

    // create path and map variables
    String localVarPath = "/food/menuItems/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Recipes
   * Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \&quot;Search Recipes Complex\&quot; endpoint for much more flexibility.
   * @param query The (natural language) recipe search query.
   * @param cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
   * @param diet The diet to which the recipes must be compliant. See a full list of supported diets.
   * @param excludeIngredients An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
   * @param intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
   * @param offset The number of results to skip (between 0 and 900).
   * @param number The number of results to return (between 1 and 100).
   * @param limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
   * @param instructionsRequired Whether the recipes must have instructions.
   * @return Object
   */
  public Object  searchRecipes (String query, String cuisine, String diet, String excludeIngredients, String intolerances, BigDecimal offset, BigDecimal number, Boolean limitLicense, Boolean instructionsRequired) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling searchRecipes");
    }

    // create path and map variables
    String localVarPath = "/recipes/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "cuisine", cuisine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "excludeIngredients", excludeIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "intolerances", intolerances));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "instructionsRequired", instructionsRequired));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Recipes by Ingredients
   * Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a \&quot;what&#39;s in your fridge\&quot; API endpoint.
   * @param ingredients A comma-separated list of ingredients that the recipes should contain.
   * @param number The maximal number of recipes to return (between 1 and 100). Defaults to 10.
   * @param limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
   * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
   * @param ignorePantry Whether to ignore pantry ingredients such as water, salt, flour etc.
   * @return Object
   */
  public Object  searchRecipesByIngredients (String ingredients, BigDecimal number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredients' is set
    if (ingredients == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredients' when calling searchRecipesByIngredients");
    }

    // create path and map variables
    String localVarPath = "/recipes/findByIngredients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ingredients", ingredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ranking", ranking));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ignorePantry", ignorePantry));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Recipes by Nutrients
   * Find a set of recipes that adhere to the given nutritional limits. All the returned recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
   * @param minCarbs The minimum number of carbohydrates in grams the recipe must have.
   * @param maxCarbs The maximum number of carbohydrates in grams the recipe can have.
   * @param minProtein The minimum number of protein in grams the recipe must have.
   * @param maxProtein The maximum number of protein in grams the recipe can have.
   * @param minCalories The minimum number of calories the recipe must have.
   * @param maxCalories The maximum number of calories the recipe can have.
   * @param minFat The minimum number of fat in grams the recipe must have.
   * @param maxFat The maximum number of fat in grams the recipe can have.
   * @param minAlcohol The minimum number of alcohol in grams the recipe must have.
   * @param maxAlcohol The maximum number of alcohol in grams the recipe must have.
   * @param minCaffeine The minimum number of milligrams of caffeine the recipe must have.
   * @param maxCaffeine The maximum number of alcohol in grams the recipe must have.
   * @param minCopper The minimum number of copper in milligrams the recipe must have.
   * @param maxCopper The maximum number of copper in milligrams the recipe must have.
   * @param minCalcium The minimum number of calcium in milligrams the recipe must have.
   * @param maxCalcium The maximum number of calcium in milligrams the recipe must have.
   * @param minCholine The minimum number of choline in milligrams the recipe must have.
   * @param maxCholine The maximum number of choline in milligrams the recipe can have.
   * @param minCholesterol The minimum number of cholesterol in milligrams the recipe must have.
   * @param maxCholesterol The maximum number of cholesterol in milligrams the recipe must have.
   * @param minFluoride The minimum number of fluoride in milligrams the recipe must have.
   * @param maxFluoride The maximum number of fluoride in milligrams the recipe can have.
   * @param minSaturatedFat The minimum number of saturated fat in grams the recipe must have.
   * @param maxSaturatedFat The maximum number of saturated fat in grams the recipe must have.
   * @param minVitaminA The minimum number of Vitamin A in IU the recipe must have.
   * @param maxVitaminA The maximum number of Vitamin A in IU the recipe must have.
   * @param minVitaminC The minimum number of Vitamin C milligrams the recipe must have.
   * @param maxVitaminC The maximum number of Vitamin C in milligrams the recipe can have.
   * @param minVitaminD The minimum number of Vitamin D in micrograms the recipe must have.
   * @param maxVitaminD The maximum number of Vitamin D in micrograms the recipe must have.
   * @param minVitaminE The minimum number of Vitamin E in milligrams the recipe must have.
   * @param maxVitaminE The maximum number of Vitamin E in milligrams the recipe must have.
   * @param minVitaminK The minimum number of Vitamin K in micrograms the recipe must have.
   * @param maxVitaminK The maximum number of Vitamin K in micrograms the recipe must have.
   * @param minVitaminB1 The minimum number of Vitamin B1 in milligrams the recipe must have.
   * @param maxVitaminB1 The maximum number of Vitamin B1 in milligrams the recipe must have.
   * @param minVitaminB2 The minimum number of Vitamin B2 in milligrams the recipe must have.
   * @param maxVitaminB2 The maximum number of Vitamin B2 in milligrams the recipe must have.
   * @param minVitaminB5 The minimum number of Vitamin B5 in milligrams the recipe must have.
   * @param maxVitaminB5 The maximum number of Vitamin B5 in milligrams the recipe can have.
   * @param minVitaminB3 The minimum number of Vitamin B3 in milligrams the recipe must have.
   * @param maxVitaminB3 The maximum number of Vitamin B3 in milligrams the recipe can have.
   * @param minVitaminB6 The minimum number of Vitamin B6 in milligrams the recipe must have.
   * @param maxVitaminB6 The maximum number of Vitamin B6 in milligrams the recipe can have.
   * @param minVitaminB12 The minimum number of Vitamin B12 in micrograms the recipe must have.
   * @param maxVitaminB12 The maximum number of Vitamin B12 in micrograms the recipe must have.
   * @param minFiber The minimum number of fiber in grams the recipe must have.
   * @param maxFiber The maximum number of fiber in grams the recipe must have.
   * @param minFolate The minimum number of folate in grams the recipe must have.
   * @param maxFolate The maximum number of folate in grams the recipe must have.
   * @param minFolicAcid The minimum number of folic acid in grams the recipe must have.
   * @param maxFolicAcid The maximum number of folic acid in grams the recipe must have.
   * @param minIodine The minimum number of Iodine in grams the recipe must have.
   * @param maxIodine The maximum number of iodine in grams the recipe must have.
   * @param minIron The minimum number of iron in milligrams the recipe must have.
   * @param maxIron The maximum number of iron in milligrams the recipe can have.
   * @param minMagnesium The minimum number of magnesium in milligrams the recipe must have.
   * @param maxMagnesium The maximum number of magnesium in milligrams the recipe can have.
   * @param minManganese The minimum number of manganese in milligrams the recipe must have.
   * @param maxManganese The maximum number of manganese in milligrams the recipe can have.
   * @param minPhosphorus The minimum number of phosphorus in milligrams the recipe must have.
   * @param maxPhosphorus The maximum number of phosphorus in milligrams the recipe can have.
   * @param minPotassium The minimum number of potassium in milligrams the recipe must have.
   * @param maxPotassium The maximum number of potassium in milligrams the recipe can have.
   * @param minSelenium The minimum number of selenium in grams the recipe must have.
   * @param maxSelenium The maximum number of selenium in grams the recipe must have.
   * @param minSodium The minimum number of sodium in milligrams the recipe must have.
   * @param maxSodium The maximum number of sodium in milligrams the recipe must have.
   * @param minSugar The minimum number of sugar in grams the recipe must have.
   * @param maxSugar The maximum number of sugar in grams the recipe must have.
   * @param minZinc The minimum number of zinc in milligrams the recipe must have.
   * @param maxZinc The maximum number of zinc in milligrams the recipe can have.
   * @param offset The offset number for paging (between 0 and 990).
   * @param number The number of expected results (between 1 and 100).
   * @param random If true, every request will give you a random set of recipes within the requested limits.
   * @param limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
   * @return Object
   */
  public Object  searchRecipesByNutrients (BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean random, Boolean limitLicense) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/findByNutrients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minAlcohol", minAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxAlcohol", maxAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCaffeine", minCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCaffeine", maxCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCopper", minCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCopper", maxCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalcium", minCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalcium", maxCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholine", minCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholine", maxCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholesterol", minCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholesterol", maxCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFluoride", minFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFluoride", maxFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSaturatedFat", minSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSaturatedFat", maxSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminA", minVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminA", maxVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminC", minVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminC", maxVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminD", minVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminD", maxVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminE", minVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminE", maxVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminK", minVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminK", maxVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB1", minVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB1", maxVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB2", minVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB2", maxVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB5", minVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB5", maxVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB3", minVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB3", maxVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB6", minVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB6", maxVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB12", minVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB12", maxVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFiber", minFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFiber", maxFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolate", minFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolate", maxFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolicAcid", minFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolicAcid", maxFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIodine", minIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIodine", maxIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIron", minIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIron", maxIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minMagnesium", minMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxMagnesium", maxMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minManganese", minManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxManganese", maxManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPhosphorus", minPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPhosphorus", maxPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPotassium", minPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPotassium", maxPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSelenium", minSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSelenium", maxSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSodium", minSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSodium", maxSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSugar", minSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSugar", maxSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minZinc", minZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxZinc", maxZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "random", random));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Recipes Complex
   * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: Since this method combines searching by query, by ingredients, and by nutrients in one endpoint.
   * @param query The (natural language) recipe search query.
   * @param cuisine The cuisine(s) of the recipes. One or more comma separated (will be iterpreted as &#39;OR&#39;). See a full list of supported cuisines.
   * @param excludeCuisine The cuisine(s) the recipes must not match. One or more comma separated (will be iterpreted as &#39;AND&#39;). See a full list of supported cuisines.
   * @param diet The diet to which the recipes must be compliant. See a full list of supported diets.
   * @param intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
   * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
   * @param includeIngredients A comma-separated list of ingredients that should/must be contained in the recipe.
   * @param excludeIngredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
   * @param type The type of the recipes. See a full list of supported meal types.
   * @param instructionsRequired Whether the recipes must have instructions.
   * @param fillIngredients Add information about the used and missing ingredients in each recipe.
   * @param addRecipeInformation If set to true, you get more information about the recipes returned. This saves the calls to get recipe information.
   * @param author The username of the recipe author.
   * @param tags User defined tags that have to match.
   * @param titleMatch A text that has to match in the title of the recipes.
   * @param sort The strategy to sort recipes by. See a full list of supported sorting options.
   * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
   * @param minCarbs The minimum number of carbohydrates in grams the recipe must have.
   * @param maxCarbs The maximum number of carbohydrates in grams the recipe can have.
   * @param minProtein The minimum number of protein in grams the recipe must have.
   * @param maxProtein The maximum number of protein in grams the recipe can have.
   * @param minCalories The minimum number of calories the recipe must have.
   * @param maxCalories The maximum number of calories the recipe can have.
   * @param minFat The minimum number of fat in grams the recipe must have.
   * @param maxFat The maximum number of fat in grams the recipe can have.
   * @param minAlcohol The minimum number of alcohol in grams the recipe must have.
   * @param maxAlcohol The maximum number of alcohol in grams the recipe must have.
   * @param minCaffeine The minimum number of milligrams of caffeine the recipe must have.
   * @param maxCaffeine The maximum number of alcohol in grams the recipe must have.
   * @param minCopper The minimum number of copper in milligrams the recipe must have.
   * @param maxCopper The maximum number of copper in milligrams the recipe must have.
   * @param minCalcium The minimum number of calcium in milligrams the recipe must have.
   * @param maxCalcium The maximum number of calcium in milligrams the recipe must have.
   * @param minCholine The minimum number of choline in milligrams the recipe must have.
   * @param maxCholine The maximum number of choline in milligrams the recipe can have.
   * @param minCholesterol The minimum number of cholesterol in milligrams the recipe must have.
   * @param maxCholesterol The maximum number of cholesterol in milligrams the recipe must have.
   * @param minFluoride The minimum number of fluoride in milligrams the recipe must have.
   * @param maxFluoride The maximum number of fluoride in milligrams the recipe can have.
   * @param minSaturatedFat The minimum number of saturated fat in grams the recipe must have.
   * @param maxSaturatedFat The maximum number of saturated fat in grams the recipe must have.
   * @param minVitaminA The minimum number of Vitamin A in IU the recipe must have.
   * @param maxVitaminA The maximum number of Vitamin A in IU the recipe must have.
   * @param minVitaminC The minimum number of Vitamin C milligrams the recipe must have.
   * @param maxVitaminC The maximum number of Vitamin C in milligrams the recipe can have.
   * @param minVitaminD The minimum number of Vitamin D in micrograms the recipe must have.
   * @param maxVitaminD The maximum number of Vitamin D in micrograms the recipe must have.
   * @param minVitaminE The minimum number of Vitamin E in milligrams the recipe must have.
   * @param maxVitaminE The maximum number of Vitamin E in milligrams the recipe must have.
   * @param minVitaminK The minimum number of Vitamin K in micrograms the recipe must have.
   * @param maxVitaminK The maximum number of Vitamin K in micrograms the recipe must have.
   * @param minVitaminB1 The minimum number of Vitamin B1 in milligrams the recipe must have.
   * @param maxVitaminB1 The maximum number of Vitamin B1 in milligrams the recipe must have.
   * @param minVitaminB2 The minimum number of Vitamin B2 in milligrams the recipe must have.
   * @param maxVitaminB2 The maximum number of Vitamin B2 in milligrams the recipe must have.
   * @param minVitaminB5 The minimum number of Vitamin B5 in milligrams the recipe must have.
   * @param maxVitaminB5 The maximum number of Vitamin B5 in milligrams the recipe can have.
   * @param minVitaminB3 The minimum number of Vitamin B3 in milligrams the recipe must have.
   * @param maxVitaminB3 The maximum number of Vitamin B3 in milligrams the recipe can have.
   * @param minVitaminB6 The minimum number of Vitamin B6 in milligrams the recipe must have.
   * @param maxVitaminB6 The maximum number of Vitamin B6 in milligrams the recipe can have.
   * @param minVitaminB12 The minimum number of Vitamin B12 in micrograms the recipe must have.
   * @param maxVitaminB12 The maximum number of Vitamin B12 in micrograms the recipe must have.
   * @param minFiber The minimum number of fiber in grams the recipe must have.
   * @param maxFiber The maximum number of fiber in grams the recipe must have.
   * @param minFolate The minimum number of folate in grams the recipe must have.
   * @param maxFolate The maximum number of folate in grams the recipe must have.
   * @param minFolicAcid The minimum number of folic acid in grams the recipe must have.
   * @param maxFolicAcid The maximum number of folic acid in grams the recipe must have.
   * @param minIodine The minimum number of Iodine in grams the recipe must have.
   * @param maxIodine The maximum number of iodine in grams the recipe must have.
   * @param minIron The minimum number of iron in milligrams the recipe must have.
   * @param maxIron The maximum number of iron in milligrams the recipe can have.
   * @param minMagnesium The minimum number of magnesium in milligrams the recipe must have.
   * @param maxMagnesium The maximum number of magnesium in milligrams the recipe can have.
   * @param minManganese The minimum number of manganese in milligrams the recipe must have.
   * @param maxManganese The maximum number of manganese in milligrams the recipe can have.
   * @param minPhosphorus The minimum number of phosphorus in milligrams the recipe must have.
   * @param maxPhosphorus The maximum number of phosphorus in milligrams the recipe can have.
   * @param minPotassium The minimum number of potassium in milligrams the recipe must have.
   * @param maxPotassium The maximum number of potassium in milligrams the recipe can have.
   * @param minSelenium The minimum number of selenium in grams the recipe must have.
   * @param maxSelenium The maximum number of selenium in grams the recipe must have.
   * @param minSodium The minimum number of sodium in milligrams the recipe must have.
   * @param maxSodium The maximum number of sodium in milligrams the recipe must have.
   * @param minSugar The minimum number of sugar in grams the recipe must have.
   * @param maxSugar The maximum number of sugar in grams the recipe must have.
   * @param minZinc The minimum number of zinc in milligrams the recipe must have.
   * @param maxZinc The maximum number of zinc in milligrams the recipe can have.
   * @param offset The offset number for paging (between 0 and 990).
   * @param number The number of expected results (between 1 and 10).
   * @param limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
   * @return Object
   */
  public Object  searchRecipesComplex (String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, String author, String tags, String titleMatch, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, BigDecimal offset, BigDecimal number, Boolean limitLicense) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling searchRecipesComplex");
    }

    // create path and map variables
    String localVarPath = "/recipes/complexSearch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "cuisine", cuisine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "excludeCuisine", excludeCuisine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "intolerances", intolerances));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "equipment", equipment));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeIngredients", includeIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "excludeIngredients", excludeIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "instructionsRequired", instructionsRequired));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "fillIngredients", fillIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "addRecipeInformation", addRecipeInformation));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "author", author));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "titleMatch", titleMatch));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sortDirection", sortDirection));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minAlcohol", minAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxAlcohol", maxAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCaffeine", minCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCaffeine", maxCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCopper", minCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCopper", maxCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalcium", minCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalcium", maxCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholine", minCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholine", maxCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholesterol", minCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholesterol", maxCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFluoride", minFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFluoride", maxFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSaturatedFat", minSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSaturatedFat", maxSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminA", minVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminA", maxVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminC", minVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminC", maxVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminD", minVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminD", maxVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminE", minVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminE", maxVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminK", minVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminK", maxVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB1", minVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB1", maxVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB2", minVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB2", maxVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB5", minVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB5", maxVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB3", minVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB3", maxVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB6", minVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB6", maxVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB12", minVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB12", maxVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFiber", minFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFiber", maxFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolate", minFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolate", maxFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolicAcid", minFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolicAcid", maxFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIodine", minIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIodine", maxIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIron", minIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIron", maxIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minMagnesium", minMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxMagnesium", maxMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minManganese", minManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxManganese", maxManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPhosphorus", minPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPhosphorus", maxPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPotassium", minPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPotassium", maxPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSelenium", minSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSelenium", maxSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSodium", minSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSodium", maxSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSugar", minSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSugar", maxSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minZinc", minZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxZinc", maxZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Site Content
   * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggests on spoonacular.com. This is a suggest API so you can send partial strings as queries.
   * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
   * @return Object
   */
  public Object  searchSiteContent (String query) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling searchSiteContent");
    }

    // create path and map variables
    String localVarPath = "/food/site/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Summarize Recipe
   * Summarize the recipe in a short text.
   * @param id The recipe id.
   * @return Object
   */
  public Object  summarizeRecipe (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling summarizeRecipe");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/summary".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Talk to Chatbot
   * This endpoint can be used to have a conversation about food with the spoonacular chat bot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
   * @param text The request / question / answer from the user to the chat bot.
   * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
   * @return Object
   */
  public Object  talkToChatbot (String text, String contextId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'text' is set
    if (text == null) {
       throw new ApiException(400, "Missing the required parameter 'text' when calling talkToChatbot");
    }

    // create path and map variables
    String localVarPath = "/food/converse".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "text", text));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "contextId", contextId));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Equipment
   * Visualize the equipment used to make a recipe.
   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
   * @param servings The number of servings.
   * @param view Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
   * @return String
   */
  public String  visualizeEquipment (String ingredientList, BigDecimal servings, String view, Boolean defaultCss, Boolean showBacklink) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientList' is set
    if (ingredientList == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientList' when calling visualizeEquipment");
    }
    // verify the required parameter 'servings' is set
    if (servings == null) {
       throw new ApiException(400, "Missing the required parameter 'servings' when calling visualizeEquipment");
    }

    // create path and map variables
    String localVarPath = "/recipes/visualizeEquipment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (ingredientList != null) {
        localVarBuilder.addTextBody("ingredientList", ApiInvoker.parameterToString(ingredientList), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (servings != null) {
        localVarBuilder.addTextBody("servings", ApiInvoker.parameterToString(servings), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (view != null) {
        localVarBuilder.addTextBody("view", ApiInvoker.parameterToString(view), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (defaultCss != null) {
        localVarBuilder.addTextBody("defaultCss", ApiInvoker.parameterToString(defaultCss), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (showBacklink != null) {
        localVarBuilder.addTextBody("showBacklink", ApiInvoker.parameterToString(showBacklink), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("ingredientList", ApiInvoker.parameterToString(ingredientList));
localVarFormParams.put("servings", ApiInvoker.parameterToString(servings));
localVarFormParams.put("view", ApiInvoker.parameterToString(view));
localVarFormParams.put("defaultCss", ApiInvoker.parameterToString(defaultCss));
localVarFormParams.put("showBacklink", ApiInvoker.parameterToString(showBacklink));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Ingredients
   * Visualize ingredients of a recipe.
   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
   * @param servings The number of servings.
   * @param measure The initial measure, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
   * @param view Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
   * @return String
   */
  public String  visualizeIngredients (String ingredientList, BigDecimal servings, String measure, String view, Boolean defaultCss, Boolean showBacklink) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientList' is set
    if (ingredientList == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientList' when calling visualizeIngredients");
    }
    // verify the required parameter 'servings' is set
    if (servings == null) {
       throw new ApiException(400, "Missing the required parameter 'servings' when calling visualizeIngredients");
    }

    // create path and map variables
    String localVarPath = "/recipes/visualizeIngredients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (ingredientList != null) {
        localVarBuilder.addTextBody("ingredientList", ApiInvoker.parameterToString(ingredientList), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (servings != null) {
        localVarBuilder.addTextBody("servings", ApiInvoker.parameterToString(servings), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (measure != null) {
        localVarBuilder.addTextBody("measure", ApiInvoker.parameterToString(measure), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (view != null) {
        localVarBuilder.addTextBody("view", ApiInvoker.parameterToString(view), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (defaultCss != null) {
        localVarBuilder.addTextBody("defaultCss", ApiInvoker.parameterToString(defaultCss), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (showBacklink != null) {
        localVarBuilder.addTextBody("showBacklink", ApiInvoker.parameterToString(showBacklink), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("ingredientList", ApiInvoker.parameterToString(ingredientList));
localVarFormParams.put("servings", ApiInvoker.parameterToString(servings));
localVarFormParams.put("measure", ApiInvoker.parameterToString(measure));
localVarFormParams.put("view", ApiInvoker.parameterToString(view));
localVarFormParams.put("defaultCss", ApiInvoker.parameterToString(defaultCss));
localVarFormParams.put("showBacklink", ApiInvoker.parameterToString(showBacklink));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Menu Item Nutrition by ID
   * Visualize a menu items&#39; nutrition data.
   * @param id The menu item id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeMenuItemNutritionByID (BigDecimal id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeMenuItemNutritionByID");
    }

    // create path and map variables
    String localVarPath = "/food/menuItems/{id}/nutritionWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Price Breakdown
   * Visualize the price breakdown of a recipe.
   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
   * @param servings The number of servings.
   * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
   * @return String
   */
  public String  visualizePriceBreakdown (String ingredientList, BigDecimal servings, BigDecimal mode, Boolean defaultCss, Boolean showBacklink) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientList' is set
    if (ingredientList == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientList' when calling visualizePriceBreakdown");
    }
    // verify the required parameter 'servings' is set
    if (servings == null) {
       throw new ApiException(400, "Missing the required parameter 'servings' when calling visualizePriceBreakdown");
    }

    // create path and map variables
    String localVarPath = "/recipes/visualizePriceEstimator".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (ingredientList != null) {
        localVarBuilder.addTextBody("ingredientList", ApiInvoker.parameterToString(ingredientList), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (servings != null) {
        localVarBuilder.addTextBody("servings", ApiInvoker.parameterToString(servings), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mode != null) {
        localVarBuilder.addTextBody("mode", ApiInvoker.parameterToString(mode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (defaultCss != null) {
        localVarBuilder.addTextBody("defaultCss", ApiInvoker.parameterToString(defaultCss), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (showBacklink != null) {
        localVarBuilder.addTextBody("showBacklink", ApiInvoker.parameterToString(showBacklink), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("ingredientList", ApiInvoker.parameterToString(ingredientList));
localVarFormParams.put("servings", ApiInvoker.parameterToString(servings));
localVarFormParams.put("mode", ApiInvoker.parameterToString(mode));
localVarFormParams.put("defaultCss", ApiInvoker.parameterToString(defaultCss));
localVarFormParams.put("showBacklink", ApiInvoker.parameterToString(showBacklink));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Product Nutrition by ID
   * Visualize a grocery product&#39;s nutritional information.
   * @param id The id of the product.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeProductNutritionByID (BigDecimal id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeProductNutritionByID");
    }

    // create path and map variables
    String localVarPath = "/food/products/{id}/nutritionWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Recipe Equipment by ID
   * Visualize a recipe&#39;s equipment list.
   * @param id The recipe id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeRecipeEquipmentByID (BigDecimal id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipeEquipmentByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/equipmentWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Recipe Ingredients by ID
   * Visualize a recipe&#39;s ingredient list.
   * @param id The recipe id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeRecipeIngredientsByID (BigDecimal id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipeIngredientsByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/ingredientWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Recipe Nutrition
   * Visualize a recipe&#39;s nutrition data.
   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
   * @param servings The number of servings.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
   * @return String
   */
  public String  visualizeRecipeNutrition (String ingredientList, BigDecimal servings, Boolean defaultCss, Boolean showBacklink) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientList' is set
    if (ingredientList == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientList' when calling visualizeRecipeNutrition");
    }
    // verify the required parameter 'servings' is set
    if (servings == null) {
       throw new ApiException(400, "Missing the required parameter 'servings' when calling visualizeRecipeNutrition");
    }

    // create path and map variables
    String localVarPath = "/recipes/visualizeNutrition".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (ingredientList != null) {
        localVarBuilder.addTextBody("ingredientList", ApiInvoker.parameterToString(ingredientList), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (servings != null) {
        localVarBuilder.addTextBody("servings", ApiInvoker.parameterToString(servings), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (defaultCss != null) {
        localVarBuilder.addTextBody("defaultCss", ApiInvoker.parameterToString(defaultCss), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (showBacklink != null) {
        localVarBuilder.addTextBody("showBacklink", ApiInvoker.parameterToString(showBacklink), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("ingredientList", ApiInvoker.parameterToString(ingredientList));
localVarFormParams.put("servings", ApiInvoker.parameterToString(servings));
localVarFormParams.put("defaultCss", ApiInvoker.parameterToString(defaultCss));
localVarFormParams.put("showBacklink", ApiInvoker.parameterToString(showBacklink));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Recipe Nutrition by ID
   * Visualize a recipe&#39;s nutritional information.
   * @param id The id of the product.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeRecipeNutritionByID (BigDecimal id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipeNutritionByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/nutritionWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Visualize Recipe Price Breakdown by ID
   * Visualize a recipe&#39;s price breakdown.
   * @param id The recipe id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeRecipePriceBreakdownByID (BigDecimal id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipePriceBreakdownByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/priceBreakdownWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
