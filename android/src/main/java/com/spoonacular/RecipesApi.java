/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular;

import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiInvoker;
import com.spoonacular.client.Pair;

import com.spoonacular.client.model.*;

import java.util.*;

import java.math.BigDecimal;
import com.spoonacular.client.model.InlineObject;
import com.spoonacular.client.model.InlineResponse200;
import com.spoonacular.client.model.InlineResponse2001;
import com.spoonacular.client.model.InlineResponse20010;
import com.spoonacular.client.model.InlineResponse20011;
import com.spoonacular.client.model.InlineResponse20012;
import com.spoonacular.client.model.InlineResponse20013;
import com.spoonacular.client.model.InlineResponse20014;
import com.spoonacular.client.model.InlineResponse20015;
import com.spoonacular.client.model.InlineResponse20016;
import com.spoonacular.client.model.InlineResponse20017;
import com.spoonacular.client.model.InlineResponse20018;
import com.spoonacular.client.model.InlineResponse20019;
import com.spoonacular.client.model.InlineResponse2002;
import com.spoonacular.client.model.InlineResponse20020;
import com.spoonacular.client.model.InlineResponse20021;
import com.spoonacular.client.model.InlineResponse20023;
import com.spoonacular.client.model.InlineResponse2003;
import com.spoonacular.client.model.InlineResponse2004;
import com.spoonacular.client.model.InlineResponse2005;
import com.spoonacular.client.model.InlineResponse20050;
import com.spoonacular.client.model.InlineResponse2006;
import com.spoonacular.client.model.InlineResponse2007;
import com.spoonacular.client.model.InlineResponse2008;
import com.spoonacular.client.model.InlineResponse2009;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class RecipesApi {
  String basePath = "https://api.spoonacular.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Analyze a Recipe Search Query
   * Parse a recipe search query to find out its intention.
   * @param q The recipe search query.
   * @return InlineResponse20018
   */
  public InlineResponse20018  analyzeARecipeSearchQuery (String q) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
       throw new ApiException(400, "Missing the required parameter 'q' when calling analyzeARecipeSearchQuery");
    }

    // create path and map variables
    String localVarPath = "/recipes/queries/analyze".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20018) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20018.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Analyze Recipe Instructions
   * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
   * @param contentType The content type.
   * @return InlineResponse20016
   */
  public InlineResponse20016  analyzeRecipeInstructions (String contentType) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/analyzeInstructions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20016) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20016.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Autocomplete Recipe Search
   * Autocomplete a partial input to suggest possible recipe names.
   * @param query The (natural language) search query.
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @return List<InlineResponse2007>
   */
  public List<InlineResponse2007>  autocompleteRecipeSearch (String query, Integer number) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/autocomplete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse2007>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2007.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Classify Cuisine
   * Classify the recipe&#39;s cuisine.
   * @param contentType The content type.
   * @return InlineResponse20017
   */
  public InlineResponse20017  classifyCuisine (String contentType) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/cuisine".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20017) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20017.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Compute Glycemic Load
   * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
   * @param inlineObject 
   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
   * @return InlineResponse20023
   */
  public InlineResponse20023  computeGlycemicLoad (InlineObject inlineObject, String language) throws ApiException {
    Object localVarPostBody = inlineObject;
    // verify the required parameter 'inlineObject' is set
    if (inlineObject == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject' when calling computeGlycemicLoad");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/glycemicLoad".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "language", language));


    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20023) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20023.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Convert Amounts
   * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
   * @param ingredientName The ingredient which you want to convert.
   * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
   * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
   * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
   * @return InlineResponse20019
   */
  public InlineResponse20019  convertAmounts (String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientName' is set
    if (ingredientName == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientName' when calling convertAmounts");
    }
    // verify the required parameter 'sourceAmount' is set
    if (sourceAmount == null) {
       throw new ApiException(400, "Missing the required parameter 'sourceAmount' when calling convertAmounts");
    }
    // verify the required parameter 'sourceUnit' is set
    if (sourceUnit == null) {
       throw new ApiException(400, "Missing the required parameter 'sourceUnit' when calling convertAmounts");
    }
    // verify the required parameter 'targetUnit' is set
    if (targetUnit == null) {
       throw new ApiException(400, "Missing the required parameter 'targetUnit' when calling convertAmounts");
    }

    // create path and map variables
    String localVarPath = "/recipes/convert".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ingredientName", ingredientName));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sourceAmount", sourceAmount));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sourceUnit", sourceUnit));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "targetUnit", targetUnit));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20019) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20019.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Create Recipe Card
   * Generate a recipe card for a recipe.
   * @param contentType The content type.
   * @return InlineResponse20015
   */
  public InlineResponse20015  createRecipeCard (String contentType) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/visualizeRecipe".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] localVarContentTypes = {
      "multipart/form-data"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20015) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20015.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Equipment by ID Image
   * Visualize a recipe&#39;s equipment list as an image.
   * @param id The recipe id.
   * @return Object
   */
  public Object  equipmentByIDImage (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling equipmentByIDImage");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/equipmentWidget.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Extract Recipe from Website
   * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
   * @param url The URL of the recipe page.
   * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
   * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
   * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
   * @param includeTaste Whether taste data should be added to correctly parsed ingredients.
   * @return InlineResponse2003
   */
  public InlineResponse2003  extractRecipeFromWebsite (String url, Boolean forceExtraction, Boolean analyze, Boolean includeNutrition, Boolean includeTaste) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'url' is set
    if (url == null) {
       throw new ApiException(400, "Missing the required parameter 'url' when calling extractRecipeFromWebsite");
    }

    // create path and map variables
    String localVarPath = "/recipes/extract".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "forceExtraction", forceExtraction));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "analyze", analyze));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeNutrition", includeNutrition));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeTaste", includeTaste));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2003) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2003.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Analyzed Recipe Instructions
   * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
   * @param id The item&#39;s id.
   * @param stepBreakdown Whether to break down the recipe steps even more.
   * @return InlineResponse20013
   */
  public InlineResponse20013  getAnalyzedRecipeInstructions (Integer id, Boolean stepBreakdown) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getAnalyzedRecipeInstructions");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/analyzedInstructions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "stepBreakdown", stepBreakdown));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20013) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20013.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Random Recipes
   * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
   * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
   * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @return InlineResponse2006
   */
  public InlineResponse2006  getRandomRecipes (Boolean limitLicense, String tags, Integer number) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/random".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2006) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2006.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Equipment by ID
   * Get a recipe&#39;s equipment list.
   * @param id The item&#39;s id.
   * @return InlineResponse2009
   */
  public InlineResponse2009  getRecipeEquipmentByID (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeEquipmentByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/equipmentWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2009) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2009.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Information
   * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
   * @param id The item&#39;s id.
   * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
   * @return InlineResponse2003
   */
  public InlineResponse2003  getRecipeInformation (Integer id, Boolean includeNutrition) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeInformation");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/information".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeNutrition", includeNutrition));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2003) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2003.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Recipe Information Bulk
   * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
   * @param ids A comma-separated list of recipe ids.
   * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
   * @return List<InlineResponse2004>
   */
  public List<InlineResponse2004>  getRecipeInformationBulk (String ids, Boolean includeNutrition) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ids' is set
    if (ids == null) {
       throw new ApiException(400, "Missing the required parameter 'ids' when calling getRecipeInformationBulk");
    }

    // create path and map variables
    String localVarPath = "/recipes/informationBulk".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeNutrition", includeNutrition));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse2004>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2004.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Ingredients by ID
   * Get a recipe&#39;s ingredient list.
   * @param id The item&#39;s id.
   * @return InlineResponse20011
   */
  public InlineResponse20011  getRecipeIngredientsByID (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeIngredientsByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/ingredientWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20011) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20011.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Nutrition by ID
   * Get a recipe&#39;s nutrition data.
   * @param id The item&#39;s id.
   * @return InlineResponse20012
   */
  public InlineResponse20012  getRecipeNutritionWidgetByID (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeNutritionWidgetByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/nutritionWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20012) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20012.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Price Breakdown by ID
   * Get a recipe&#39;s price breakdown data.
   * @param id The item&#39;s id.
   * @return InlineResponse20010
   */
  public InlineResponse20010  getRecipePriceBreakdownByID (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipePriceBreakdownByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/priceBreakdownWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20010) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20010.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Taste by ID
   * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
   * @param id The item&#39;s id.
   * @param normalize Normalize to the strongest taste.
   * @return InlineResponse2008
   */
  public InlineResponse2008  getRecipeTasteByID (Integer id, Boolean normalize) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getRecipeTasteByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/tasteWidget.json".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "normalize", normalize));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Similar Recipes
   * Find recipes which are similar to the given one.
   * @param id The item&#39;s id.
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
   * @return List<InlineResponse2005>
   */
  public List<InlineResponse2005>  getSimilarRecipes (Integer id, Integer number, Boolean limitLicense) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getSimilarRecipes");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/similar".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse2005>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2005.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Guess Nutrition by Dish Name
   * Estimate the macronutrients of a dish based on its title.
   * @param title The title of the dish.
   * @return InlineResponse20021
   */
  public InlineResponse20021  guessNutritionByDishName (String title) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'title' is set
    if (title == null) {
       throw new ApiException(400, "Missing the required parameter 'title' when calling guessNutritionByDishName");
    }

    // create path and map variables
    String localVarPath = "/recipes/guessNutrition".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "title", title));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20021) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20021.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Ingredients by ID Image
   * Visualize a recipe&#39;s ingredient list.
   * @param id The recipe id.
   * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.
   * @return Object
   */
  public Object  ingredientsByIDImage (BigDecimal id, String measure) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling ingredientsByIDImage");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/ingredientWidget.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "measure", measure));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Parse Ingredients
   * Extract an ingredient from plain text.
   * @param contentType The content type.
   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
   * @return List<InlineResponse20020>
   */
  public List<InlineResponse20020>  parseIngredients (String contentType, String language) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/parseIngredients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "language", language));

    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse20020>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse20020.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Price Breakdown by ID Image
   * Visualize a recipe&#39;s price breakdown.
   * @param id The recipe id.
   * @return Object
   */
  public Object  priceBreakdownByIDImage (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling priceBreakdownByIDImage");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/priceBreakdownWidget.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Quick Answer
   * Answer a nutrition related natural language question.
   * @param q The nutrition related question.
   * @return InlineResponse20050
   */
  public InlineResponse20050  quickAnswer (String q) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
       throw new ApiException(400, "Missing the required parameter 'q' when calling quickAnswer");
    }

    // create path and map variables
    String localVarPath = "/recipes/quickAnswer".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20050) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20050.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Nutrition by ID Image
   * Visualize a recipe&#39;s nutritional information as an image.
   * @param id The recipe id.
   * @return Object
   */
  public Object  recipeNutritionByIDImage (BigDecimal id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling recipeNutritionByIDImage");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/nutritionWidget.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Nutrition Label Image
   * Get a recipe&#39;s nutrition label as an image.
   * @param id The recipe id.
   * @param showOptionalNutrients Whether to show optional nutrients.
   * @param showZeroValues Whether to show zero values.
   * @param showIngredients Whether to show a list of ingredients.
   * @return Object
   */
  public Object  recipeNutritionLabelImage (BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling recipeNutritionLabelImage");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/nutritionLabel.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "showOptionalNutrients", showOptionalNutrients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "showZeroValues", showZeroValues));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "showIngredients", showIngredients));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Nutrition Label Widget
   * Get a recipe&#39;s nutrition label as an HTML widget.
   * @param id The recipe id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param showOptionalNutrients Whether to show optional nutrients.
   * @param showZeroValues Whether to show zero values.
   * @param showIngredients Whether to show a list of ingredients.
   * @return String
   */
  public String  recipeNutritionLabelWidget (BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling recipeNutritionLabelWidget");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/nutritionLabel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "showOptionalNutrients", showOptionalNutrients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "showZeroValues", showZeroValues));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "showIngredients", showIngredients));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Taste by ID Image
   * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
   * @param id The recipe id.
   * @param normalize Normalize to the strongest taste.
   * @param rgb Red, green, blue values for the chart color.
   * @return Object
   */
  public Object  recipeTasteByIDImage (BigDecimal id, Boolean normalize, String rgb) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling recipeTasteByIDImage");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/tasteWidget.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "normalize", normalize));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "rgb", rgb));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Recipes
   * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
   * @param query The (natural language) search query.
   * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.
   * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.
   * @param diet The diet for which the recipes must be suitable. See a full list of supported diets.
   * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
   * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
   * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes.
   * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
   * @param type The type of recipe. See a full list of supported meal types.
   * @param instructionsRequired Whether the recipes must have instructions.
   * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query.
   * @param addRecipeInformation If set to true, you get more information about the recipes returned.
   * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned.
   * @param author The username of the recipe author.
   * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
   * @param recipeBoxId The id of the recipe box to which the search should be limited to.
   * @param titleMatch Enter text that must be found in the title of the recipes.
   * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe.
   * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
   * @param sort The strategy to sort recipes by. See a full list of supported sorting options.
   * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
   * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have.
   * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have.
   * @param minProtein The minimum amount of protein in grams the recipe must have.
   * @param maxProtein The maximum amount of protein in grams the recipe can have.
   * @param minCalories The minimum amount of calories the recipe must have.
   * @param maxCalories The maximum amount of calories the recipe can have.
   * @param minFat The minimum amount of fat in grams the recipe must have.
   * @param maxFat The maximum amount of fat in grams the recipe can have.
   * @param minAlcohol The minimum amount of alcohol in grams the recipe must have.
   * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have.
   * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have.
   * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have.
   * @param minCopper The minimum amount of copper in milligrams the recipe must have.
   * @param maxCopper The maximum amount of copper in milligrams the recipe can have.
   * @param minCalcium The minimum amount of calcium in milligrams the recipe must have.
   * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have.
   * @param minCholine The minimum amount of choline in milligrams the recipe must have.
   * @param maxCholine The maximum amount of choline in milligrams the recipe can have.
   * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have.
   * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have.
   * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have.
   * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have.
   * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have.
   * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have.
   * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have.
   * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have.
   * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have.
   * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have.
   * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have.
   * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have.
   * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have.
   * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have.
   * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have.
   * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have.
   * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
   * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
   * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
   * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
   * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
   * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
   * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
   * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
   * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
   * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
   * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
   * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
   * @param minFiber The minimum amount of fiber in grams the recipe must have.
   * @param maxFiber The maximum amount of fiber in grams the recipe can have.
   * @param minFolate The minimum amount of folate in micrograms the recipe must have.
   * @param maxFolate The maximum amount of folate in micrograms the recipe can have.
   * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have.
   * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have.
   * @param minIodine The minimum amount of iodine in micrograms the recipe must have.
   * @param maxIodine The maximum amount of iodine in micrograms the recipe can have.
   * @param minIron The minimum amount of iron in milligrams the recipe must have.
   * @param maxIron The maximum amount of iron in milligrams the recipe can have.
   * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have.
   * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have.
   * @param minManganese The minimum amount of manganese in milligrams the recipe must have.
   * @param maxManganese The maximum amount of manganese in milligrams the recipe can have.
   * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have.
   * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have.
   * @param minPotassium The minimum amount of potassium in milligrams the recipe must have.
   * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have.
   * @param minSelenium The minimum amount of selenium in micrograms the recipe must have.
   * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have.
   * @param minSodium The minimum amount of sodium in milligrams the recipe must have.
   * @param maxSodium The maximum amount of sodium in milligrams the recipe can have.
   * @param minSugar The minimum amount of sugar in grams the recipe must have.
   * @param maxSugar The maximum amount of sugar in grams the recipe can have.
   * @param minZinc The minimum amount of zinc in milligrams the recipe must have.
   * @param maxZinc The maximum amount of zinc in milligrams the recipe can have.
   * @param offset The number of results to skip (between 0 and 900).
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
   * @return InlineResponse200
   */
  public InlineResponse200  searchRecipes (String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean limitLicense) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/complexSearch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "cuisine", cuisine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "excludeCuisine", excludeCuisine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "intolerances", intolerances));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "equipment", equipment));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "includeIngredients", includeIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "excludeIngredients", excludeIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "instructionsRequired", instructionsRequired));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "fillIngredients", fillIngredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "addRecipeInformation", addRecipeInformation));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "addRecipeNutrition", addRecipeNutrition));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "author", author));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "recipeBoxId", recipeBoxId));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "titleMatch", titleMatch));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxReadyTime", maxReadyTime));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ignorePantry", ignorePantry));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sortDirection", sortDirection));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minAlcohol", minAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxAlcohol", maxAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCaffeine", minCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCaffeine", maxCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCopper", minCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCopper", maxCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalcium", minCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalcium", maxCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholine", minCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholine", maxCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholesterol", minCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholesterol", maxCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFluoride", minFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFluoride", maxFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSaturatedFat", minSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSaturatedFat", maxSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminA", minVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminA", maxVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminC", minVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminC", maxVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminD", minVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminD", maxVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminE", minVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminE", maxVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminK", minVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminK", maxVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB1", minVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB1", maxVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB2", minVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB2", maxVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB5", minVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB5", maxVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB3", minVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB3", maxVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB6", minVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB6", maxVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB12", minVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB12", maxVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFiber", minFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFiber", maxFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolate", minFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolate", maxFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolicAcid", minFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolicAcid", maxFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIodine", minIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIodine", maxIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIron", minIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIron", maxIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minMagnesium", minMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxMagnesium", maxMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minManganese", minManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxManganese", maxManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPhosphorus", minPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPhosphorus", maxPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPotassium", minPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPotassium", maxPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSelenium", minSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSelenium", maxSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSodium", minSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSodium", maxSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSugar", minSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSugar", maxSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minZinc", minZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxZinc", maxZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Recipes by Ingredients
   *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
   * @param ingredients A comma-separated list of ingredients that the recipes should contain.
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
   * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
   * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
   * @return List<InlineResponse2001>
   */
  public List<InlineResponse2001>  searchRecipesByIngredients (String ingredients, Integer number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/findByIngredients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ingredients", ingredients));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ranking", ranking));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ignorePantry", ignorePantry));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse2001>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2001.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Search Recipes by Nutrients
   * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
   * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have.
   * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have.
   * @param minProtein The minimum amount of protein in grams the recipe must have.
   * @param maxProtein The maximum amount of protein in grams the recipe can have.
   * @param minCalories The minimum amount of calories the recipe must have.
   * @param maxCalories The maximum amount of calories the recipe can have.
   * @param minFat The minimum amount of fat in grams the recipe must have.
   * @param maxFat The maximum amount of fat in grams the recipe can have.
   * @param minAlcohol The minimum amount of alcohol in grams the recipe must have.
   * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have.
   * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have.
   * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have.
   * @param minCopper The minimum amount of copper in milligrams the recipe must have.
   * @param maxCopper The maximum amount of copper in milligrams the recipe can have.
   * @param minCalcium The minimum amount of calcium in milligrams the recipe must have.
   * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have.
   * @param minCholine The minimum amount of choline in milligrams the recipe must have.
   * @param maxCholine The maximum amount of choline in milligrams the recipe can have.
   * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have.
   * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have.
   * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have.
   * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have.
   * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have.
   * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have.
   * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have.
   * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have.
   * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have.
   * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have.
   * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have.
   * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have.
   * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have.
   * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have.
   * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have.
   * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have.
   * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
   * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
   * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
   * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
   * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
   * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
   * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
   * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
   * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
   * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
   * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
   * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
   * @param minFiber The minimum amount of fiber in grams the recipe must have.
   * @param maxFiber The maximum amount of fiber in grams the recipe can have.
   * @param minFolate The minimum amount of folate in micrograms the recipe must have.
   * @param maxFolate The maximum amount of folate in micrograms the recipe can have.
   * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have.
   * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have.
   * @param minIodine The minimum amount of iodine in micrograms the recipe must have.
   * @param maxIodine The maximum amount of iodine in micrograms the recipe can have.
   * @param minIron The minimum amount of iron in milligrams the recipe must have.
   * @param maxIron The maximum amount of iron in milligrams the recipe can have.
   * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have.
   * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have.
   * @param minManganese The minimum amount of manganese in milligrams the recipe must have.
   * @param maxManganese The maximum amount of manganese in milligrams the recipe can have.
   * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have.
   * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have.
   * @param minPotassium The minimum amount of potassium in milligrams the recipe must have.
   * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have.
   * @param minSelenium The minimum amount of selenium in micrograms the recipe must have.
   * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have.
   * @param minSodium The minimum amount of sodium in milligrams the recipe must have.
   * @param maxSodium The maximum amount of sodium in milligrams the recipe can have.
   * @param minSugar The minimum amount of sugar in grams the recipe must have.
   * @param maxSugar The maximum amount of sugar in grams the recipe can have.
   * @param minZinc The minimum amount of zinc in milligrams the recipe must have.
   * @param maxZinc The maximum amount of zinc in milligrams the recipe can have.
   * @param offset The number of results to skip (between 0 and 900).
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @param random If true, every request will give you a random set of recipes within the requested limits.
   * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
   * @return List<InlineResponse2002>
   */
  public List<InlineResponse2002>  searchRecipesByNutrients (BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean random, Boolean limitLicense) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/findByNutrients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minAlcohol", minAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxAlcohol", maxAlcohol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCaffeine", minCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCaffeine", maxCaffeine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCopper", minCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCopper", maxCopper));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCalcium", minCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalcium", maxCalcium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholine", minCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholine", maxCholine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCholesterol", minCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCholesterol", maxCholesterol));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFluoride", minFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFluoride", maxFluoride));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSaturatedFat", minSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSaturatedFat", maxSaturatedFat));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminA", minVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminA", maxVitaminA));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminC", minVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminC", maxVitaminC));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminD", minVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminD", maxVitaminD));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminE", minVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminE", maxVitaminE));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminK", minVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminK", maxVitaminK));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB1", minVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB1", maxVitaminB1));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB2", minVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB2", maxVitaminB2));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB5", minVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB5", maxVitaminB5));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB3", minVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB3", maxVitaminB3));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB6", minVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB6", maxVitaminB6));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minVitaminB12", minVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxVitaminB12", maxVitaminB12));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFiber", minFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFiber", maxFiber));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolate", minFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolate", maxFolate));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFolicAcid", minFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFolicAcid", maxFolicAcid));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIodine", minIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIodine", maxIodine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minIron", minIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxIron", maxIron));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minMagnesium", minMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxMagnesium", maxMagnesium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minManganese", minManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxManganese", maxManganese));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPhosphorus", minPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPhosphorus", maxPhosphorus));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minPotassium", minPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPotassium", maxPotassium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSelenium", minSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSelenium", maxSelenium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSodium", minSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSodium", maxSodium));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minSugar", minSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxSugar", maxSugar));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minZinc", minZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxZinc", maxZinc));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "random", random));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "limitLicense", limitLicense));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Summarize Recipe
   * Automatically generate a short description that summarizes key information about the recipe.
   * @param id The item&#39;s id.
   * @return InlineResponse20014
   */
  public InlineResponse20014  summarizeRecipe (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling summarizeRecipe");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/summary".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20014) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20014.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Equipment Widget
   * Visualize the equipment used to make a recipe.
   * @param contentType The content type.
   * @param accept Accept header.
   * @return String
   */
  public String  visualizeEquipment (String contentType, String accept) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/visualizeEquipment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    localVarHeaderParams.put("Accept", ApiInvoker.parameterToString(accept));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Price Breakdown Widget
   * Visualize the price breakdown of a recipe.
   * @param contentType The content type.
   * @param accept Accept header.
   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
   * @return String
   */
  public String  visualizePriceBreakdown (String contentType, String accept, String language) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/visualizePriceEstimator".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "language", language));

    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    localVarHeaderParams.put("Accept", ApiInvoker.parameterToString(accept));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Equipment by ID Widget
   * Visualize a recipe&#39;s equipment list.
   * @param id The item&#39;s id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeRecipeEquipmentByID (Integer id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipeEquipmentByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/equipmentWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Ingredients by ID Widget
   * Visualize a recipe&#39;s ingredient list.
   * @param id The item&#39;s id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.
   * @return String
   */
  public String  visualizeRecipeIngredientsByID (Integer id, Boolean defaultCss, String measure) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipeIngredientsByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/ingredientWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "measure", measure));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Nutrition Widget
   * Visualize a recipe&#39;s nutritional information as HTML including CSS.
   * @param contentType The content type.
   * @param accept Accept header.
   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
   * @return String
   */
  public String  visualizeRecipeNutrition (String contentType, String accept, String language) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/visualizeNutrition".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "language", language));

    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    localVarHeaderParams.put("Accept", ApiInvoker.parameterToString(accept));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Nutrition by ID Widget
   * Visualize a recipe&#39;s nutritional information as HTML including CSS.
   * @param id The item&#39;s id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param accept Accept header.
   * @return String
   */
  public String  visualizeRecipeNutritionByID (Integer id, Boolean defaultCss, String accept) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipeNutritionByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/nutritionWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));

    localVarHeaderParams.put("Accept", ApiInvoker.parameterToString(accept));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Price Breakdown by ID Widget
   * Visualize a recipe&#39;s price breakdown.
   * @param id The item&#39;s id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @return String
   */
  public String  visualizeRecipePriceBreakdownByID (Integer id, Boolean defaultCss) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipePriceBreakdownByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/priceBreakdownWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Taste Widget
   * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
   * @param contentType The content type.
   * @param accept Accept header.
   * @param normalize Whether to normalize to the strongest taste.
   * @param rgb Red, green, blue values for the chart color.
   * @return String
   */
  public String  visualizeRecipeTaste (String language, String contentType, String accept, Boolean normalize, String rgb) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/visualizeTaste".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "language", language));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "normalize", normalize));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "rgb", rgb));

    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    localVarHeaderParams.put("Accept", ApiInvoker.parameterToString(accept));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Recipe Taste by ID Widget
   * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
   * @param id The item&#39;s id.
   * @param normalize Whether to normalize to the strongest taste.
   * @param rgb Red, green, blue values for the chart color.
   * @return String
   */
  public String  visualizeRecipeTasteByID (Integer id, Boolean normalize, String rgb) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling visualizeRecipeTasteByID");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/tasteWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "normalize", normalize));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "rgb", rgb));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
