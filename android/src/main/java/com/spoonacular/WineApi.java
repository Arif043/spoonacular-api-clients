/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular;

import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiInvoker;
import com.spoonacular.client.Pair;

import com.spoonacular.client.model.*;

import java.util.*;

import java.math.BigDecimal;
import com.spoonacular.client.model.InlineResponse20044;
import com.spoonacular.client.model.InlineResponse20045;
import com.spoonacular.client.model.InlineResponse20046;
import com.spoonacular.client.model.InlineResponse20047;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class WineApi {
  String basePath = "https://api.spoonacular.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Dish Pairing for Wine
   * Find a dish that goes well with a given wine.
   * @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
   * @return InlineResponse20044
   */
  public InlineResponse20044  getDishPairingForWine (String wine) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'wine' is set
    if (wine == null) {
       throw new ApiException(400, "Missing the required parameter 'wine' when calling getDishPairingForWine");
    }

    // create path and map variables
    String localVarPath = "/food/wine/dishes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "wine", wine));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20044) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20044.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Wine Description
   * Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
   * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
   * @return InlineResponse20046
   */
  public InlineResponse20046  getWineDescription (String wine) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'wine' is set
    if (wine == null) {
       throw new ApiException(400, "Missing the required parameter 'wine' when calling getWineDescription");
    }

    // create path and map variables
    String localVarPath = "/food/wine/description".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "wine", wine));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20046) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20046.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Wine Pairing
   * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
   * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
   * @param maxPrice The maximum price for the specific wine recommendation in USD.
   * @return InlineResponse20045
   */
  public InlineResponse20045  getWinePairing (String food, BigDecimal maxPrice) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'food' is set
    if (food == null) {
       throw new ApiException(400, "Missing the required parameter 'food' when calling getWinePairing");
    }

    // create path and map variables
    String localVarPath = "/food/wine/pairing".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "food", food));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPrice", maxPrice));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20045) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20045.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Wine Recommendation
   * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
   * @param wine The type of wine to get a specific product recommendation for.
   * @param maxPrice The maximum price for the specific wine recommendation in USD.
   * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
   * @param number The number of wine recommendations expected (between 1 and 100).
   * @return InlineResponse20047
   */
  public InlineResponse20047  getWineRecommendation (String wine, BigDecimal maxPrice, BigDecimal minRating, BigDecimal number) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'wine' is set
    if (wine == null) {
       throw new ApiException(400, "Missing the required parameter 'wine' when calling getWineRecommendation");
    }

    // create path and map variables
    String localVarPath = "/food/wine/recommendation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "wine", wine));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxPrice", maxPrice));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minRating", minRating));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20047) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20047.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
