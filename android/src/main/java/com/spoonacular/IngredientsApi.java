/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular;

import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiInvoker;
import com.spoonacular.client.Pair;

import com.spoonacular.client.model.*;

import java.util.*;

import java.math.BigDecimal;
import com.spoonacular.client.model.InlineObject2;
import com.spoonacular.client.model.InlineResponse20022;
import com.spoonacular.client.model.InlineResponse20024;
import com.spoonacular.client.model.InlineResponse20025;
import com.spoonacular.client.model.InlineResponse20026;
import com.spoonacular.client.model.InlineResponse20034;
import com.spoonacular.client.model.RecipesParseIngredientsNutritionWeightPerServing;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class IngredientsApi {
  String basePath = "https://api.spoonacular.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Autocomplete Ingredient Search
   * Autocomplete the entry of an ingredient.
   * @param query The (natural language) search query.
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @param metaInformation Whether to return more meta information about the ingredients.
   * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
   * @return List<InlineResponse20024>
   */
  public List<InlineResponse20024>  autocompleteIngredientSearch (String query, Integer number, Boolean metaInformation, String intolerances) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/food/ingredients/autocomplete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "metaInformation", metaInformation));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "intolerances", intolerances));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse20024>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse20024.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Compute Ingredient Amount
   * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
   * @param id The id of the ingredient you want the amount for.
   * @param nutrient The target nutrient. See a list of supported nutrients.
   * @param target The target number of the given nutrient.
   * @param unit The target unit.
   * @return RecipesParseIngredientsNutritionWeightPerServing
   */
  public RecipesParseIngredientsNutritionWeightPerServing  computeIngredientAmount (BigDecimal id, String nutrient, BigDecimal target, String unit) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling computeIngredientAmount");
    }
    // verify the required parameter 'nutrient' is set
    if (nutrient == null) {
       throw new ApiException(400, "Missing the required parameter 'nutrient' when calling computeIngredientAmount");
    }
    // verify the required parameter 'target' is set
    if (target == null) {
       throw new ApiException(400, "Missing the required parameter 'target' when calling computeIngredientAmount");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/{id}/amount".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "nutrient", nutrient));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "target", target));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "unit", unit));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (RecipesParseIngredientsNutritionWeightPerServing) ApiInvoker.deserialize(localVarResponse, "", RecipesParseIngredientsNutritionWeightPerServing.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Ingredient Information
   * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
   * @param id The item&#39;s id.
   * @param amount The amount of this ingredient.
   * @param unit The unit for the given amount.
   * @return InlineResponse20022
   */
  public InlineResponse20022  getIngredientInformation (Integer id, BigDecimal amount, String unit) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getIngredientInformation");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/{id}/information".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "amount", amount));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "unit", unit));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20022) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20022.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Ingredient Substitutes
   * Search for substitutes for a given ingredient.
   * @param ingredientName The name of the ingredient you want to replace.
   * @return InlineResponse20026
   */
  public InlineResponse20026  getIngredientSubstitutes (String ingredientName) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'ingredientName' is set
    if (ingredientName == null) {
       throw new ApiException(400, "Missing the required parameter 'ingredientName' when calling getIngredientSubstitutes");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/substitutes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "ingredientName", ingredientName));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20026) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20026.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Get Ingredient Substitutes by ID
   * Search for substitutes for a given ingredient.
   * @param id The item&#39;s id.
   * @return InlineResponse20026
   */
  public InlineResponse20026  getIngredientSubstitutesByID (Integer id) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling getIngredientSubstitutesByID");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/{id}/substitutes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20026) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20026.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Ingredient Search
   * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
   * @param query The (natural language) search query.
   * @param addChildren Whether to add children of found foods.
   * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100).
   * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100).
   * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100).
   * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100).
   * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100).
   * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100).
   * @param metaInformation Whether to return more meta information about the ingredients.
   * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
   * @param sort The strategy to sort recipes by. See a full list of supported sorting options.
   * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
   * @param offset The number of results to skip (between 0 and 900).
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @return InlineResponse20025
   */
  public InlineResponse20025  ingredientSearch (String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, Integer offset, Integer number) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/food/ingredients/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "addChildren", addChildren));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minProteinPercent", minProteinPercent));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxProteinPercent", maxProteinPercent));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minFatPercent", minFatPercent));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxFatPercent", maxFatPercent));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbsPercent", minCarbsPercent));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbsPercent", maxCarbsPercent));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "metaInformation", metaInformation));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "intolerances", intolerances));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "sortDirection", sortDirection));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (InlineResponse20025) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20025.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Ingredients by ID Image
   * Visualize a recipe&#39;s ingredient list.
   * @param id The recipe id.
   * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.
   * @return Object
   */
  public Object  ingredientsByIDImage (BigDecimal id, String measure) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
       throw new ApiException(400, "Missing the required parameter 'id' when calling ingredientsByIDImage");
    }

    // create path and map variables
    String localVarPath = "/recipes/{id}/ingredientWidget.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "measure", measure));


    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Map Ingredients to Grocery Products
   * Map a set of ingredients to products you can buy in the grocery store.
   * @param inlineObject2 
   * @return List<InlineResponse20034>
   */
  public List<InlineResponse20034>  mapIngredientsToGroceryProducts (InlineObject2 inlineObject2) throws ApiException {
    Object localVarPostBody = inlineObject2;
    // verify the required parameter 'inlineObject2' is set
    if (inlineObject2 == null) {
       throw new ApiException(400, "Missing the required parameter 'inlineObject2' when calling mapIngredientsToGroceryProducts");
    }

    // create path and map variables
    String localVarPath = "/food/ingredients/map".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<InlineResponse20034>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse20034.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Ingredients Widget
   * Visualize ingredients of a recipe. You can play around with that endpoint!
   * @param contentType The content type.
   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
   * @param accept Accept header.
   * @return String
   */
  public String  visualizeIngredients (String contentType, String language, String accept) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/recipes/visualizeIngredients".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "language", language));

    localVarHeaderParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    localVarHeaderParams.put("Accept", ApiInvoker.parameterToString(accept));

    String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
