<?php
/**
 * GetRecipeInformationBulk200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  com.spoonacular.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.spoonacular.client\com.spoonacular.client.model;

use \ArrayAccess;
use \com.spoonacular.client\ObjectSerializer;

/**
 * GetRecipeInformationBulk200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  com.spoonacular.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetRecipeInformationBulk200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getRecipeInformationBulk_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'title' => 'string',
        'image' => 'string',
        'image_type' => 'string',
        'servings' => 'float',
        'ready_in_minutes' => 'int',
        'license' => 'string',
        'source_name' => 'string',
        'source_url' => 'string',
        'spoonacular_source_url' => 'string',
        'aggregate_likes' => 'int',
        'health_score' => 'float',
        'spoonacular_score' => 'float',
        'price_per_serving' => 'float',
        'analyzed_instructions' => 'string[]',
        'cheap' => 'bool',
        'credits_text' => 'string',
        'cuisines' => 'string[]',
        'dairy_free' => 'bool',
        'diets' => 'string[]',
        'gaps' => 'string',
        'gluten_free' => 'bool',
        'instructions' => 'string',
        'ketogenic' => 'bool',
        'low_fodmap' => 'bool',
        'occasions' => 'string[]',
        'sustainable' => 'bool',
        'vegan' => 'bool',
        'vegetarian' => 'bool',
        'very_healthy' => 'bool',
        'very_popular' => 'bool',
        'whole30' => 'bool',
        'weight_watcher_smart_points' => 'float',
        'dish_types' => 'string[]',
        'extended_ingredients' => '\com.spoonacular.client\com.spoonacular.client.model\GetRecipeInformation200ResponseExtendedIngredientsInner[]',
        'summary' => 'string',
        'wine_pairing' => '\com.spoonacular.client\com.spoonacular.client.model\GetRecipeInformation200ResponseWinePairing'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'title' => null,
        'image' => null,
        'image_type' => null,
        'servings' => null,
        'ready_in_minutes' => null,
        'license' => null,
        'source_name' => null,
        'source_url' => null,
        'spoonacular_source_url' => null,
        'aggregate_likes' => null,
        'health_score' => null,
        'spoonacular_score' => null,
        'price_per_serving' => null,
        'analyzed_instructions' => null,
        'cheap' => null,
        'credits_text' => null,
        'cuisines' => null,
        'dairy_free' => null,
        'diets' => null,
        'gaps' => null,
        'gluten_free' => null,
        'instructions' => null,
        'ketogenic' => null,
        'low_fodmap' => null,
        'occasions' => null,
        'sustainable' => null,
        'vegan' => null,
        'vegetarian' => null,
        'very_healthy' => null,
        'very_popular' => null,
        'whole30' => null,
        'weight_watcher_smart_points' => null,
        'dish_types' => null,
        'extended_ingredients' => null,
        'summary' => null,
        'wine_pairing' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'image' => 'image',
        'image_type' => 'imageType',
        'servings' => 'servings',
        'ready_in_minutes' => 'readyInMinutes',
        'license' => 'license',
        'source_name' => 'sourceName',
        'source_url' => 'sourceUrl',
        'spoonacular_source_url' => 'spoonacularSourceUrl',
        'aggregate_likes' => 'aggregateLikes',
        'health_score' => 'healthScore',
        'spoonacular_score' => 'spoonacularScore',
        'price_per_serving' => 'pricePerServing',
        'analyzed_instructions' => 'analyzedInstructions',
        'cheap' => 'cheap',
        'credits_text' => 'creditsText',
        'cuisines' => 'cuisines',
        'dairy_free' => 'dairyFree',
        'diets' => 'diets',
        'gaps' => 'gaps',
        'gluten_free' => 'glutenFree',
        'instructions' => 'instructions',
        'ketogenic' => 'ketogenic',
        'low_fodmap' => 'lowFodmap',
        'occasions' => 'occasions',
        'sustainable' => 'sustainable',
        'vegan' => 'vegan',
        'vegetarian' => 'vegetarian',
        'very_healthy' => 'veryHealthy',
        'very_popular' => 'veryPopular',
        'whole30' => 'whole30',
        'weight_watcher_smart_points' => 'weightWatcherSmartPoints',
        'dish_types' => 'dishTypes',
        'extended_ingredients' => 'extendedIngredients',
        'summary' => 'summary',
        'wine_pairing' => 'winePairing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'image' => 'setImage',
        'image_type' => 'setImageType',
        'servings' => 'setServings',
        'ready_in_minutes' => 'setReadyInMinutes',
        'license' => 'setLicense',
        'source_name' => 'setSourceName',
        'source_url' => 'setSourceUrl',
        'spoonacular_source_url' => 'setSpoonacularSourceUrl',
        'aggregate_likes' => 'setAggregateLikes',
        'health_score' => 'setHealthScore',
        'spoonacular_score' => 'setSpoonacularScore',
        'price_per_serving' => 'setPricePerServing',
        'analyzed_instructions' => 'setAnalyzedInstructions',
        'cheap' => 'setCheap',
        'credits_text' => 'setCreditsText',
        'cuisines' => 'setCuisines',
        'dairy_free' => 'setDairyFree',
        'diets' => 'setDiets',
        'gaps' => 'setGaps',
        'gluten_free' => 'setGlutenFree',
        'instructions' => 'setInstructions',
        'ketogenic' => 'setKetogenic',
        'low_fodmap' => 'setLowFodmap',
        'occasions' => 'setOccasions',
        'sustainable' => 'setSustainable',
        'vegan' => 'setVegan',
        'vegetarian' => 'setVegetarian',
        'very_healthy' => 'setVeryHealthy',
        'very_popular' => 'setVeryPopular',
        'whole30' => 'setWhole30',
        'weight_watcher_smart_points' => 'setWeightWatcherSmartPoints',
        'dish_types' => 'setDishTypes',
        'extended_ingredients' => 'setExtendedIngredients',
        'summary' => 'setSummary',
        'wine_pairing' => 'setWinePairing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'image' => 'getImage',
        'image_type' => 'getImageType',
        'servings' => 'getServings',
        'ready_in_minutes' => 'getReadyInMinutes',
        'license' => 'getLicense',
        'source_name' => 'getSourceName',
        'source_url' => 'getSourceUrl',
        'spoonacular_source_url' => 'getSpoonacularSourceUrl',
        'aggregate_likes' => 'getAggregateLikes',
        'health_score' => 'getHealthScore',
        'spoonacular_score' => 'getSpoonacularScore',
        'price_per_serving' => 'getPricePerServing',
        'analyzed_instructions' => 'getAnalyzedInstructions',
        'cheap' => 'getCheap',
        'credits_text' => 'getCreditsText',
        'cuisines' => 'getCuisines',
        'dairy_free' => 'getDairyFree',
        'diets' => 'getDiets',
        'gaps' => 'getGaps',
        'gluten_free' => 'getGlutenFree',
        'instructions' => 'getInstructions',
        'ketogenic' => 'getKetogenic',
        'low_fodmap' => 'getLowFodmap',
        'occasions' => 'getOccasions',
        'sustainable' => 'getSustainable',
        'vegan' => 'getVegan',
        'vegetarian' => 'getVegetarian',
        'very_healthy' => 'getVeryHealthy',
        'very_popular' => 'getVeryPopular',
        'whole30' => 'getWhole30',
        'weight_watcher_smart_points' => 'getWeightWatcherSmartPoints',
        'dish_types' => 'getDishTypes',
        'extended_ingredients' => 'getExtendedIngredients',
        'summary' => 'getSummary',
        'wine_pairing' => 'getWinePairing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['image_type'] = $data['image_type'] ?? null;
        $this->container['servings'] = $data['servings'] ?? null;
        $this->container['ready_in_minutes'] = $data['ready_in_minutes'] ?? null;
        $this->container['license'] = $data['license'] ?? null;
        $this->container['source_name'] = $data['source_name'] ?? null;
        $this->container['source_url'] = $data['source_url'] ?? null;
        $this->container['spoonacular_source_url'] = $data['spoonacular_source_url'] ?? null;
        $this->container['aggregate_likes'] = $data['aggregate_likes'] ?? null;
        $this->container['health_score'] = $data['health_score'] ?? null;
        $this->container['spoonacular_score'] = $data['spoonacular_score'] ?? null;
        $this->container['price_per_serving'] = $data['price_per_serving'] ?? null;
        $this->container['analyzed_instructions'] = $data['analyzed_instructions'] ?? null;
        $this->container['cheap'] = $data['cheap'] ?? null;
        $this->container['credits_text'] = $data['credits_text'] ?? null;
        $this->container['cuisines'] = $data['cuisines'] ?? null;
        $this->container['dairy_free'] = $data['dairy_free'] ?? null;
        $this->container['diets'] = $data['diets'] ?? null;
        $this->container['gaps'] = $data['gaps'] ?? null;
        $this->container['gluten_free'] = $data['gluten_free'] ?? null;
        $this->container['instructions'] = $data['instructions'] ?? null;
        $this->container['ketogenic'] = $data['ketogenic'] ?? null;
        $this->container['low_fodmap'] = $data['low_fodmap'] ?? null;
        $this->container['occasions'] = $data['occasions'] ?? null;
        $this->container['sustainable'] = $data['sustainable'] ?? null;
        $this->container['vegan'] = $data['vegan'] ?? null;
        $this->container['vegetarian'] = $data['vegetarian'] ?? null;
        $this->container['very_healthy'] = $data['very_healthy'] ?? null;
        $this->container['very_popular'] = $data['very_popular'] ?? null;
        $this->container['whole30'] = $data['whole30'] ?? null;
        $this->container['weight_watcher_smart_points'] = $data['weight_watcher_smart_points'] ?? null;
        $this->container['dish_types'] = $data['dish_types'] ?? null;
        $this->container['extended_ingredients'] = $data['extended_ingredients'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['wine_pairing'] = $data['wine_pairing'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ((mb_strlen($this->container['image']) < 1)) {
            $invalidProperties[] = "invalid value for 'image', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['image_type'] === null) {
            $invalidProperties[] = "'image_type' can't be null";
        }
        if ((mb_strlen($this->container['image_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'image_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['servings'] === null) {
            $invalidProperties[] = "'servings' can't be null";
        }
        if ($this->container['ready_in_minutes'] === null) {
            $invalidProperties[] = "'ready_in_minutes' can't be null";
        }
        if ($this->container['license'] === null) {
            $invalidProperties[] = "'license' can't be null";
        }
        if ((mb_strlen($this->container['license']) < 1)) {
            $invalidProperties[] = "invalid value for 'license', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['source_name'] === null) {
            $invalidProperties[] = "'source_name' can't be null";
        }
        if ((mb_strlen($this->container['source_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'source_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['source_url'] === null) {
            $invalidProperties[] = "'source_url' can't be null";
        }
        if ((mb_strlen($this->container['source_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'source_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['spoonacular_source_url'] === null) {
            $invalidProperties[] = "'spoonacular_source_url' can't be null";
        }
        if ((mb_strlen($this->container['spoonacular_source_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'spoonacular_source_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['aggregate_likes'] === null) {
            $invalidProperties[] = "'aggregate_likes' can't be null";
        }
        if ($this->container['health_score'] === null) {
            $invalidProperties[] = "'health_score' can't be null";
        }
        if ($this->container['spoonacular_score'] === null) {
            $invalidProperties[] = "'spoonacular_score' can't be null";
        }
        if ($this->container['price_per_serving'] === null) {
            $invalidProperties[] = "'price_per_serving' can't be null";
        }
        if ($this->container['analyzed_instructions'] === null) {
            $invalidProperties[] = "'analyzed_instructions' can't be null";
        }
        if ($this->container['cheap'] === null) {
            $invalidProperties[] = "'cheap' can't be null";
        }
        if ($this->container['credits_text'] === null) {
            $invalidProperties[] = "'credits_text' can't be null";
        }
        if ((mb_strlen($this->container['credits_text']) < 1)) {
            $invalidProperties[] = "invalid value for 'credits_text', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cuisines'] === null) {
            $invalidProperties[] = "'cuisines' can't be null";
        }
        if ($this->container['dairy_free'] === null) {
            $invalidProperties[] = "'dairy_free' can't be null";
        }
        if ($this->container['diets'] === null) {
            $invalidProperties[] = "'diets' can't be null";
        }
        if ($this->container['gaps'] === null) {
            $invalidProperties[] = "'gaps' can't be null";
        }
        if ((mb_strlen($this->container['gaps']) < 1)) {
            $invalidProperties[] = "invalid value for 'gaps', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['gluten_free'] === null) {
            $invalidProperties[] = "'gluten_free' can't be null";
        }
        if ($this->container['instructions'] === null) {
            $invalidProperties[] = "'instructions' can't be null";
        }
        if ($this->container['ketogenic'] === null) {
            $invalidProperties[] = "'ketogenic' can't be null";
        }
        if ($this->container['low_fodmap'] === null) {
            $invalidProperties[] = "'low_fodmap' can't be null";
        }
        if ($this->container['occasions'] === null) {
            $invalidProperties[] = "'occasions' can't be null";
        }
        if ($this->container['sustainable'] === null) {
            $invalidProperties[] = "'sustainable' can't be null";
        }
        if ($this->container['vegan'] === null) {
            $invalidProperties[] = "'vegan' can't be null";
        }
        if ($this->container['vegetarian'] === null) {
            $invalidProperties[] = "'vegetarian' can't be null";
        }
        if ($this->container['very_healthy'] === null) {
            $invalidProperties[] = "'very_healthy' can't be null";
        }
        if ($this->container['very_popular'] === null) {
            $invalidProperties[] = "'very_popular' can't be null";
        }
        if ($this->container['whole30'] === null) {
            $invalidProperties[] = "'whole30' can't be null";
        }
        if ($this->container['weight_watcher_smart_points'] === null) {
            $invalidProperties[] = "'weight_watcher_smart_points' can't be null";
        }
        if ($this->container['dish_types'] === null) {
            $invalidProperties[] = "'dish_types' can't be null";
        }
        if ($this->container['extended_ingredients'] === null) {
            $invalidProperties[] = "'extended_ingredients' can't be null";
        }
        if ((count($this->container['extended_ingredients']) < 0)) {
            $invalidProperties[] = "invalid value for 'extended_ingredients', number of items must be greater than or equal to 0.";
        }

        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ((mb_strlen($this->container['summary']) < 1)) {
            $invalidProperties[] = "invalid value for 'summary', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['wine_pairing'] === null) {
            $invalidProperties[] = "'wine_pairing' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if ((mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return self
     */
    public function setImage($image)
    {

        if ((mb_strlen($image) < 1)) {
            throw new \InvalidArgumentException('invalid length for $image when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image_type
     *
     * @return string
     */
    public function getImageType()
    {
        return $this->container['image_type'];
    }

    /**
     * Sets image_type
     *
     * @param string $image_type image_type
     *
     * @return self
     */
    public function setImageType($image_type)
    {

        if ((mb_strlen($image_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $image_type when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['image_type'] = $image_type;

        return $this;
    }

    /**
     * Gets servings
     *
     * @return float
     */
    public function getServings()
    {
        return $this->container['servings'];
    }

    /**
     * Sets servings
     *
     * @param float $servings servings
     *
     * @return self
     */
    public function setServings($servings)
    {
        $this->container['servings'] = $servings;

        return $this;
    }

    /**
     * Gets ready_in_minutes
     *
     * @return int
     */
    public function getReadyInMinutes()
    {
        return $this->container['ready_in_minutes'];
    }

    /**
     * Sets ready_in_minutes
     *
     * @param int $ready_in_minutes ready_in_minutes
     *
     * @return self
     */
    public function setReadyInMinutes($ready_in_minutes)
    {
        $this->container['ready_in_minutes'] = $ready_in_minutes;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license license
     *
     * @return self
     */
    public function setLicense($license)
    {

        if ((mb_strlen($license) < 1)) {
            throw new \InvalidArgumentException('invalid length for $license when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets source_name
     *
     * @return string
     */
    public function getSourceName()
    {
        return $this->container['source_name'];
    }

    /**
     * Sets source_name
     *
     * @param string $source_name source_name
     *
     * @return self
     */
    public function setSourceName($source_name)
    {

        if ((mb_strlen($source_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source_name when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['source_name'] = $source_name;

        return $this;
    }

    /**
     * Gets source_url
     *
     * @return string
     */
    public function getSourceUrl()
    {
        return $this->container['source_url'];
    }

    /**
     * Sets source_url
     *
     * @param string $source_url source_url
     *
     * @return self
     */
    public function setSourceUrl($source_url)
    {

        if ((mb_strlen($source_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source_url when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['source_url'] = $source_url;

        return $this;
    }

    /**
     * Gets spoonacular_source_url
     *
     * @return string
     */
    public function getSpoonacularSourceUrl()
    {
        return $this->container['spoonacular_source_url'];
    }

    /**
     * Sets spoonacular_source_url
     *
     * @param string $spoonacular_source_url spoonacular_source_url
     *
     * @return self
     */
    public function setSpoonacularSourceUrl($spoonacular_source_url)
    {

        if ((mb_strlen($spoonacular_source_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $spoonacular_source_url when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['spoonacular_source_url'] = $spoonacular_source_url;

        return $this;
    }

    /**
     * Gets aggregate_likes
     *
     * @return int
     */
    public function getAggregateLikes()
    {
        return $this->container['aggregate_likes'];
    }

    /**
     * Sets aggregate_likes
     *
     * @param int $aggregate_likes aggregate_likes
     *
     * @return self
     */
    public function setAggregateLikes($aggregate_likes)
    {
        $this->container['aggregate_likes'] = $aggregate_likes;

        return $this;
    }

    /**
     * Gets health_score
     *
     * @return float
     */
    public function getHealthScore()
    {
        return $this->container['health_score'];
    }

    /**
     * Sets health_score
     *
     * @param float $health_score health_score
     *
     * @return self
     */
    public function setHealthScore($health_score)
    {
        $this->container['health_score'] = $health_score;

        return $this;
    }

    /**
     * Gets spoonacular_score
     *
     * @return float
     */
    public function getSpoonacularScore()
    {
        return $this->container['spoonacular_score'];
    }

    /**
     * Sets spoonacular_score
     *
     * @param float $spoonacular_score spoonacular_score
     *
     * @return self
     */
    public function setSpoonacularScore($spoonacular_score)
    {
        $this->container['spoonacular_score'] = $spoonacular_score;

        return $this;
    }

    /**
     * Gets price_per_serving
     *
     * @return float
     */
    public function getPricePerServing()
    {
        return $this->container['price_per_serving'];
    }

    /**
     * Sets price_per_serving
     *
     * @param float $price_per_serving price_per_serving
     *
     * @return self
     */
    public function setPricePerServing($price_per_serving)
    {
        $this->container['price_per_serving'] = $price_per_serving;

        return $this;
    }

    /**
     * Gets analyzed_instructions
     *
     * @return string[]
     */
    public function getAnalyzedInstructions()
    {
        return $this->container['analyzed_instructions'];
    }

    /**
     * Sets analyzed_instructions
     *
     * @param string[] $analyzed_instructions analyzed_instructions
     *
     * @return self
     */
    public function setAnalyzedInstructions($analyzed_instructions)
    {
        $this->container['analyzed_instructions'] = $analyzed_instructions;

        return $this;
    }

    /**
     * Gets cheap
     *
     * @return bool
     */
    public function getCheap()
    {
        return $this->container['cheap'];
    }

    /**
     * Sets cheap
     *
     * @param bool $cheap cheap
     *
     * @return self
     */
    public function setCheap($cheap)
    {
        $this->container['cheap'] = $cheap;

        return $this;
    }

    /**
     * Gets credits_text
     *
     * @return string
     */
    public function getCreditsText()
    {
        return $this->container['credits_text'];
    }

    /**
     * Sets credits_text
     *
     * @param string $credits_text credits_text
     *
     * @return self
     */
    public function setCreditsText($credits_text)
    {

        if ((mb_strlen($credits_text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $credits_text when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['credits_text'] = $credits_text;

        return $this;
    }

    /**
     * Gets cuisines
     *
     * @return string[]
     */
    public function getCuisines()
    {
        return $this->container['cuisines'];
    }

    /**
     * Sets cuisines
     *
     * @param string[] $cuisines cuisines
     *
     * @return self
     */
    public function setCuisines($cuisines)
    {
        $this->container['cuisines'] = $cuisines;

        return $this;
    }

    /**
     * Gets dairy_free
     *
     * @return bool
     */
    public function getDairyFree()
    {
        return $this->container['dairy_free'];
    }

    /**
     * Sets dairy_free
     *
     * @param bool $dairy_free dairy_free
     *
     * @return self
     */
    public function setDairyFree($dairy_free)
    {
        $this->container['dairy_free'] = $dairy_free;

        return $this;
    }

    /**
     * Gets diets
     *
     * @return string[]
     */
    public function getDiets()
    {
        return $this->container['diets'];
    }

    /**
     * Sets diets
     *
     * @param string[] $diets diets
     *
     * @return self
     */
    public function setDiets($diets)
    {
        $this->container['diets'] = $diets;

        return $this;
    }

    /**
     * Gets gaps
     *
     * @return string
     */
    public function getGaps()
    {
        return $this->container['gaps'];
    }

    /**
     * Sets gaps
     *
     * @param string $gaps gaps
     *
     * @return self
     */
    public function setGaps($gaps)
    {

        if ((mb_strlen($gaps) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gaps when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['gaps'] = $gaps;

        return $this;
    }

    /**
     * Gets gluten_free
     *
     * @return bool
     */
    public function getGlutenFree()
    {
        return $this->container['gluten_free'];
    }

    /**
     * Sets gluten_free
     *
     * @param bool $gluten_free gluten_free
     *
     * @return self
     */
    public function setGlutenFree($gluten_free)
    {
        $this->container['gluten_free'] = $gluten_free;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string $instructions instructions
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets ketogenic
     *
     * @return bool
     */
    public function getKetogenic()
    {
        return $this->container['ketogenic'];
    }

    /**
     * Sets ketogenic
     *
     * @param bool $ketogenic ketogenic
     *
     * @return self
     */
    public function setKetogenic($ketogenic)
    {
        $this->container['ketogenic'] = $ketogenic;

        return $this;
    }

    /**
     * Gets low_fodmap
     *
     * @return bool
     */
    public function getLowFodmap()
    {
        return $this->container['low_fodmap'];
    }

    /**
     * Sets low_fodmap
     *
     * @param bool $low_fodmap low_fodmap
     *
     * @return self
     */
    public function setLowFodmap($low_fodmap)
    {
        $this->container['low_fodmap'] = $low_fodmap;

        return $this;
    }

    /**
     * Gets occasions
     *
     * @return string[]
     */
    public function getOccasions()
    {
        return $this->container['occasions'];
    }

    /**
     * Sets occasions
     *
     * @param string[] $occasions occasions
     *
     * @return self
     */
    public function setOccasions($occasions)
    {
        $this->container['occasions'] = $occasions;

        return $this;
    }

    /**
     * Gets sustainable
     *
     * @return bool
     */
    public function getSustainable()
    {
        return $this->container['sustainable'];
    }

    /**
     * Sets sustainable
     *
     * @param bool $sustainable sustainable
     *
     * @return self
     */
    public function setSustainable($sustainable)
    {
        $this->container['sustainable'] = $sustainable;

        return $this;
    }

    /**
     * Gets vegan
     *
     * @return bool
     */
    public function getVegan()
    {
        return $this->container['vegan'];
    }

    /**
     * Sets vegan
     *
     * @param bool $vegan vegan
     *
     * @return self
     */
    public function setVegan($vegan)
    {
        $this->container['vegan'] = $vegan;

        return $this;
    }

    /**
     * Gets vegetarian
     *
     * @return bool
     */
    public function getVegetarian()
    {
        return $this->container['vegetarian'];
    }

    /**
     * Sets vegetarian
     *
     * @param bool $vegetarian vegetarian
     *
     * @return self
     */
    public function setVegetarian($vegetarian)
    {
        $this->container['vegetarian'] = $vegetarian;

        return $this;
    }

    /**
     * Gets very_healthy
     *
     * @return bool
     */
    public function getVeryHealthy()
    {
        return $this->container['very_healthy'];
    }

    /**
     * Sets very_healthy
     *
     * @param bool $very_healthy very_healthy
     *
     * @return self
     */
    public function setVeryHealthy($very_healthy)
    {
        $this->container['very_healthy'] = $very_healthy;

        return $this;
    }

    /**
     * Gets very_popular
     *
     * @return bool
     */
    public function getVeryPopular()
    {
        return $this->container['very_popular'];
    }

    /**
     * Sets very_popular
     *
     * @param bool $very_popular very_popular
     *
     * @return self
     */
    public function setVeryPopular($very_popular)
    {
        $this->container['very_popular'] = $very_popular;

        return $this;
    }

    /**
     * Gets whole30
     *
     * @return bool
     */
    public function getWhole30()
    {
        return $this->container['whole30'];
    }

    /**
     * Sets whole30
     *
     * @param bool $whole30 whole30
     *
     * @return self
     */
    public function setWhole30($whole30)
    {
        $this->container['whole30'] = $whole30;

        return $this;
    }

    /**
     * Gets weight_watcher_smart_points
     *
     * @return float
     */
    public function getWeightWatcherSmartPoints()
    {
        return $this->container['weight_watcher_smart_points'];
    }

    /**
     * Sets weight_watcher_smart_points
     *
     * @param float $weight_watcher_smart_points weight_watcher_smart_points
     *
     * @return self
     */
    public function setWeightWatcherSmartPoints($weight_watcher_smart_points)
    {
        $this->container['weight_watcher_smart_points'] = $weight_watcher_smart_points;

        return $this;
    }

    /**
     * Gets dish_types
     *
     * @return string[]
     */
    public function getDishTypes()
    {
        return $this->container['dish_types'];
    }

    /**
     * Sets dish_types
     *
     * @param string[] $dish_types dish_types
     *
     * @return self
     */
    public function setDishTypes($dish_types)
    {
        $this->container['dish_types'] = $dish_types;

        return $this;
    }

    /**
     * Gets extended_ingredients
     *
     * @return \com.spoonacular.client\com.spoonacular.client.model\GetRecipeInformation200ResponseExtendedIngredientsInner[]
     */
    public function getExtendedIngredients()
    {
        return $this->container['extended_ingredients'];
    }

    /**
     * Sets extended_ingredients
     *
     * @param \com.spoonacular.client\com.spoonacular.client.model\GetRecipeInformation200ResponseExtendedIngredientsInner[] $extended_ingredients extended_ingredients
     *
     * @return self
     */
    public function setExtendedIngredients($extended_ingredients)
    {


        if ((count($extended_ingredients) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extended_ingredients when calling GetRecipeInformationBulk200ResponseInner., number of items must be greater than or equal to 0.');
        }
        $this->container['extended_ingredients'] = $extended_ingredients;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {

        if ((mb_strlen($summary) < 1)) {
            throw new \InvalidArgumentException('invalid length for $summary when calling GetRecipeInformationBulk200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets wine_pairing
     *
     * @return \com.spoonacular.client\com.spoonacular.client.model\GetRecipeInformation200ResponseWinePairing
     */
    public function getWinePairing()
    {
        return $this->container['wine_pairing'];
    }

    /**
     * Sets wine_pairing
     *
     * @param \com.spoonacular.client\com.spoonacular.client.model\GetRecipeInformation200ResponseWinePairing $wine_pairing wine_pairing
     *
     * @return self
     */
    public function setWinePairing($wine_pairing)
    {
        $this->container['wine_pairing'] = $wine_pairing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


