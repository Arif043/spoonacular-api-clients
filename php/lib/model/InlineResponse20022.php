<?php
/**
 * InlineResponse20022
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.spoonacular.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.spoonacular.client\com.spoonacular.client.model;

use \ArrayAccess;
use \com.spoonacular.client\ObjectSerializer;

/**
 * InlineResponse20022 Class Doc Comment
 *
 * @category Class
 * @package  com.spoonacular.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20022 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_22';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'original' => 'string',
        'original_name' => 'string',
        'name' => 'string',
        'name_clean' => 'string',
        'amount' => 'float',
        'unit' => 'string',
        'unit_short' => 'string',
        'unit_long' => 'string',
        'possible_units' => 'string[]',
        'estimated_cost' => '\com.spoonacular.client\com.spoonacular.client.model\RecipesParseIngredientsEstimatedCost',
        'consistency' => 'string',
        'shopping_list_units' => 'string[]',
        'aisle' => 'string',
        'image' => 'string',
        'meta' => 'object[]',
        'nutrition' => '\com.spoonacular.client\com.spoonacular.client.model\InlineResponse20022Nutrition',
        'category_path' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'original' => null,
        'original_name' => null,
        'name' => null,
        'name_clean' => null,
        'amount' => null,
        'unit' => null,
        'unit_short' => null,
        'unit_long' => null,
        'possible_units' => null,
        'estimated_cost' => null,
        'consistency' => null,
        'shopping_list_units' => null,
        'aisle' => null,
        'image' => null,
        'meta' => null,
        'nutrition' => null,
        'category_path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'original' => 'original',
        'original_name' => 'originalName',
        'name' => 'name',
        'name_clean' => 'nameClean',
        'amount' => 'amount',
        'unit' => 'unit',
        'unit_short' => 'unitShort',
        'unit_long' => 'unitLong',
        'possible_units' => 'possibleUnits',
        'estimated_cost' => 'estimatedCost',
        'consistency' => 'consistency',
        'shopping_list_units' => 'shoppingListUnits',
        'aisle' => 'aisle',
        'image' => 'image',
        'meta' => 'meta',
        'nutrition' => 'nutrition',
        'category_path' => 'categoryPath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'original' => 'setOriginal',
        'original_name' => 'setOriginalName',
        'name' => 'setName',
        'name_clean' => 'setNameClean',
        'amount' => 'setAmount',
        'unit' => 'setUnit',
        'unit_short' => 'setUnitShort',
        'unit_long' => 'setUnitLong',
        'possible_units' => 'setPossibleUnits',
        'estimated_cost' => 'setEstimatedCost',
        'consistency' => 'setConsistency',
        'shopping_list_units' => 'setShoppingListUnits',
        'aisle' => 'setAisle',
        'image' => 'setImage',
        'meta' => 'setMeta',
        'nutrition' => 'setNutrition',
        'category_path' => 'setCategoryPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'original' => 'getOriginal',
        'original_name' => 'getOriginalName',
        'name' => 'getName',
        'name_clean' => 'getNameClean',
        'amount' => 'getAmount',
        'unit' => 'getUnit',
        'unit_short' => 'getUnitShort',
        'unit_long' => 'getUnitLong',
        'possible_units' => 'getPossibleUnits',
        'estimated_cost' => 'getEstimatedCost',
        'consistency' => 'getConsistency',
        'shopping_list_units' => 'getShoppingListUnits',
        'aisle' => 'getAisle',
        'image' => 'getImage',
        'meta' => 'getMeta',
        'nutrition' => 'getNutrition',
        'category_path' => 'getCategoryPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['original'] = isset($data['original']) ? $data['original'] : null;
        $this->container['original_name'] = isset($data['original_name']) ? $data['original_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_clean'] = isset($data['name_clean']) ? $data['name_clean'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['unit_short'] = isset($data['unit_short']) ? $data['unit_short'] : null;
        $this->container['unit_long'] = isset($data['unit_long']) ? $data['unit_long'] : null;
        $this->container['possible_units'] = isset($data['possible_units']) ? $data['possible_units'] : null;
        $this->container['estimated_cost'] = isset($data['estimated_cost']) ? $data['estimated_cost'] : null;
        $this->container['consistency'] = isset($data['consistency']) ? $data['consistency'] : null;
        $this->container['shopping_list_units'] = isset($data['shopping_list_units']) ? $data['shopping_list_units'] : null;
        $this->container['aisle'] = isset($data['aisle']) ? $data['aisle'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['nutrition'] = isset($data['nutrition']) ? $data['nutrition'] : null;
        $this->container['category_path'] = isset($data['category_path']) ? $data['category_path'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['original'] === null) {
            $invalidProperties[] = "'original' can't be null";
        }
        if ((mb_strlen($this->container['original']) < 1)) {
            $invalidProperties[] = "invalid value for 'original', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['original_name'] === null) {
            $invalidProperties[] = "'original_name' can't be null";
        }
        if ((mb_strlen($this->container['original_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'original_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name_clean'] === null) {
            $invalidProperties[] = "'name_clean' can't be null";
        }
        if ((mb_strlen($this->container['name_clean']) < 1)) {
            $invalidProperties[] = "invalid value for 'name_clean', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        if ($this->container['unit_short'] === null) {
            $invalidProperties[] = "'unit_short' can't be null";
        }
        if ($this->container['unit_long'] === null) {
            $invalidProperties[] = "'unit_long' can't be null";
        }
        if ($this->container['possible_units'] === null) {
            $invalidProperties[] = "'possible_units' can't be null";
        }
        if ($this->container['estimated_cost'] === null) {
            $invalidProperties[] = "'estimated_cost' can't be null";
        }
        if ($this->container['consistency'] === null) {
            $invalidProperties[] = "'consistency' can't be null";
        }
        if ((mb_strlen($this->container['consistency']) < 1)) {
            $invalidProperties[] = "invalid value for 'consistency', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['shopping_list_units'] === null) {
            $invalidProperties[] = "'shopping_list_units' can't be null";
        }
        if ($this->container['aisle'] === null) {
            $invalidProperties[] = "'aisle' can't be null";
        }
        if ((mb_strlen($this->container['aisle']) < 1)) {
            $invalidProperties[] = "invalid value for 'aisle', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ((mb_strlen($this->container['image']) < 1)) {
            $invalidProperties[] = "invalid value for 'image', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['meta'] === null) {
            $invalidProperties[] = "'meta' can't be null";
        }
        if ($this->container['nutrition'] === null) {
            $invalidProperties[] = "'nutrition' can't be null";
        }
        if ($this->container['category_path'] === null) {
            $invalidProperties[] = "'category_path' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original
     *
     * @return string
     */
    public function getOriginal()
    {
        return $this->container['original'];
    }

    /**
     * Sets original
     *
     * @param string $original original
     *
     * @return $this
     */
    public function setOriginal($original)
    {

        if ((mb_strlen($original) < 1)) {
            throw new \InvalidArgumentException('invalid length for $original when calling InlineResponse20022., must be bigger than or equal to 1.');
        }

        $this->container['original'] = $original;

        return $this;
    }

    /**
     * Gets original_name
     *
     * @return string
     */
    public function getOriginalName()
    {
        return $this->container['original_name'];
    }

    /**
     * Sets original_name
     *
     * @param string $original_name original_name
     *
     * @return $this
     */
    public function setOriginalName($original_name)
    {

        if ((mb_strlen($original_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $original_name when calling InlineResponse20022., must be bigger than or equal to 1.');
        }

        $this->container['original_name'] = $original_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineResponse20022., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_clean
     *
     * @return string
     */
    public function getNameClean()
    {
        return $this->container['name_clean'];
    }

    /**
     * Sets name_clean
     *
     * @param string $name_clean name_clean
     *
     * @return $this
     */
    public function setNameClean($name_clean)
    {

        if ((mb_strlen($name_clean) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name_clean when calling InlineResponse20022., must be bigger than or equal to 1.');
        }

        $this->container['name_clean'] = $name_clean;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets unit_short
     *
     * @return string
     */
    public function getUnitShort()
    {
        return $this->container['unit_short'];
    }

    /**
     * Sets unit_short
     *
     * @param string $unit_short unit_short
     *
     * @return $this
     */
    public function setUnitShort($unit_short)
    {
        $this->container['unit_short'] = $unit_short;

        return $this;
    }

    /**
     * Gets unit_long
     *
     * @return string
     */
    public function getUnitLong()
    {
        return $this->container['unit_long'];
    }

    /**
     * Sets unit_long
     *
     * @param string $unit_long unit_long
     *
     * @return $this
     */
    public function setUnitLong($unit_long)
    {
        $this->container['unit_long'] = $unit_long;

        return $this;
    }

    /**
     * Gets possible_units
     *
     * @return string[]
     */
    public function getPossibleUnits()
    {
        return $this->container['possible_units'];
    }

    /**
     * Sets possible_units
     *
     * @param string[] $possible_units possible_units
     *
     * @return $this
     */
    public function setPossibleUnits($possible_units)
    {
        $this->container['possible_units'] = $possible_units;

        return $this;
    }

    /**
     * Gets estimated_cost
     *
     * @return \com.spoonacular.client\com.spoonacular.client.model\RecipesParseIngredientsEstimatedCost
     */
    public function getEstimatedCost()
    {
        return $this->container['estimated_cost'];
    }

    /**
     * Sets estimated_cost
     *
     * @param \com.spoonacular.client\com.spoonacular.client.model\RecipesParseIngredientsEstimatedCost $estimated_cost estimated_cost
     *
     * @return $this
     */
    public function setEstimatedCost($estimated_cost)
    {
        $this->container['estimated_cost'] = $estimated_cost;

        return $this;
    }

    /**
     * Gets consistency
     *
     * @return string
     */
    public function getConsistency()
    {
        return $this->container['consistency'];
    }

    /**
     * Sets consistency
     *
     * @param string $consistency consistency
     *
     * @return $this
     */
    public function setConsistency($consistency)
    {

        if ((mb_strlen($consistency) < 1)) {
            throw new \InvalidArgumentException('invalid length for $consistency when calling InlineResponse20022., must be bigger than or equal to 1.');
        }

        $this->container['consistency'] = $consistency;

        return $this;
    }

    /**
     * Gets shopping_list_units
     *
     * @return string[]
     */
    public function getShoppingListUnits()
    {
        return $this->container['shopping_list_units'];
    }

    /**
     * Sets shopping_list_units
     *
     * @param string[] $shopping_list_units shopping_list_units
     *
     * @return $this
     */
    public function setShoppingListUnits($shopping_list_units)
    {
        $this->container['shopping_list_units'] = $shopping_list_units;

        return $this;
    }

    /**
     * Gets aisle
     *
     * @return string
     */
    public function getAisle()
    {
        return $this->container['aisle'];
    }

    /**
     * Sets aisle
     *
     * @param string $aisle aisle
     *
     * @return $this
     */
    public function setAisle($aisle)
    {

        if ((mb_strlen($aisle) < 1)) {
            throw new \InvalidArgumentException('invalid length for $aisle when calling InlineResponse20022., must be bigger than or equal to 1.');
        }

        $this->container['aisle'] = $aisle;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {

        if ((mb_strlen($image) < 1)) {
            throw new \InvalidArgumentException('invalid length for $image when calling InlineResponse20022., must be bigger than or equal to 1.');
        }

        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object[]
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object[] $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets nutrition
     *
     * @return \com.spoonacular.client\com.spoonacular.client.model\InlineResponse20022Nutrition
     */
    public function getNutrition()
    {
        return $this->container['nutrition'];
    }

    /**
     * Sets nutrition
     *
     * @param \com.spoonacular.client\com.spoonacular.client.model\InlineResponse20022Nutrition $nutrition nutrition
     *
     * @return $this
     */
    public function setNutrition($nutrition)
    {
        $this->container['nutrition'] = $nutrition;

        return $this;
    }

    /**
     * Gets category_path
     *
     * @return string[]
     */
    public function getCategoryPath()
    {
        return $this->container['category_path'];
    }

    /**
     * Sets category_path
     *
     * @param string[] $category_path category_path
     *
     * @return $this
     */
    public function setCategoryPath($category_path)
    {
        $this->container['category_path'] = $category_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


