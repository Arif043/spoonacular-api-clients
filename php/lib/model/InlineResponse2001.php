<?php
/**
 * InlineResponse2001
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.spoonacular.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.spoonacular.client\com.spoonacular.client.model;

use \ArrayAccess;
use \com.spoonacular.client\ObjectSerializer;

/**
 * InlineResponse2001 Class Doc Comment
 *
 * @category Class
 * @package  com.spoonacular.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2001 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'image' => 'string',
        'image_type' => 'string',
        'likes' => 'int',
        'missed_ingredient_count' => 'int',
        'missed_ingredients' => '\com.spoonacular.client\com.spoonacular.client.model\RecipesFindByIngredientsMissedIngredients[]',
        'title' => 'string',
        'unused_ingredients' => 'object[]',
        'used_ingredient_count' => 'float',
        'used_ingredients' => '\com.spoonacular.client\com.spoonacular.client.model\RecipesFindByIngredientsMissedIngredients[]',
        '' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'image' => null,
        'image_type' => null,
        'likes' => null,
        'missed_ingredient_count' => null,
        'missed_ingredients' => null,
        'title' => null,
        'unused_ingredients' => null,
        'used_ingredient_count' => null,
        'used_ingredients' => null,
        '' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'image' => 'image',
        'image_type' => 'imageType',
        'likes' => 'likes',
        'missed_ingredient_count' => 'missedIngredientCount',
        'missed_ingredients' => 'missedIngredients',
        'title' => 'title',
        'unused_ingredients' => 'unusedIngredients',
        'used_ingredient_count' => 'usedIngredientCount',
        'used_ingredients' => 'usedIngredients',
        '' => ''
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'image' => 'setImage',
        'image_type' => 'setImageType',
        'likes' => 'setLikes',
        'missed_ingredient_count' => 'setMissedIngredientCount',
        'missed_ingredients' => 'setMissedIngredients',
        'title' => 'setTitle',
        'unused_ingredients' => 'setUnusedIngredients',
        'used_ingredient_count' => 'setUsedIngredientCount',
        'used_ingredients' => 'setUsedIngredients',
        '' => 'set'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'image' => 'getImage',
        'image_type' => 'getImageType',
        'likes' => 'getLikes',
        'missed_ingredient_count' => 'getMissedIngredientCount',
        'missed_ingredients' => 'getMissedIngredients',
        'title' => 'getTitle',
        'unused_ingredients' => 'getUnusedIngredients',
        'used_ingredient_count' => 'getUsedIngredientCount',
        'used_ingredients' => 'getUsedIngredients',
        '' => 'get'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['image_type'] = isset($data['image_type']) ? $data['image_type'] : null;
        $this->container['likes'] = isset($data['likes']) ? $data['likes'] : null;
        $this->container['missed_ingredient_count'] = isset($data['missed_ingredient_count']) ? $data['missed_ingredient_count'] : null;
        $this->container['missed_ingredients'] = isset($data['missed_ingredients']) ? $data['missed_ingredients'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['unused_ingredients'] = isset($data['unused_ingredients']) ? $data['unused_ingredients'] : null;
        $this->container['used_ingredient_count'] = isset($data['used_ingredient_count']) ? $data['used_ingredient_count'] : null;
        $this->container['used_ingredients'] = isset($data['used_ingredients']) ? $data['used_ingredients'] : null;
        $this->container[''] = isset($data['']) ? $data[''] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ((mb_strlen($this->container['image']) < 1)) {
            $invalidProperties[] = "invalid value for 'image', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['image_type'] === null) {
            $invalidProperties[] = "'image_type' can't be null";
        }
        if ((mb_strlen($this->container['image_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'image_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['likes'] === null) {
            $invalidProperties[] = "'likes' can't be null";
        }
        if ($this->container['missed_ingredient_count'] === null) {
            $invalidProperties[] = "'missed_ingredient_count' can't be null";
        }
        if ($this->container['missed_ingredients'] === null) {
            $invalidProperties[] = "'missed_ingredients' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['unused_ingredients'] === null) {
            $invalidProperties[] = "'unused_ingredients' can't be null";
        }
        if ($this->container['used_ingredient_count'] === null) {
            $invalidProperties[] = "'used_ingredient_count' can't be null";
        }
        if ($this->container['used_ingredients'] === null) {
            $invalidProperties[] = "'used_ingredients' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {

        if ((mb_strlen($image) < 1)) {
            throw new \InvalidArgumentException('invalid length for $image when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image_type
     *
     * @return string
     */
    public function getImageType()
    {
        return $this->container['image_type'];
    }

    /**
     * Sets image_type
     *
     * @param string $image_type image_type
     *
     * @return $this
     */
    public function setImageType($image_type)
    {

        if ((mb_strlen($image_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $image_type when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['image_type'] = $image_type;

        return $this;
    }

    /**
     * Gets likes
     *
     * @return int
     */
    public function getLikes()
    {
        return $this->container['likes'];
    }

    /**
     * Sets likes
     *
     * @param int $likes likes
     *
     * @return $this
     */
    public function setLikes($likes)
    {
        $this->container['likes'] = $likes;

        return $this;
    }

    /**
     * Gets missed_ingredient_count
     *
     * @return int
     */
    public function getMissedIngredientCount()
    {
        return $this->container['missed_ingredient_count'];
    }

    /**
     * Sets missed_ingredient_count
     *
     * @param int $missed_ingredient_count missed_ingredient_count
     *
     * @return $this
     */
    public function setMissedIngredientCount($missed_ingredient_count)
    {
        $this->container['missed_ingredient_count'] = $missed_ingredient_count;

        return $this;
    }

    /**
     * Gets missed_ingredients
     *
     * @return \com.spoonacular.client\com.spoonacular.client.model\RecipesFindByIngredientsMissedIngredients[]
     */
    public function getMissedIngredients()
    {
        return $this->container['missed_ingredients'];
    }

    /**
     * Sets missed_ingredients
     *
     * @param \com.spoonacular.client\com.spoonacular.client.model\RecipesFindByIngredientsMissedIngredients[] $missed_ingredients missed_ingredients
     *
     * @return $this
     */
    public function setMissedIngredients($missed_ingredients)
    {
        $this->container['missed_ingredients'] = $missed_ingredients;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {

        if ((mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling InlineResponse2001., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets unused_ingredients
     *
     * @return object[]
     */
    public function getUnusedIngredients()
    {
        return $this->container['unused_ingredients'];
    }

    /**
     * Sets unused_ingredients
     *
     * @param object[] $unused_ingredients unused_ingredients
     *
     * @return $this
     */
    public function setUnusedIngredients($unused_ingredients)
    {
        $this->container['unused_ingredients'] = $unused_ingredients;

        return $this;
    }

    /**
     * Gets used_ingredient_count
     *
     * @return float
     */
    public function getUsedIngredientCount()
    {
        return $this->container['used_ingredient_count'];
    }

    /**
     * Sets used_ingredient_count
     *
     * @param float $used_ingredient_count used_ingredient_count
     *
     * @return $this
     */
    public function setUsedIngredientCount($used_ingredient_count)
    {
        $this->container['used_ingredient_count'] = $used_ingredient_count;

        return $this;
    }

    /**
     * Gets used_ingredients
     *
     * @return \com.spoonacular.client\com.spoonacular.client.model\RecipesFindByIngredientsMissedIngredients[]
     */
    public function getUsedIngredients()
    {
        return $this->container['used_ingredients'];
    }

    /**
     * Sets used_ingredients
     *
     * @param \com.spoonacular.client\com.spoonacular.client.model\RecipesFindByIngredientsMissedIngredients[] $used_ingredients used_ingredients
     *
     * @return $this
     */
    public function setUsedIngredients($used_ingredients)
    {
        $this->container['used_ingredients'] = $used_ingredients;

        return $this;
    }

    /**
     * Gets 
     *
     * @return string|null
     */
    public function get()
    {
        return $this->container[''];
    }

    /**
     * Sets 
     *
     * @param string|null $ 
     *
     * @return $this
     */
    public function set($)
    {
        $this->container[''] = $;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


