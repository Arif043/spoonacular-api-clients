/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 2.0.2
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MenuItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuItem{}

// MenuItem 
type MenuItem struct {
	Id int32 `json:"id"`
	Title string `json:"title"`
	RestaurantChain string `json:"restaurantChain"`
	Nutrition *SearchGroceryProductsByUPC200ResponseNutrition `json:"nutrition,omitempty"`
	Badges []string `json:"badges,omitempty"`
	Breadcrumbs []string `json:"breadcrumbs,omitempty"`
	GeneratedText NullableString `json:"generatedText,omitempty"`
	ImageType *string `json:"imageType,omitempty"`
	Likes *int32 `json:"likes,omitempty"`
	Servings *MenuItemServings `json:"servings,omitempty"`
	Price NullableFloat32 `json:"price"`
	SpoonacularScore NullableFloat32 `json:"spoonacularScore"`
}

type _MenuItem MenuItem

// NewMenuItem instantiates a new MenuItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuItem(id int32, title string, restaurantChain string, price NullableFloat32, spoonacularScore NullableFloat32) *MenuItem {
	this := MenuItem{}
	this.Id = id
	this.Title = title
	this.RestaurantChain = restaurantChain
	this.Price = price
	this.SpoonacularScore = spoonacularScore
	return &this
}

// NewMenuItemWithDefaults instantiates a new MenuItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuItemWithDefaults() *MenuItem {
	this := MenuItem{}
	return &this
}

// GetId returns the Id field value
func (o *MenuItem) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MenuItem) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MenuItem) SetId(v int32) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *MenuItem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *MenuItem) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *MenuItem) SetTitle(v string) {
	o.Title = v
}

// GetRestaurantChain returns the RestaurantChain field value
func (o *MenuItem) GetRestaurantChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestaurantChain
}

// GetRestaurantChainOk returns a tuple with the RestaurantChain field value
// and a boolean to check if the value has been set.
func (o *MenuItem) GetRestaurantChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestaurantChain, true
}

// SetRestaurantChain sets field value
func (o *MenuItem) SetRestaurantChain(v string) {
	o.RestaurantChain = v
}

// GetNutrition returns the Nutrition field value if set, zero value otherwise.
func (o *MenuItem) GetNutrition() SearchGroceryProductsByUPC200ResponseNutrition {
	if o == nil || IsNil(o.Nutrition) {
		var ret SearchGroceryProductsByUPC200ResponseNutrition
		return ret
	}
	return *o.Nutrition
}

// GetNutritionOk returns a tuple with the Nutrition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItem) GetNutritionOk() (*SearchGroceryProductsByUPC200ResponseNutrition, bool) {
	if o == nil || IsNil(o.Nutrition) {
		return nil, false
	}
	return o.Nutrition, true
}

// HasNutrition returns a boolean if a field has been set.
func (o *MenuItem) HasNutrition() bool {
	if o != nil && !IsNil(o.Nutrition) {
		return true
	}

	return false
}

// SetNutrition gets a reference to the given SearchGroceryProductsByUPC200ResponseNutrition and assigns it to the Nutrition field.
func (o *MenuItem) SetNutrition(v SearchGroceryProductsByUPC200ResponseNutrition) {
	o.Nutrition = &v
}

// GetBadges returns the Badges field value if set, zero value otherwise.
func (o *MenuItem) GetBadges() []string {
	if o == nil || IsNil(o.Badges) {
		var ret []string
		return ret
	}
	return o.Badges
}

// GetBadgesOk returns a tuple with the Badges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItem) GetBadgesOk() ([]string, bool) {
	if o == nil || IsNil(o.Badges) {
		return nil, false
	}
	return o.Badges, true
}

// HasBadges returns a boolean if a field has been set.
func (o *MenuItem) HasBadges() bool {
	if o != nil && !IsNil(o.Badges) {
		return true
	}

	return false
}

// SetBadges gets a reference to the given []string and assigns it to the Badges field.
func (o *MenuItem) SetBadges(v []string) {
	o.Badges = v
}

// GetBreadcrumbs returns the Breadcrumbs field value if set, zero value otherwise.
func (o *MenuItem) GetBreadcrumbs() []string {
	if o == nil || IsNil(o.Breadcrumbs) {
		var ret []string
		return ret
	}
	return o.Breadcrumbs
}

// GetBreadcrumbsOk returns a tuple with the Breadcrumbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItem) GetBreadcrumbsOk() ([]string, bool) {
	if o == nil || IsNil(o.Breadcrumbs) {
		return nil, false
	}
	return o.Breadcrumbs, true
}

// HasBreadcrumbs returns a boolean if a field has been set.
func (o *MenuItem) HasBreadcrumbs() bool {
	if o != nil && !IsNil(o.Breadcrumbs) {
		return true
	}

	return false
}

// SetBreadcrumbs gets a reference to the given []string and assigns it to the Breadcrumbs field.
func (o *MenuItem) SetBreadcrumbs(v []string) {
	o.Breadcrumbs = v
}

// GetGeneratedText returns the GeneratedText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MenuItem) GetGeneratedText() string {
	if o == nil || IsNil(o.GeneratedText.Get()) {
		var ret string
		return ret
	}
	return *o.GeneratedText.Get()
}

// GetGeneratedTextOk returns a tuple with the GeneratedText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuItem) GetGeneratedTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GeneratedText.Get(), o.GeneratedText.IsSet()
}

// HasGeneratedText returns a boolean if a field has been set.
func (o *MenuItem) HasGeneratedText() bool {
	if o != nil && o.GeneratedText.IsSet() {
		return true
	}

	return false
}

// SetGeneratedText gets a reference to the given NullableString and assigns it to the GeneratedText field.
func (o *MenuItem) SetGeneratedText(v string) {
	o.GeneratedText.Set(&v)
}
// SetGeneratedTextNil sets the value for GeneratedText to be an explicit nil
func (o *MenuItem) SetGeneratedTextNil() {
	o.GeneratedText.Set(nil)
}

// UnsetGeneratedText ensures that no value is present for GeneratedText, not even an explicit nil
func (o *MenuItem) UnsetGeneratedText() {
	o.GeneratedText.Unset()
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *MenuItem) GetImageType() string {
	if o == nil || IsNil(o.ImageType) {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItem) GetImageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ImageType) {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *MenuItem) HasImageType() bool {
	if o != nil && !IsNil(o.ImageType) {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *MenuItem) SetImageType(v string) {
	o.ImageType = &v
}

// GetLikes returns the Likes field value if set, zero value otherwise.
func (o *MenuItem) GetLikes() int32 {
	if o == nil || IsNil(o.Likes) {
		var ret int32
		return ret
	}
	return *o.Likes
}

// GetLikesOk returns a tuple with the Likes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItem) GetLikesOk() (*int32, bool) {
	if o == nil || IsNil(o.Likes) {
		return nil, false
	}
	return o.Likes, true
}

// HasLikes returns a boolean if a field has been set.
func (o *MenuItem) HasLikes() bool {
	if o != nil && !IsNil(o.Likes) {
		return true
	}

	return false
}

// SetLikes gets a reference to the given int32 and assigns it to the Likes field.
func (o *MenuItem) SetLikes(v int32) {
	o.Likes = &v
}

// GetServings returns the Servings field value if set, zero value otherwise.
func (o *MenuItem) GetServings() MenuItemServings {
	if o == nil || IsNil(o.Servings) {
		var ret MenuItemServings
		return ret
	}
	return *o.Servings
}

// GetServingsOk returns a tuple with the Servings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuItem) GetServingsOk() (*MenuItemServings, bool) {
	if o == nil || IsNil(o.Servings) {
		return nil, false
	}
	return o.Servings, true
}

// HasServings returns a boolean if a field has been set.
func (o *MenuItem) HasServings() bool {
	if o != nil && !IsNil(o.Servings) {
		return true
	}

	return false
}

// SetServings gets a reference to the given MenuItemServings and assigns it to the Servings field.
func (o *MenuItem) SetServings(v MenuItemServings) {
	o.Servings = &v
}

// GetPrice returns the Price field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *MenuItem) GetPrice() float32 {
	if o == nil || o.Price.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuItem) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// SetPrice sets field value
func (o *MenuItem) SetPrice(v float32) {
	o.Price.Set(&v)
}

// GetSpoonacularScore returns the SpoonacularScore field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *MenuItem) GetSpoonacularScore() float32 {
	if o == nil || o.SpoonacularScore.Get() == nil {
		var ret float32
		return ret
	}

	return *o.SpoonacularScore.Get()
}

// GetSpoonacularScoreOk returns a tuple with the SpoonacularScore field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuItem) GetSpoonacularScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpoonacularScore.Get(), o.SpoonacularScore.IsSet()
}

// SetSpoonacularScore sets field value
func (o *MenuItem) SetSpoonacularScore(v float32) {
	o.SpoonacularScore.Set(&v)
}

func (o MenuItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["restaurantChain"] = o.RestaurantChain
	if !IsNil(o.Nutrition) {
		toSerialize["nutrition"] = o.Nutrition
	}
	if !IsNil(o.Badges) {
		toSerialize["badges"] = o.Badges
	}
	if !IsNil(o.Breadcrumbs) {
		toSerialize["breadcrumbs"] = o.Breadcrumbs
	}
	if o.GeneratedText.IsSet() {
		toSerialize["generatedText"] = o.GeneratedText.Get()
	}
	if !IsNil(o.ImageType) {
		toSerialize["imageType"] = o.ImageType
	}
	if !IsNil(o.Likes) {
		toSerialize["likes"] = o.Likes
	}
	if !IsNil(o.Servings) {
		toSerialize["servings"] = o.Servings
	}
	toSerialize["price"] = o.Price.Get()
	toSerialize["spoonacularScore"] = o.SpoonacularScore.Get()
	return toSerialize, nil
}

func (o *MenuItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"restaurantChain",
		"price",
		"spoonacularScore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuItem := _MenuItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMenuItem)

	if err != nil {
		return err
	}

	*o = MenuItem(varMenuItem)

	return err
}

type NullableMenuItem struct {
	value *MenuItem
	isSet bool
}

func (v NullableMenuItem) Get() *MenuItem {
	return v.value
}

func (v *NullableMenuItem) Set(val *MenuItem) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuItem) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuItem(val *MenuItem) *NullableMenuItem {
	return &NullableMenuItem{value: val, isSet: true}
}

func (v NullableMenuItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


