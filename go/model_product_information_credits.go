/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 2.0.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
)

// checks if the ProductInformationCredits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductInformationCredits{}

// ProductInformationCredits struct for ProductInformationCredits
type ProductInformationCredits struct {
	Text *string `json:"text,omitempty"`
	Link *string `json:"link,omitempty"`
	Image *string `json:"image,omitempty"`
	ImageLink *string `json:"imageLink,omitempty"`
}

// NewProductInformationCredits instantiates a new ProductInformationCredits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductInformationCredits() *ProductInformationCredits {
	this := ProductInformationCredits{}
	return &this
}

// NewProductInformationCreditsWithDefaults instantiates a new ProductInformationCredits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductInformationCreditsWithDefaults() *ProductInformationCredits {
	this := ProductInformationCredits{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ProductInformationCredits) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInformationCredits) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ProductInformationCredits) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ProductInformationCredits) SetText(v string) {
	o.Text = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *ProductInformationCredits) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInformationCredits) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *ProductInformationCredits) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *ProductInformationCredits) SetLink(v string) {
	o.Link = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ProductInformationCredits) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInformationCredits) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ProductInformationCredits) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ProductInformationCredits) SetImage(v string) {
	o.Image = &v
}

// GetImageLink returns the ImageLink field value if set, zero value otherwise.
func (o *ProductInformationCredits) GetImageLink() string {
	if o == nil || IsNil(o.ImageLink) {
		var ret string
		return ret
	}
	return *o.ImageLink
}

// GetImageLinkOk returns a tuple with the ImageLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInformationCredits) GetImageLinkOk() (*string, bool) {
	if o == nil || IsNil(o.ImageLink) {
		return nil, false
	}
	return o.ImageLink, true
}

// HasImageLink returns a boolean if a field has been set.
func (o *ProductInformationCredits) HasImageLink() bool {
	if o != nil && !IsNil(o.ImageLink) {
		return true
	}

	return false
}

// SetImageLink gets a reference to the given string and assigns it to the ImageLink field.
func (o *ProductInformationCredits) SetImageLink(v string) {
	o.ImageLink = &v
}

func (o ProductInformationCredits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductInformationCredits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.ImageLink) {
		toSerialize["imageLink"] = o.ImageLink
	}
	return toSerialize, nil
}

type NullableProductInformationCredits struct {
	value *ProductInformationCredits
	isSet bool
}

func (v NullableProductInformationCredits) Get() *ProductInformationCredits {
	return v.value
}

func (v *NullableProductInformationCredits) Set(val *ProductInformationCredits) {
	v.value = val
	v.isSet = true
}

func (v NullableProductInformationCredits) IsSet() bool {
	return v.isSet
}

func (v *NullableProductInformationCredits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductInformationCredits(val *ProductInformationCredits) *NullableProductInformationCredits {
	return &NullableProductInformationCredits{value: val, isSet: true}
}

func (v NullableProductInformationCredits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductInformationCredits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


