/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 2.0.2
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
)

// checks if the RecipeInformationWinePairing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeInformationWinePairing{}

// RecipeInformationWinePairing struct for RecipeInformationWinePairing
type RecipeInformationWinePairing struct {
	PairedWines []string `json:"pairedWines,omitempty"`
	PairingText *string `json:"pairingText,omitempty"`
	ProductMatches []RecipeInformationWinePairingProductMatchesInner `json:"productMatches,omitempty"`
}

// NewRecipeInformationWinePairing instantiates a new RecipeInformationWinePairing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeInformationWinePairing() *RecipeInformationWinePairing {
	this := RecipeInformationWinePairing{}
	return &this
}

// NewRecipeInformationWinePairingWithDefaults instantiates a new RecipeInformationWinePairing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeInformationWinePairingWithDefaults() *RecipeInformationWinePairing {
	this := RecipeInformationWinePairing{}
	return &this
}

// GetPairedWines returns the PairedWines field value if set, zero value otherwise.
func (o *RecipeInformationWinePairing) GetPairedWines() []string {
	if o == nil || IsNil(o.PairedWines) {
		var ret []string
		return ret
	}
	return o.PairedWines
}

// GetPairedWinesOk returns a tuple with the PairedWines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairing) GetPairedWinesOk() ([]string, bool) {
	if o == nil || IsNil(o.PairedWines) {
		return nil, false
	}
	return o.PairedWines, true
}

// HasPairedWines returns a boolean if a field has been set.
func (o *RecipeInformationWinePairing) HasPairedWines() bool {
	if o != nil && !IsNil(o.PairedWines) {
		return true
	}

	return false
}

// SetPairedWines gets a reference to the given []string and assigns it to the PairedWines field.
func (o *RecipeInformationWinePairing) SetPairedWines(v []string) {
	o.PairedWines = v
}

// GetPairingText returns the PairingText field value if set, zero value otherwise.
func (o *RecipeInformationWinePairing) GetPairingText() string {
	if o == nil || IsNil(o.PairingText) {
		var ret string
		return ret
	}
	return *o.PairingText
}

// GetPairingTextOk returns a tuple with the PairingText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairing) GetPairingTextOk() (*string, bool) {
	if o == nil || IsNil(o.PairingText) {
		return nil, false
	}
	return o.PairingText, true
}

// HasPairingText returns a boolean if a field has been set.
func (o *RecipeInformationWinePairing) HasPairingText() bool {
	if o != nil && !IsNil(o.PairingText) {
		return true
	}

	return false
}

// SetPairingText gets a reference to the given string and assigns it to the PairingText field.
func (o *RecipeInformationWinePairing) SetPairingText(v string) {
	o.PairingText = &v
}

// GetProductMatches returns the ProductMatches field value if set, zero value otherwise.
func (o *RecipeInformationWinePairing) GetProductMatches() []RecipeInformationWinePairingProductMatchesInner {
	if o == nil || IsNil(o.ProductMatches) {
		var ret []RecipeInformationWinePairingProductMatchesInner
		return ret
	}
	return o.ProductMatches
}

// GetProductMatchesOk returns a tuple with the ProductMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairing) GetProductMatchesOk() ([]RecipeInformationWinePairingProductMatchesInner, bool) {
	if o == nil || IsNil(o.ProductMatches) {
		return nil, false
	}
	return o.ProductMatches, true
}

// HasProductMatches returns a boolean if a field has been set.
func (o *RecipeInformationWinePairing) HasProductMatches() bool {
	if o != nil && !IsNil(o.ProductMatches) {
		return true
	}

	return false
}

// SetProductMatches gets a reference to the given []RecipeInformationWinePairingProductMatchesInner and assigns it to the ProductMatches field.
func (o *RecipeInformationWinePairing) SetProductMatches(v []RecipeInformationWinePairingProductMatchesInner) {
	o.ProductMatches = v
}

func (o RecipeInformationWinePairing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeInformationWinePairing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PairedWines) {
		toSerialize["pairedWines"] = o.PairedWines
	}
	if !IsNil(o.PairingText) {
		toSerialize["pairingText"] = o.PairingText
	}
	if !IsNil(o.ProductMatches) {
		toSerialize["productMatches"] = o.ProductMatches
	}
	return toSerialize, nil
}

type NullableRecipeInformationWinePairing struct {
	value *RecipeInformationWinePairing
	isSet bool
}

func (v NullableRecipeInformationWinePairing) Get() *RecipeInformationWinePairing {
	return v.value
}

func (v *NullableRecipeInformationWinePairing) Set(val *RecipeInformationWinePairing) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeInformationWinePairing) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeInformationWinePairing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeInformationWinePairing(val *RecipeInformationWinePairing) *NullableRecipeInformationWinePairing {
	return &NullableRecipeInformationWinePairing{value: val, isSet: true}
}

func (v NullableRecipeInformationWinePairing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeInformationWinePairing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


