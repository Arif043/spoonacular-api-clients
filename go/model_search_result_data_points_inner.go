/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 2.0.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchResultDataPointsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResultDataPointsInner{}

// SearchResultDataPointsInner struct for SearchResultDataPointsInner
type SearchResultDataPointsInner struct {
	Key string `json:"key"`
	Value interface{} `json:"value"`
	Show *bool `json:"show,omitempty"`
}

type _SearchResultDataPointsInner SearchResultDataPointsInner

// NewSearchResultDataPointsInner instantiates a new SearchResultDataPointsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultDataPointsInner(key string, value interface{}) *SearchResultDataPointsInner {
	this := SearchResultDataPointsInner{}
	this.Key = key
	this.Value = value
	return &this
}

// NewSearchResultDataPointsInnerWithDefaults instantiates a new SearchResultDataPointsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultDataPointsInnerWithDefaults() *SearchResultDataPointsInner {
	this := SearchResultDataPointsInner{}
	return &this
}

// GetKey returns the Key field value
func (o *SearchResultDataPointsInner) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SearchResultDataPointsInner) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *SearchResultDataPointsInner) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SearchResultDataPointsInner) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchResultDataPointsInner) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SearchResultDataPointsInner) SetValue(v interface{}) {
	o.Value = v
}

// GetShow returns the Show field value if set, zero value otherwise.
func (o *SearchResultDataPointsInner) GetShow() bool {
	if o == nil || IsNil(o.Show) {
		var ret bool
		return ret
	}
	return *o.Show
}

// GetShowOk returns a tuple with the Show field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDataPointsInner) GetShowOk() (*bool, bool) {
	if o == nil || IsNil(o.Show) {
		return nil, false
	}
	return o.Show, true
}

// HasShow returns a boolean if a field has been set.
func (o *SearchResultDataPointsInner) HasShow() bool {
	if o != nil && !IsNil(o.Show) {
		return true
	}

	return false
}

// SetShow gets a reference to the given bool and assigns it to the Show field.
func (o *SearchResultDataPointsInner) SetShow(v bool) {
	o.Show = &v
}

func (o SearchResultDataPointsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResultDataPointsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Show) {
		toSerialize["show"] = o.Show
	}
	return toSerialize, nil
}

func (o *SearchResultDataPointsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchResultDataPointsInner := _SearchResultDataPointsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchResultDataPointsInner)

	if err != nil {
		return err
	}

	*o = SearchResultDataPointsInner(varSearchResultDataPointsInner)

	return err
}

type NullableSearchResultDataPointsInner struct {
	value *SearchResultDataPointsInner
	isSet bool
}

func (v NullableSearchResultDataPointsInner) Get() *SearchResultDataPointsInner {
	return v.value
}

func (v *NullableSearchResultDataPointsInner) Set(val *SearchResultDataPointsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultDataPointsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultDataPointsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultDataPointsInner(val *SearchResultDataPointsInner) *NullableSearchResultDataPointsInner {
	return &NullableSearchResultDataPointsInner{value: val, isSet: true}
}

func (v NullableSearchResultDataPointsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultDataPointsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


