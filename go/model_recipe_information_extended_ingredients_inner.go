/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 2.0.2
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecipeInformationExtendedIngredientsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeInformationExtendedIngredientsInner{}

// RecipeInformationExtendedIngredientsInner struct for RecipeInformationExtendedIngredientsInner
type RecipeInformationExtendedIngredientsInner struct {
	Aisle string `json:"aisle"`
	Amount float32 `json:"amount"`
	Consistency string `json:"consistency"`
	Id int32 `json:"id"`
	Image string `json:"image"`
	Measures *RecipeInformationExtendedIngredientsInnerMeasures `json:"measures,omitempty"`
	Meta []string `json:"meta,omitempty"`
	Name string `json:"name"`
	Original string `json:"original"`
	OriginalName string `json:"originalName"`
	Unit string `json:"unit"`
}

type _RecipeInformationExtendedIngredientsInner RecipeInformationExtendedIngredientsInner

// NewRecipeInformationExtendedIngredientsInner instantiates a new RecipeInformationExtendedIngredientsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeInformationExtendedIngredientsInner(aisle string, amount float32, consistency string, id int32, image string, name string, original string, originalName string, unit string) *RecipeInformationExtendedIngredientsInner {
	this := RecipeInformationExtendedIngredientsInner{}
	this.Aisle = aisle
	this.Amount = amount
	this.Consistency = consistency
	this.Id = id
	this.Image = image
	this.Name = name
	this.Original = original
	this.OriginalName = originalName
	this.Unit = unit
	return &this
}

// NewRecipeInformationExtendedIngredientsInnerWithDefaults instantiates a new RecipeInformationExtendedIngredientsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeInformationExtendedIngredientsInnerWithDefaults() *RecipeInformationExtendedIngredientsInner {
	this := RecipeInformationExtendedIngredientsInner{}
	return &this
}

// GetAisle returns the Aisle field value
func (o *RecipeInformationExtendedIngredientsInner) GetAisle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Aisle
}

// GetAisleOk returns a tuple with the Aisle field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetAisleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aisle, true
}

// SetAisle sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetAisle(v string) {
	o.Aisle = v
}

// GetAmount returns the Amount field value
func (o *RecipeInformationExtendedIngredientsInner) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetAmount(v float32) {
	o.Amount = v
}

// GetConsistency returns the Consistency field value
func (o *RecipeInformationExtendedIngredientsInner) GetConsistency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Consistency
}

// GetConsistencyOk returns a tuple with the Consistency field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetConsistencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consistency, true
}

// SetConsistency sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetConsistency(v string) {
	o.Consistency = v
}

// GetId returns the Id field value
func (o *RecipeInformationExtendedIngredientsInner) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetId(v int32) {
	o.Id = v
}

// GetImage returns the Image field value
func (o *RecipeInformationExtendedIngredientsInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetImage(v string) {
	o.Image = v
}

// GetMeasures returns the Measures field value if set, zero value otherwise.
func (o *RecipeInformationExtendedIngredientsInner) GetMeasures() RecipeInformationExtendedIngredientsInnerMeasures {
	if o == nil || IsNil(o.Measures) {
		var ret RecipeInformationExtendedIngredientsInnerMeasures
		return ret
	}
	return *o.Measures
}

// GetMeasuresOk returns a tuple with the Measures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetMeasuresOk() (*RecipeInformationExtendedIngredientsInnerMeasures, bool) {
	if o == nil || IsNil(o.Measures) {
		return nil, false
	}
	return o.Measures, true
}

// HasMeasures returns a boolean if a field has been set.
func (o *RecipeInformationExtendedIngredientsInner) HasMeasures() bool {
	if o != nil && !IsNil(o.Measures) {
		return true
	}

	return false
}

// SetMeasures gets a reference to the given RecipeInformationExtendedIngredientsInnerMeasures and assigns it to the Measures field.
func (o *RecipeInformationExtendedIngredientsInner) SetMeasures(v RecipeInformationExtendedIngredientsInnerMeasures) {
	o.Measures = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *RecipeInformationExtendedIngredientsInner) GetMeta() []string {
	if o == nil || IsNil(o.Meta) {
		var ret []string
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetMetaOk() ([]string, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *RecipeInformationExtendedIngredientsInner) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given []string and assigns it to the Meta field.
func (o *RecipeInformationExtendedIngredientsInner) SetMeta(v []string) {
	o.Meta = v
}

// GetName returns the Name field value
func (o *RecipeInformationExtendedIngredientsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetName(v string) {
	o.Name = v
}

// GetOriginal returns the Original field value
func (o *RecipeInformationExtendedIngredientsInner) GetOriginal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Original
}

// GetOriginalOk returns a tuple with the Original field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetOriginalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Original, true
}

// SetOriginal sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetOriginal(v string) {
	o.Original = v
}

// GetOriginalName returns the OriginalName field value
func (o *RecipeInformationExtendedIngredientsInner) GetOriginalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetOriginalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalName, true
}

// SetOriginalName sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetOriginalName(v string) {
	o.OriginalName = v
}

// GetUnit returns the Unit field value
func (o *RecipeInformationExtendedIngredientsInner) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationExtendedIngredientsInner) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *RecipeInformationExtendedIngredientsInner) SetUnit(v string) {
	o.Unit = v
}

func (o RecipeInformationExtendedIngredientsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeInformationExtendedIngredientsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aisle"] = o.Aisle
	toSerialize["amount"] = o.Amount
	toSerialize["consistency"] = o.Consistency
	toSerialize["id"] = o.Id
	toSerialize["image"] = o.Image
	if !IsNil(o.Measures) {
		toSerialize["measures"] = o.Measures
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	toSerialize["name"] = o.Name
	toSerialize["original"] = o.Original
	toSerialize["originalName"] = o.OriginalName
	toSerialize["unit"] = o.Unit
	return toSerialize, nil
}

func (o *RecipeInformationExtendedIngredientsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aisle",
		"amount",
		"consistency",
		"id",
		"image",
		"name",
		"original",
		"originalName",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecipeInformationExtendedIngredientsInner := _RecipeInformationExtendedIngredientsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecipeInformationExtendedIngredientsInner)

	if err != nil {
		return err
	}

	*o = RecipeInformationExtendedIngredientsInner(varRecipeInformationExtendedIngredientsInner)

	return err
}

type NullableRecipeInformationExtendedIngredientsInner struct {
	value *RecipeInformationExtendedIngredientsInner
	isSet bool
}

func (v NullableRecipeInformationExtendedIngredientsInner) Get() *RecipeInformationExtendedIngredientsInner {
	return v.value
}

func (v *NullableRecipeInformationExtendedIngredientsInner) Set(val *RecipeInformationExtendedIngredientsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeInformationExtendedIngredientsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeInformationExtendedIngredientsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeInformationExtendedIngredientsInner(val *RecipeInformationExtendedIngredientsInner) *NullableRecipeInformationExtendedIngredientsInner {
	return &NullableRecipeInformationExtendedIngredientsInner{value: val, isSet: true}
}

func (v NullableRecipeInformationExtendedIngredientsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeInformationExtendedIngredientsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


