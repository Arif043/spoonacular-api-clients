/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecipeInformationWinePairingProductMatchesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeInformationWinePairingProductMatchesInner{}

// RecipeInformationWinePairingProductMatchesInner struct for RecipeInformationWinePairingProductMatchesInner
type RecipeInformationWinePairingProductMatchesInner struct {
	Id int32 `json:"id"`
	Title string `json:"title"`
	Description string `json:"description"`
	Price string `json:"price"`
	ImageUrl string `json:"imageUrl"`
	AverageRating float32 `json:"averageRating"`
	RatingCount int32 `json:"ratingCount"`
	Score float32 `json:"score"`
	Link string `json:"link"`
}

type _RecipeInformationWinePairingProductMatchesInner RecipeInformationWinePairingProductMatchesInner

// NewRecipeInformationWinePairingProductMatchesInner instantiates a new RecipeInformationWinePairingProductMatchesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeInformationWinePairingProductMatchesInner(id int32, title string, description string, price string, imageUrl string, averageRating float32, ratingCount int32, score float32, link string) *RecipeInformationWinePairingProductMatchesInner {
	this := RecipeInformationWinePairingProductMatchesInner{}
	this.Id = id
	this.Title = title
	this.Description = description
	this.Price = price
	this.ImageUrl = imageUrl
	this.AverageRating = averageRating
	this.RatingCount = ratingCount
	this.Score = score
	this.Link = link
	return &this
}

// NewRecipeInformationWinePairingProductMatchesInnerWithDefaults instantiates a new RecipeInformationWinePairingProductMatchesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeInformationWinePairingProductMatchesInnerWithDefaults() *RecipeInformationWinePairingProductMatchesInner {
	this := RecipeInformationWinePairingProductMatchesInner{}
	return &this
}

// GetId returns the Id field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetId(v int32) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetDescription(v string) {
	o.Description = v
}

// GetPrice returns the Price field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetPrice(v string) {
	o.Price = v
}

// GetImageUrl returns the ImageUrl field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageUrl, true
}

// SetImageUrl sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetImageUrl(v string) {
	o.ImageUrl = v
}

// GetAverageRating returns the AverageRating field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetAverageRating() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AverageRating
}

// GetAverageRatingOk returns a tuple with the AverageRating field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetAverageRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AverageRating, true
}

// SetAverageRating sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetAverageRating(v float32) {
	o.AverageRating = v
}

// GetRatingCount returns the RatingCount field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetRatingCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RatingCount
}

// GetRatingCountOk returns a tuple with the RatingCount field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetRatingCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RatingCount, true
}

// SetRatingCount sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetRatingCount(v int32) {
	o.RatingCount = v
}

// GetScore returns the Score field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetScore(v float32) {
	o.Score = v
}

// GetLink returns the Link field value
func (o *RecipeInformationWinePairingProductMatchesInner) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *RecipeInformationWinePairingProductMatchesInner) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *RecipeInformationWinePairingProductMatchesInner) SetLink(v string) {
	o.Link = v
}

func (o RecipeInformationWinePairingProductMatchesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeInformationWinePairingProductMatchesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["price"] = o.Price
	toSerialize["imageUrl"] = o.ImageUrl
	toSerialize["averageRating"] = o.AverageRating
	toSerialize["ratingCount"] = o.RatingCount
	toSerialize["score"] = o.Score
	toSerialize["link"] = o.Link
	return toSerialize, nil
}

func (o *RecipeInformationWinePairingProductMatchesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"description",
		"price",
		"imageUrl",
		"averageRating",
		"ratingCount",
		"score",
		"link",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecipeInformationWinePairingProductMatchesInner := _RecipeInformationWinePairingProductMatchesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecipeInformationWinePairingProductMatchesInner)

	if err != nil {
		return err
	}

	*o = RecipeInformationWinePairingProductMatchesInner(varRecipeInformationWinePairingProductMatchesInner)

	return err
}

type NullableRecipeInformationWinePairingProductMatchesInner struct {
	value *RecipeInformationWinePairingProductMatchesInner
	isSet bool
}

func (v NullableRecipeInformationWinePairingProductMatchesInner) Get() *RecipeInformationWinePairingProductMatchesInner {
	return v.value
}

func (v *NullableRecipeInformationWinePairingProductMatchesInner) Set(val *RecipeInformationWinePairingProductMatchesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeInformationWinePairingProductMatchesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeInformationWinePairingProductMatchesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeInformationWinePairingProductMatchesInner(val *RecipeInformationWinePairingProductMatchesInner) *NullableRecipeInformationWinePairingProductMatchesInner {
	return &NullableRecipeInformationWinePairingProductMatchesInner{value: val, isSet: true}
}

func (v NullableRecipeInformationWinePairingProductMatchesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeInformationWinePairingProductMatchesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


