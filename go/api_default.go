/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * API version: 1.0
 * Contact: david@spoonacular.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package spoonacular

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
	"os"
)

// Linger please
var (
	_ context.Context
)

type DefaultApiService service

/*
DefaultApiService Add to Meal Plan
Add an item to the user&#39;s meal plan.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param hash The private hash for the username.
 * @param inlineObject11
@return map[string]interface{}
*/
func (a *DefaultApiService) AddToMealPlan(ctx context.Context, username string, hash string, inlineObject11 InlineObject11) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{""}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject11
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Add to Shopping List
Add an item to the current shopping list of a user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param hash The private hash for the username.
 * @param inlineObject14
@return map[string]interface{}
*/
func (a *DefaultApiService) AddToShoppingList(ctx context.Context, username string, hash string, inlineObject14 InlineObject14) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/shopping-list/items"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{""}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject14
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Analyze a Recipe Search Query
Parse a recipe search query to find out its intention.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param q The recipe search query.
@return map[string]interface{}
*/
func (a *DefaultApiService) AnalyzeARecipeSearchQuery(ctx context.Context, q string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/queries/analyze"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("q", parameterToString(q, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Analyze Recipe Instructions
This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instructions The instructions to be analyzed.
@return map[string]interface{}
*/
func (a *DefaultApiService) AnalyzeRecipeInstructions(ctx context.Context, instructions string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/analyzeInstructions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("instructions", parameterToString(instructions, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Autocomplete Ingredient Search
Autocomplete the entry of an ingredient.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The partial or full ingredient name.
 * @param optional nil or *AutocompleteIngredientSearchOpts - Optional Parameters:
 * @param "Number" (optional.Float32) -  The number of results to return (between 1 and 100).
 * @param "MetaInformation" (optional.Bool) -  Whether to return more meta information about the ingredients.
 * @param "Intolerances" (optional.String) -  A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
@return map[string]interface{}
*/

type AutocompleteIngredientSearchOpts struct {
	Number optional.Float32
	MetaInformation optional.Bool
	Intolerances optional.String
}

func (a *DefaultApiService) AutocompleteIngredientSearch(ctx context.Context, query string, localVarOptionals *AutocompleteIngredientSearchOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/autocomplete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MetaInformation.IsSet() {
		localVarQueryParams.Add("metaInformation", parameterToString(localVarOptionals.MetaInformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Intolerances.IsSet() {
		localVarQueryParams.Add("intolerances", parameterToString(localVarOptionals.Intolerances.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Autocomplete Menu Item Search
Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The (partial) search query.
 * @param optional nil or *AutocompleteMenuItemSearchOpts - Optional Parameters:
 * @param "Number" (optional.Float32) -  The number of results to return (between 1 and 25).
@return map[string]interface{}
*/

type AutocompleteMenuItemSearchOpts struct {
	Number optional.Float32
}

func (a *DefaultApiService) AutocompleteMenuItemSearch(ctx context.Context, query string, localVarOptionals *AutocompleteMenuItemSearchOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/menuItems/suggest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Autocomplete Product Search
Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The (partial) search query.
 * @param optional nil or *AutocompleteProductSearchOpts - Optional Parameters:
 * @param "Number" (optional.Float32) -  The number of results to return (between 1 and 25).
@return map[string]interface{}
*/

type AutocompleteProductSearchOpts struct {
	Number optional.Float32
}

func (a *DefaultApiService) AutocompleteProductSearch(ctx context.Context, query string, localVarOptionals *AutocompleteProductSearchOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/suggest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Autocomplete Recipe Search
Autocomplete a partial input to suggest possible recipe names.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The query to be autocompleted.
 * @param optional nil or *AutocompleteRecipeSearchOpts - Optional Parameters:
 * @param "Number" (optional.Float32) -  The number of results to return (between 1 and 25).
@return map[string]interface{}
*/

type AutocompleteRecipeSearchOpts struct {
	Number optional.Float32
}

func (a *DefaultApiService) AutocompleteRecipeSearch(ctx context.Context, query string, localVarOptionals *AutocompleteRecipeSearchOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/autocomplete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Classify Cuisine
Classify the recipe&#39;s cuisine.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param title The title of the recipe.
 * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
@return map[string]interface{}
*/
func (a *DefaultApiService) ClassifyCuisine(ctx context.Context, title string, ingredientList string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/cuisine"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("title", parameterToString(title, ""))
	localVarFormParams.Add("ingredientList", parameterToString(ingredientList, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Classify Grocery Product
This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inlineObject9
 * @param optional nil or *ClassifyGroceryProductOpts - Optional Parameters:
 * @param "Locale" (optional.String) -  The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
@return map[string]interface{}
*/

type ClassifyGroceryProductOpts struct {
	Locale optional.String
}

func (a *DefaultApiService) ClassifyGroceryProduct(ctx context.Context, inlineObject9 InlineObject9, localVarOptionals *ClassifyGroceryProductOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/classify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarQueryParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject9
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Classify Grocery Product Bulk
Provide a set of product jsons, get back classified products.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param optional nil or *ClassifyGroceryProductBulkOpts - Optional Parameters:
 * @param "Locale" (optional.String) -  The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
@return map[string]interface{}
*/

type ClassifyGroceryProductBulkOpts struct {
	Locale optional.String
}

func (a *DefaultApiService) ClassifyGroceryProductBulk(ctx context.Context, body map[string]interface{}, localVarOptionals *ClassifyGroceryProductBulkOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/classifyBatch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarQueryParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Clear Meal Plan Day
Delete all planned items from the user&#39;s meal plan for a specific day.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param date The date in the format yyyy-mm-dd.
 * @param hash The private hash for the username.
 * @param inlineObject10
@return map[string]interface{}
*/
func (a *DefaultApiService) ClearMealPlanDay(ctx context.Context, username string, date string, hash string, inlineObject10 InlineObject10) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/day/{date}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", fmt.Sprintf("%v", date), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{""}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject10
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Compute Glycemic Load
Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
@return map[string]interface{}
*/
func (a *DefaultApiService) ComputeGlycemicLoad(ctx context.Context, body map[string]interface{}) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/glycemicLoad"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Connect User
In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
@return map[string]interface{}
*/
func (a *DefaultApiService) ConnectUser(ctx context.Context, body map[string]interface{}) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/users/connect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{""}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Convert Amounts
Convert amounts like \&quot;2 cups of flour to grams\&quot;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientName The ingredient which you want to convert.
 * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
 * @param sourceUnit The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
 * @param targetUnit The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
@return map[string]interface{}
*/
func (a *DefaultApiService) ConvertAmounts(ctx context.Context, ingredientName string, sourceAmount float32, sourceUnit string, targetUnit string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/convert"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ingredientName", parameterToString(ingredientName, ""))
	localVarQueryParams.Add("sourceAmount", parameterToString(sourceAmount, ""))
	localVarQueryParams.Add("sourceUnit", parameterToString(sourceUnit, ""))
	localVarQueryParams.Add("targetUnit", parameterToString(targetUnit, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Create Recipe Card
Generate a recipe card for a recipe.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param title The title of the recipe.
 * @param image The binary image of the recipe as jpg.
 * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
 * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
 * @param readyInMinutes The number of minutes it takes to get the recipe on the table.
 * @param servings The number of servings the recipe makes.
 * @param mask The mask to put over the recipe image (\\\"ellipseMask\\\", \\\"diamondMask\\\", \\\"starMask\\\", \\\"heartMask\\\", \\\"potMask\\\", \\\"fishMask\\\").
 * @param backgroundImage The background image (\\\"none\\\",\\\"background1\\\", or \\\"background2\\\").
 * @param optional nil or *CreateRecipeCardOpts - Optional Parameters:
 * @param "Author" (optional.String) -  The author of the recipe.
 * @param "BackgroundColor" (optional.String) -  The background color for the recipe card as a hex-string.
 * @param "FontColor" (optional.String) -  The font color for the recipe card as a hex-string.
 * @param "Source" (optional.String) -  The source of the recipe.
@return map[string]interface{}
*/

type CreateRecipeCardOpts struct {
	Author optional.String
	BackgroundColor optional.String
	FontColor optional.String
	Source optional.String
}

func (a *DefaultApiService) CreateRecipeCard(ctx context.Context, title string, image *os.File, ingredients string, instructions string, readyInMinutes float32, servings float32, mask string, backgroundImage string, localVarOptionals *CreateRecipeCardOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeRecipe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("title", parameterToString(title, ""))
	localVarFormFileName = "image"
	localVarFile := image
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	localVarFormParams.Add("ingredients", parameterToString(ingredients, ""))
	localVarFormParams.Add("instructions", parameterToString(instructions, ""))
	localVarFormParams.Add("readyInMinutes", parameterToString(readyInMinutes, ""))
	localVarFormParams.Add("servings", parameterToString(servings, ""))
	localVarFormParams.Add("mask", parameterToString(mask, ""))
	localVarFormParams.Add("backgroundImage", parameterToString(backgroundImage, ""))
	if localVarOptionals != nil && localVarOptionals.Author.IsSet() {
		localVarFormParams.Add("author", parameterToString(localVarOptionals.Author.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackgroundColor.IsSet() {
		localVarFormParams.Add("backgroundColor", parameterToString(localVarOptionals.BackgroundColor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FontColor.IsSet() {
		localVarFormParams.Add("fontColor", parameterToString(localVarOptionals.FontColor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Source.IsSet() {
		localVarFormParams.Add("source", parameterToString(localVarOptionals.Source.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Delete from Meal Plan
Delete an item from the user&#39;s meal plan.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param id The shopping list item id.
 * @param hash The private hash for the username.
 * @param inlineObject12
@return map[string]interface{}
*/
func (a *DefaultApiService) DeleteFromMealPlan(ctx context.Context, username string, id float32, hash string, inlineObject12 InlineObject12) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{""}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject12
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Delete from Shopping List
Delete an item from the current shopping list of the user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param id The shopping list item id.
 * @param hash The private hash for the username.
 * @param inlineObject15
@return map[string]interface{}
*/
func (a *DefaultApiService) DeleteFromShoppingList(ctx context.Context, username string, id float32, hash string, inlineObject15 InlineObject15) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/shopping-list/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{""}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject15
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Detect Food in Text
Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param text The text in which food items, such as dish names and ingredients, should be detected in.
@return map[string]interface{}
*/
func (a *DefaultApiService) DetectFoodInText(ctx context.Context, text string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/detect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("text", parameterToString(text, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Extract Recipe from Website
This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param url The URL of the recipe page.
 * @param optional nil or *ExtractRecipeFromWebsiteOpts - Optional Parameters:
 * @param "ForceExtraction" (optional.Bool) -  If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
 * @param "Analyze" (optional.Bool) -  If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
@return map[string]interface{}
*/

type ExtractRecipeFromWebsiteOpts struct {
	ForceExtraction optional.Bool
	Analyze optional.Bool
}

func (a *DefaultApiService) ExtractRecipeFromWebsite(ctx context.Context, url string, localVarOptionals *ExtractRecipeFromWebsiteOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/extract"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	if localVarOptionals != nil && localVarOptionals.ForceExtraction.IsSet() {
		localVarQueryParams.Add("forceExtraction", parameterToString(localVarOptionals.ForceExtraction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Analyze.IsSet() {
		localVarQueryParams.Add("analyze", parameterToString(localVarOptionals.Analyze.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Generate Meal Plan
Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GenerateMealPlanOpts - Optional Parameters:
 * @param "TimeFrame" (optional.String) -  Either for one \"day\" or an entire \"week\".
 * @param "TargetCalories" (optional.Float32) -  What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
 * @param "Diet" (optional.String) -  Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
 * @param "Exclude" (optional.String) -  A comma-separated list of allergens or ingredients that must be excluded.
@return map[string]interface{}
*/

type GenerateMealPlanOpts struct {
	TimeFrame optional.String
	TargetCalories optional.Float32
	Diet optional.String
	Exclude optional.String
}

func (a *DefaultApiService) GenerateMealPlan(ctx context.Context, localVarOptionals *GenerateMealPlanOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.TimeFrame.IsSet() {
		localVarQueryParams.Add("timeFrame", parameterToString(localVarOptionals.TimeFrame.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TargetCalories.IsSet() {
		localVarQueryParams.Add("targetCalories", parameterToString(localVarOptionals.TargetCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diet.IsSet() {
		localVarQueryParams.Add("diet", parameterToString(localVarOptionals.Diet.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Exclude.IsSet() {
		localVarQueryParams.Add("exclude", parameterToString(localVarOptionals.Exclude.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Generate Shopping List
Generate the shopping list for a user from the meal planner in a given time frame.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param startDate The start date in the format yyyy-mm-dd.
 * @param endDate The end date in the format yyyy-mm-dd.
 * @param hash The private hash for the username.
 * @param inlineObject13
@return map[string]interface{}
*/
func (a *DefaultApiService) GenerateShoppingList(ctx context.Context, username string, startDate string, endDate string, hash string, inlineObject13 InlineObject13) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/shopping-list/{start-date}/{end-date}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"start-date"+"}", fmt.Sprintf("%v", startDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"end-date"+"}", fmt.Sprintf("%v", endDate), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{""}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject13
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get a Random Food Joke
Get a random joke that is related to food. Caution: this is an endpoint for adults!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return map[string]interface{}
*/
func (a *DefaultApiService) GetARandomFoodJoke(ctx context.Context) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/jokes/random"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Analyzed Recipe Instructions
Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *GetAnalyzedRecipeInstructionsOpts - Optional Parameters:
 * @param "StepBreakdown" (optional.Bool) -  Whether to break down the recipe steps even more.
@return map[string]interface{}
*/

type GetAnalyzedRecipeInstructionsOpts struct {
	StepBreakdown optional.Bool
}

func (a *DefaultApiService) GetAnalyzedRecipeInstructions(ctx context.Context, id float32, localVarOptionals *GetAnalyzedRecipeInstructionsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/analyzedInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StepBreakdown.IsSet() {
		localVarQueryParams.Add("stepBreakdown", parameterToString(localVarOptionals.StepBreakdown.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Comparable Products
Find comparable products to the given one.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param upc The UPC of the product for which you want to find comparable products.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetComparableProducts(ctx context.Context, upc float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/upc/{upc}/comparable"
	localVarPath = strings.Replace(localVarPath, "{"+"upc"+"}", fmt.Sprintf("%v", upc), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Conversation Suggests
This endpoint returns suggestions for things the user can say or ask the chatbot.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
 * @param optional nil or *GetConversationSuggestsOpts - Optional Parameters:
 * @param "Number" (optional.Float32) -  The number of suggestions to return (between 1 and 25).
@return map[string]interface{}
*/

type GetConversationSuggestsOpts struct {
	Number optional.Float32
}

func (a *DefaultApiService) GetConversationSuggests(ctx context.Context, query string, localVarOptionals *GetConversationSuggestsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/converse/suggest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Dish Pairing for Wine
Find a dish that goes well with a given wine.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param wine The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
@return map[string]interface{}
*/
func (a *DefaultApiService) GetDishPairingForWine(ctx context.Context, wine string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/wine/dishes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("wine", parameterToString(wine, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Ingredient Information
Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ingredient id.
 * @param optional nil or *GetIngredientInformationOpts - Optional Parameters:
 * @param "Amount" (optional.Float32) -  The amount of this ingredient.
 * @param "Unit" (optional.String) -  The unit for the given amount.
@return map[string]interface{}
*/

type GetIngredientInformationOpts struct {
	Amount optional.Float32
	Unit optional.String
}

func (a *DefaultApiService) GetIngredientInformation(ctx context.Context, id float32, localVarOptionals *GetIngredientInformationOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/{id}/information"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Amount.IsSet() {
		localVarQueryParams.Add("amount", parameterToString(localVarOptionals.Amount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Unit.IsSet() {
		localVarQueryParams.Add("unit", parameterToString(localVarOptionals.Unit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Ingredient Substitutes
Search for substitutes for a given ingredient.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientName The name of the ingredient you want to replace.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetIngredientSubstitutes(ctx context.Context, ingredientName string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/substitutes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ingredientName", parameterToString(ingredientName, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Ingredient Substitutes by ID
Search for substitutes for a given ingredient.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The id of the ingredient you want substitutes for.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetIngredientSubstitutesByID(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/{id}/substitutes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Meal Plan Template
Get information about a meal plan template.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param id The shopping list item id.
 * @param hash The private hash for the username.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetMealPlanTemplate(ctx context.Context, username string, id float32, hash string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/templates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Meal Plan Templates
Get meal plan templates from user or public ones.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param hash The private hash for the username.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetMealPlanTemplates(ctx context.Context, username string, hash string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/templates"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Meal Plan Week
Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.
 * @param hash The private hash for the username.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetMealPlanWeek(ctx context.Context, username string, startDate string, hash string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/week/{start-date}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"start-date"+"}", fmt.Sprintf("%v", startDate), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Menu Item Information
Use a menu item id to get all available information about a menu item, such as nutrition.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The menu item id.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetMenuItemInformation(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/menuItems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Product Information
Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The id of the packaged food.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetProductInformation(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Random Food Trivia
Returns random food trivia.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return map[string]interface{}
*/
func (a *DefaultApiService) GetRandomFoodTrivia(ctx context.Context) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/trivia/random"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Random Recipes
Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetRandomRecipesOpts - Optional Parameters:
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
 * @param "Tags" (optional.String) -  The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
 * @param "Number" (optional.Float32) -  The number of random recipes to be returned (between 1 and 100).
@return map[string]interface{}
*/

type GetRandomRecipesOpts struct {
	LimitLicense optional.Bool
	Tags optional.String
	Number optional.Float32
}

func (a *DefaultApiService) GetRandomRecipes(ctx context.Context, localVarOptionals *GetRandomRecipesOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/random"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Recipe Equipment by ID
Get a recipe&#39;s equipment list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetRecipeEquipmentByID(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/equipmentWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Recipe Information
Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The id of the recipe.
 * @param optional nil or *GetRecipeInformationOpts - Optional Parameters:
 * @param "IncludeNutrition" (optional.Bool) -  Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
@return map[string]interface{}
*/

type GetRecipeInformationOpts struct {
	IncludeNutrition optional.Bool
}

func (a *DefaultApiService) GetRecipeInformation(ctx context.Context, id float32, localVarOptionals *GetRecipeInformationOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/information"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IncludeNutrition.IsSet() {
		localVarQueryParams.Add("includeNutrition", parameterToString(localVarOptionals.IncludeNutrition.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Recipe Information Bulk
Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ids A comma-separated list of recipe ids.
 * @param optional nil or *GetRecipeInformationBulkOpts - Optional Parameters:
 * @param "IncludeNutrition" (optional.Bool) -  Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
@return map[string]interface{}
*/

type GetRecipeInformationBulkOpts struct {
	IncludeNutrition optional.Bool
}

func (a *DefaultApiService) GetRecipeInformationBulk(ctx context.Context, ids string, localVarOptionals *GetRecipeInformationBulkOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/informationBulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ids", parameterToString(ids, ""))
	if localVarOptionals != nil && localVarOptionals.IncludeNutrition.IsSet() {
		localVarQueryParams.Add("includeNutrition", parameterToString(localVarOptionals.IncludeNutrition.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Recipe Ingredients by ID
Get a recipe&#39;s ingredient list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetRecipeIngredientsByID(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/ingredientWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Recipe Nutrition Widget by ID
Get a recipe&#39;s nutrition widget data.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetRecipeNutritionWidgetByID(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/nutritionWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Recipe Price Breakdown by ID
Get a recipe&#39;s price breakdown data.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetRecipePriceBreakdownByID(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/priceBreakdownWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Recipe Taste by ID
Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetRecipeTasteByID(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/tasteWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Shopping List
Get the current shopping list for the given user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param username The username.
 * @param hash The private hash for the username.
@return map[string]interface{}
*/
func (a *DefaultApiService) GetShoppingList(ctx context.Context, username string, hash string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mealplanner/{username}/shopping-list"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", fmt.Sprintf("%v", username), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Similar Recipes
Find recipes which are similar to the given one.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The id of the source recipe for which similar recipes should be found.
 * @param optional nil or *GetSimilarRecipesOpts - Optional Parameters:
 * @param "Number" (optional.Float32) -  The number of random recipes to be returned (between 1 and 100).
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
@return map[string]interface{}
*/

type GetSimilarRecipesOpts struct {
	Number optional.Float32
	LimitLicense optional.Bool
}

func (a *DefaultApiService) GetSimilarRecipes(ctx context.Context, id float32, localVarOptionals *GetSimilarRecipesOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/similar"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Wine Description
Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param wine The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
@return map[string]interface{}
*/
func (a *DefaultApiService) GetWineDescription(ctx context.Context, wine string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/wine/description"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("wine", parameterToString(wine, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Wine Pairing
Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param food The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
 * @param optional nil or *GetWinePairingOpts - Optional Parameters:
 * @param "MaxPrice" (optional.Float32) -  The maximum price for the specific wine recommendation in USD.
@return map[string]interface{}
*/

type GetWinePairingOpts struct {
	MaxPrice optional.Float32
}

func (a *DefaultApiService) GetWinePairing(ctx context.Context, food string, localVarOptionals *GetWinePairingOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/wine/pairing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("food", parameterToString(food, ""))
	if localVarOptionals != nil && localVarOptionals.MaxPrice.IsSet() {
		localVarQueryParams.Add("maxPrice", parameterToString(localVarOptionals.MaxPrice.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Get Wine Recommendation
Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param wine The type of wine to get a specific product recommendation for.
 * @param optional nil or *GetWineRecommendationOpts - Optional Parameters:
 * @param "MaxPrice" (optional.Float32) -  The maximum price for the specific wine recommendation in USD.
 * @param "MinRating" (optional.Float32) -  The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
 * @param "Number" (optional.Float32) -  The number of wine recommendations expected (between 1 and 100).
@return map[string]interface{}
*/

type GetWineRecommendationOpts struct {
	MaxPrice optional.Float32
	MinRating optional.Float32
	Number optional.Float32
}

func (a *DefaultApiService) GetWineRecommendation(ctx context.Context, wine string, localVarOptionals *GetWineRecommendationOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/wine/recommendation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("wine", parameterToString(wine, ""))
	if localVarOptionals != nil && localVarOptionals.MaxPrice.IsSet() {
		localVarQueryParams.Add("maxPrice", parameterToString(localVarOptionals.MaxPrice.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinRating.IsSet() {
		localVarQueryParams.Add("minRating", parameterToString(localVarOptionals.MinRating.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Guess Nutrition by Dish Name
Estimate the macronutrients of a dish based on its title.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param title The title of the dish.
@return map[string]interface{}
*/
func (a *DefaultApiService) GuessNutritionByDishName(ctx context.Context, title string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/guessNutrition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("title", parameterToString(title, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Image Analysis by URL
Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param imageUrl The URL of the image to be analyzed.
@return map[string]interface{}
*/
func (a *DefaultApiService) ImageAnalysisByURL(ctx context.Context, imageUrl string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/images/analyze"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("imageUrl", parameterToString(imageUrl, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Image Classification by URL
Classify a food image. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param imageUrl The URL of the image to be classified.
@return map[string]interface{}
*/
func (a *DefaultApiService) ImageClassificationByURL(ctx context.Context, imageUrl string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/images/classify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("imageUrl", parameterToString(imageUrl, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Ingredient Search
Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The partial or full ingredient name.
 * @param optional nil or *IngredientSearchOpts - Optional Parameters:
 * @param "AddChildren" (optional.Bool) -  Whether to add children of found foods.
 * @param "MinProteinPercent" (optional.Float32) -  The minimum percentage of protein the food must have (between 0 and 100).
 * @param "MaxProteinPercent" (optional.Float32) -  The maximum percentage of protein the food can have (between 0 and 100).
 * @param "MinFatPercent" (optional.Float32) -  The minimum percentage of fat the food must have (between 0 and 100).
 * @param "MaxFatPercent" (optional.Float32) -  The maximum percentage of fat the food can have (between 0 and 100).
 * @param "MinCarbsPercent" (optional.Float32) -  The minimum percentage of carbs the food must have (between 0 and 100).
 * @param "MaxCarbsPercent" (optional.Float32) -  The maximum percentage of carbs the food can have (between 0 and 100).
 * @param "MetaInformation" (optional.Bool) -  Whether to return more meta information about the ingredients.
 * @param "Intolerances" (optional.String) -  A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
 * @param "Sort" (optional.String) -  The strategy to sort recipes by. See a full list of supported sorting options.
 * @param "SortDirection" (optional.String) -  The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
 * @param "Offset" (optional.Float32) -  The number of results to skip (between 0 and 990).
 * @param "Number" (optional.Float32) -  The number of expected results (between 1 and 100).
@return map[string]interface{}
*/

type IngredientSearchOpts struct {
	AddChildren optional.Bool
	MinProteinPercent optional.Float32
	MaxProteinPercent optional.Float32
	MinFatPercent optional.Float32
	MaxFatPercent optional.Float32
	MinCarbsPercent optional.Float32
	MaxCarbsPercent optional.Float32
	MetaInformation optional.Bool
	Intolerances optional.String
	Sort optional.String
	SortDirection optional.String
	Offset optional.Float32
	Number optional.Float32
}

func (a *DefaultApiService) IngredientSearch(ctx context.Context, query string, localVarOptionals *IngredientSearchOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.AddChildren.IsSet() {
		localVarQueryParams.Add("addChildren", parameterToString(localVarOptionals.AddChildren.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinProteinPercent.IsSet() {
		localVarQueryParams.Add("minProteinPercent", parameterToString(localVarOptionals.MinProteinPercent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxProteinPercent.IsSet() {
		localVarQueryParams.Add("maxProteinPercent", parameterToString(localVarOptionals.MaxProteinPercent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFatPercent.IsSet() {
		localVarQueryParams.Add("minFatPercent", parameterToString(localVarOptionals.MinFatPercent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFatPercent.IsSet() {
		localVarQueryParams.Add("maxFatPercent", parameterToString(localVarOptionals.MaxFatPercent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCarbsPercent.IsSet() {
		localVarQueryParams.Add("minCarbsPercent", parameterToString(localVarOptionals.MinCarbsPercent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCarbsPercent.IsSet() {
		localVarQueryParams.Add("maxCarbsPercent", parameterToString(localVarOptionals.MaxCarbsPercent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MetaInformation.IsSet() {
		localVarQueryParams.Add("metaInformation", parameterToString(localVarOptionals.MetaInformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Intolerances.IsSet() {
		localVarQueryParams.Add("intolerances", parameterToString(localVarOptionals.Intolerances.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortDirection.IsSet() {
		localVarQueryParams.Add("sortDirection", parameterToString(localVarOptionals.SortDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Map Ingredients to Grocery Products
Map a set of ingredients to products you can buy in the grocery store.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
@return map[string]interface{}
*/
func (a *DefaultApiService) MapIngredientsToGroceryProducts(ctx context.Context, body map[string]interface{}) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/map"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Parse Ingredients
Extract an ingredient from plain text.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientList The ingredient list of the recipe, one ingredient per line.
 * @param servings The number of servings that you can make from the ingredients.
 * @param optional nil or *ParseIngredientsOpts - Optional Parameters:
 * @param "IncludeNutrition" (optional.Bool) -  Whether nutrition data should be added to correctly parsed ingredients.
@return map[string]interface{}
*/

type ParseIngredientsOpts struct {
	IncludeNutrition optional.Bool
}

func (a *DefaultApiService) ParseIngredients(ctx context.Context, ingredientList string, servings float32, localVarOptionals *ParseIngredientsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/parseIngredients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("ingredientList", parameterToString(ingredientList, ""))
	localVarFormParams.Add("servings", parameterToString(servings, ""))
	if localVarOptionals != nil && localVarOptionals.IncludeNutrition.IsSet() {
		localVarFormParams.Add("includeNutrition", parameterToString(localVarOptionals.IncludeNutrition.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Quick Answer
Answer a nutrition related natural language question.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param q The nutrition related question.
@return map[string]interface{}
*/
func (a *DefaultApiService) QuickAnswer(ctx context.Context, q string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/quickAnswer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("q", parameterToString(q, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search All Food
Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The search query.
 * @param optional nil or *SearchAllFoodOpts - Optional Parameters:
 * @param "Offset" (optional.Float32) -  The number of results to skip (between 0 and 990).
 * @param "Number" (optional.Float32) -  The number of expected results (between 1 and 100).
@return map[string]interface{}
*/

type SearchAllFoodOpts struct {
	Offset optional.Float32
	Number optional.Float32
}

func (a *DefaultApiService) SearchAllFood(ctx context.Context, query string, localVarOptionals *SearchAllFoodOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Custom Foods
Search custom foods in a user&#39;s account.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The search query.
 * @param username The username.
 * @param hash The private hash for the username.
 * @param optional nil or *SearchCustomFoodsOpts - Optional Parameters:
 * @param "Offset" (optional.Float32) -  The number of results to skip (between 0 and 990).
 * @param "Number" (optional.Float32) -  The number of expected results (between 1 and 100).
@return map[string]interface{}
*/

type SearchCustomFoodsOpts struct {
	Offset optional.Float32
	Number optional.Float32
}

func (a *DefaultApiService) SearchCustomFoods(ctx context.Context, query string, username string, hash string, localVarOptionals *SearchCustomFoodsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/customFoods/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	localVarQueryParams.Add("username", parameterToString(username, ""))
	localVarQueryParams.Add("hash", parameterToString(hash, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Food Videos
Find recipe and other food related videos.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The search query.
 * @param optional nil or *SearchFoodVideosOpts - Optional Parameters:
 * @param "Type_" (optional.String) -  The type of the recipes. See a full list of supported meal types.
 * @param "Cuisine" (optional.String) -  The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
 * @param "Diet" (optional.String) -  The diet for which the recipes must be suitable. See a full list of supported diets.
 * @param "IncludeIngredients" (optional.String) -  A comma-separated list of ingredients that the recipes should contain.
 * @param "ExcludeIngredients" (optional.String) -  A comma-separated list of ingredients or ingredient types that the recipes must not contain.
 * @param "MinLength" (optional.Float32) -  Minimum video length in seconds.
 * @param "MaxLength" (optional.Float32) -  Maximum video length in seconds.
 * @param "Offset" (optional.Float32) -  The number of results to skip (between 0 and 900).
 * @param "Number" (optional.Float32) -  The number of results to return (between 1 and 100).
@return map[string]interface{}
*/

type SearchFoodVideosOpts struct {
	Type_ optional.String
	Cuisine optional.String
	Diet optional.String
	IncludeIngredients optional.String
	ExcludeIngredients optional.String
	MinLength optional.Float32
	MaxLength optional.Float32
	Offset optional.Float32
	Number optional.Float32
}

func (a *DefaultApiService) SearchFoodVideos(ctx context.Context, query string, localVarOptionals *SearchFoodVideosOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/videos/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cuisine.IsSet() {
		localVarQueryParams.Add("cuisine", parameterToString(localVarOptionals.Cuisine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diet.IsSet() {
		localVarQueryParams.Add("diet", parameterToString(localVarOptionals.Diet.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeIngredients.IsSet() {
		localVarQueryParams.Add("includeIngredients", parameterToString(localVarOptionals.IncludeIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeIngredients.IsSet() {
		localVarQueryParams.Add("excludeIngredients", parameterToString(localVarOptionals.ExcludeIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinLength.IsSet() {
		localVarQueryParams.Add("minLength", parameterToString(localVarOptionals.MinLength.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxLength.IsSet() {
		localVarQueryParams.Add("maxLength", parameterToString(localVarOptionals.MaxLength.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Grocery Products
Search packaged food products, such as frozen pizza or Greek yogurt.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The search query.
 * @param optional nil or *SearchGroceryProductsOpts - Optional Parameters:
 * @param "MinCalories" (optional.Float32) -  The minimum amount of calories the product must have.
 * @param "MaxCalories" (optional.Float32) -  The maximum amount of calories the product can have.
 * @param "MinCarbs" (optional.Float32) -  The minimum amount of carbohydrates in grams the product must have.
 * @param "MaxCarbs" (optional.Float32) -  The maximum amount of carbohydrates in grams the product can have.
 * @param "MinProtein" (optional.Float32) -  The minimum amount of protein in grams the product must have.
 * @param "MaxProtein" (optional.Float32) -  The maximum amount of protein in grams the product can have.
 * @param "MinFat" (optional.Float32) -  The minimum amount of fat in grams the product must have.
 * @param "MaxFat" (optional.Float32) -  The maximum amount of fat in grams the product can have.
 * @param "Offset" (optional.Float32) -  The number of results to skip (between 0 and 990).
 * @param "Number" (optional.Float32) -  The number of expected results (between 1 and 100).
@return map[string]interface{}
*/

type SearchGroceryProductsOpts struct {
	MinCalories optional.Float32
	MaxCalories optional.Float32
	MinCarbs optional.Float32
	MaxCarbs optional.Float32
	MinProtein optional.Float32
	MaxProtein optional.Float32
	MinFat optional.Float32
	MaxFat optional.Float32
	Offset optional.Float32
	Number optional.Float32
}

func (a *DefaultApiService) SearchGroceryProducts(ctx context.Context, query string, localVarOptionals *SearchGroceryProductsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.MinCalories.IsSet() {
		localVarQueryParams.Add("minCalories", parameterToString(localVarOptionals.MinCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalories.IsSet() {
		localVarQueryParams.Add("maxCalories", parameterToString(localVarOptionals.MaxCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCarbs.IsSet() {
		localVarQueryParams.Add("minCarbs", parameterToString(localVarOptionals.MinCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCarbs.IsSet() {
		localVarQueryParams.Add("maxCarbs", parameterToString(localVarOptionals.MaxCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinProtein.IsSet() {
		localVarQueryParams.Add("minProtein", parameterToString(localVarOptionals.MinProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxProtein.IsSet() {
		localVarQueryParams.Add("maxProtein", parameterToString(localVarOptionals.MaxProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFat.IsSet() {
		localVarQueryParams.Add("minFat", parameterToString(localVarOptionals.MinFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFat.IsSet() {
		localVarQueryParams.Add("maxFat", parameterToString(localVarOptionals.MaxFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Grocery Products by UPC
Get information about a packaged food using its UPC.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param upc The product's UPC.
@return map[string]interface{}
*/
func (a *DefaultApiService) SearchGroceryProductsByUPC(ctx context.Context, upc float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/upc/{upc}"
	localVarPath = strings.Replace(localVarPath, "{"+"upc"+"}", fmt.Sprintf("%v", upc), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Menu Items
Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The search query.
 * @param optional nil or *SearchMenuItemsOpts - Optional Parameters:
 * @param "MinCalories" (optional.Float32) -  The minimum amount of calories the menu item must have.
 * @param "MaxCalories" (optional.Float32) -  The maximum amount of calories the menu item can have.
 * @param "MinCarbs" (optional.Float32) -  The minimum amount of carbohydrates in grams the menu item must have.
 * @param "MaxCarbs" (optional.Float32) -  The maximum amount of carbohydrates in grams the menu item can have.
 * @param "MinProtein" (optional.Float32) -  The minimum amount of protein in grams the menu item must have.
 * @param "MaxProtein" (optional.Float32) -  The maximum amount of protein in grams the menu item can have.
 * @param "MinFat" (optional.Float32) -  The minimum amount of fat in grams the menu item must have.
 * @param "MaxFat" (optional.Float32) -  The maximum amount of fat in grams the menu item can have.
 * @param "Offset" (optional.Float32) -  The offset number for paging (between 0 and 990).
 * @param "Number" (optional.Float32) -  The number of expected results (between 1 and 10).
@return map[string]interface{}
*/

type SearchMenuItemsOpts struct {
	MinCalories optional.Float32
	MaxCalories optional.Float32
	MinCarbs optional.Float32
	MaxCarbs optional.Float32
	MinProtein optional.Float32
	MaxProtein optional.Float32
	MinFat optional.Float32
	MaxFat optional.Float32
	Offset optional.Float32
	Number optional.Float32
}

func (a *DefaultApiService) SearchMenuItems(ctx context.Context, query string, localVarOptionals *SearchMenuItemsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/menuItems/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.MinCalories.IsSet() {
		localVarQueryParams.Add("minCalories", parameterToString(localVarOptionals.MinCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalories.IsSet() {
		localVarQueryParams.Add("maxCalories", parameterToString(localVarOptionals.MaxCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCarbs.IsSet() {
		localVarQueryParams.Add("minCarbs", parameterToString(localVarOptionals.MinCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCarbs.IsSet() {
		localVarQueryParams.Add("maxCarbs", parameterToString(localVarOptionals.MaxCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinProtein.IsSet() {
		localVarQueryParams.Add("minProtein", parameterToString(localVarOptionals.MinProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxProtein.IsSet() {
		localVarQueryParams.Add("maxProtein", parameterToString(localVarOptionals.MaxProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFat.IsSet() {
		localVarQueryParams.Add("minFat", parameterToString(localVarOptionals.MinFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFat.IsSet() {
		localVarQueryParams.Add("maxFat", parameterToString(localVarOptionals.MaxFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Recipes
Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The (natural language) recipe search query.
 * @param optional nil or *SearchRecipesOpts - Optional Parameters:
 * @param "Cuisine" (optional.String) -  The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
 * @param "ExcludeCuisine" (optional.String) -  The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
 * @param "Diet" (optional.String) -  The diet for which the recipes must be suitable. See a full list of supported diets.
 * @param "Intolerances" (optional.String) -  A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
 * @param "Equipment" (optional.String) -  The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
 * @param "IncludeIngredients" (optional.String) -  A comma-separated list of ingredients that should/must be used in the recipes.
 * @param "ExcludeIngredients" (optional.String) -  A comma-separated list of ingredients or ingredient types that the recipes must not contain.
 * @param "Type_" (optional.String) -  The type of recipe. See a full list of supported meal types.
 * @param "InstructionsRequired" (optional.Bool) -  Whether the recipes must have instructions.
 * @param "FillIngredients" (optional.Bool) -  Add information about the ingredients and whether they are used or missing in relation to the query.
 * @param "AddRecipeInformation" (optional.Bool) -  If set to true, you get more information about the recipes returned.
 * @param "AddRecipeNutrition" (optional.Bool) -  If set to true, you get nutritional information about each recipes returned.
 * @param "Author" (optional.String) -  The username of the recipe author.
 * @param "Tags" (optional.String) -  User defined tags that have to match. The author param has to be set.
 * @param "RecipeBoxId" (optional.Float32) -  The id of the recipe box to which the search should be limited to.
 * @param "TitleMatch" (optional.String) -  Enter text that must be found in the title of the recipes.
 * @param "MaxReadyTime" (optional.Float32) -  The maximum time in minutes it should take to prepare and cook the recipe.
 * @param "IgnorePantry" (optional.Bool) -  Whether to ignore typical pantry items, such as water, salt, flour, etc.
 * @param "Sort" (optional.String) -  The strategy to sort recipes by. See a full list of supported sorting options.
 * @param "SortDirection" (optional.String) -  The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
 * @param "MinCarbs" (optional.Float32) -  The minimum amount of carbohydrates in grams the recipe must have.
 * @param "MaxCarbs" (optional.Float32) -  The maximum amount of carbohydrates in grams the recipe can have.
 * @param "MinProtein" (optional.Float32) -  The minimum amount of protein in grams the recipe must have.
 * @param "MaxProtein" (optional.Float32) -  The maximum amount of protein in grams the recipe can have.
 * @param "MinCalories" (optional.Float32) -  The minimum amount of calories the recipe must have.
 * @param "MaxCalories" (optional.Float32) -  The maximum amount of calories the recipe can have.
 * @param "MinFat" (optional.Float32) -  The minimum amount of fat in grams the recipe must have.
 * @param "MaxFat" (optional.Float32) -  The maximum amount of fat in grams the recipe can have.
 * @param "MinAlcohol" (optional.Float32) -  The minimum amount of alcohol in grams the recipe must have.
 * @param "MaxAlcohol" (optional.Float32) -  The maximum amount of alcohol in grams the recipe can have.
 * @param "MinCaffeine" (optional.Float32) -  The minimum amount of caffeine in milligrams the recipe must have.
 * @param "MaxCaffeine" (optional.Float32) -  The maximum amount of caffeine in milligrams the recipe can have.
 * @param "MinCopper" (optional.Float32) -  The minimum amount of copper in milligrams the recipe must have.
 * @param "MaxCopper" (optional.Float32) -  The maximum amount of copper in milligrams the recipe can have.
 * @param "MinCalcium" (optional.Float32) -  The minimum amount of calcium in milligrams the recipe must have.
 * @param "MaxCalcium" (optional.Float32) -  The maximum amount of calcium in milligrams the recipe can have.
 * @param "MinCholine" (optional.Float32) -  The minimum amount of choline in milligrams the recipe must have.
 * @param "MaxCholine" (optional.Float32) -  The maximum amount of choline in milligrams the recipe can have.
 * @param "MinCholesterol" (optional.Float32) -  The minimum amount of cholesterol in milligrams the recipe must have.
 * @param "MaxCholesterol" (optional.Float32) -  The maximum amount of cholesterol in milligrams the recipe can have.
 * @param "MinFluoride" (optional.Float32) -  The minimum amount of fluoride in milligrams the recipe must have.
 * @param "MaxFluoride" (optional.Float32) -  The maximum amount of fluoride in milligrams the recipe can have.
 * @param "MinSaturatedFat" (optional.Float32) -  The minimum amount of saturated fat in grams the recipe must have.
 * @param "MaxSaturatedFat" (optional.Float32) -  The maximum amount of saturated fat in grams the recipe can have.
 * @param "MinVitaminA" (optional.Float32) -  The minimum amount of Vitamin A in IU the recipe must have.
 * @param "MaxVitaminA" (optional.Float32) -  The maximum amount of Vitamin A in IU the recipe can have.
 * @param "MinVitaminC" (optional.Float32) -  The minimum amount of Vitamin C milligrams the recipe must have.
 * @param "MaxVitaminC" (optional.Float32) -  The maximum amount of Vitamin C in milligrams the recipe can have.
 * @param "MinVitaminD" (optional.Float32) -  The minimum amount of Vitamin D in micrograms the recipe must have.
 * @param "MaxVitaminD" (optional.Float32) -  The maximum amount of Vitamin D in micrograms the recipe can have.
 * @param "MinVitaminE" (optional.Float32) -  The minimum amount of Vitamin E in milligrams the recipe must have.
 * @param "MaxVitaminE" (optional.Float32) -  The maximum amount of Vitamin E in milligrams the recipe can have.
 * @param "MinVitaminK" (optional.Float32) -  The minimum amount of Vitamin K in micrograms the recipe must have.
 * @param "MaxVitaminK" (optional.Float32) -  The maximum amount of Vitamin K in micrograms the recipe can have.
 * @param "MinVitaminB1" (optional.Float32) -  The minimum amount of Vitamin B1 in milligrams the recipe must have.
 * @param "MaxVitaminB1" (optional.Float32) -  The maximum amount of Vitamin B1 in milligrams the recipe can have.
 * @param "MinVitaminB2" (optional.Float32) -  The minimum amount of Vitamin B2 in milligrams the recipe must have.
 * @param "MaxVitaminB2" (optional.Float32) -  The maximum amount of Vitamin B2 in milligrams the recipe can have.
 * @param "MinVitaminB5" (optional.Float32) -  The minimum amount of Vitamin B5 in milligrams the recipe must have.
 * @param "MaxVitaminB5" (optional.Float32) -  The maximum amount of Vitamin B5 in milligrams the recipe can have.
 * @param "MinVitaminB3" (optional.Float32) -  The minimum amount of Vitamin B3 in milligrams the recipe must have.
 * @param "MaxVitaminB3" (optional.Float32) -  The maximum amount of Vitamin B3 in milligrams the recipe can have.
 * @param "MinVitaminB6" (optional.Float32) -  The minimum amount of Vitamin B6 in milligrams the recipe must have.
 * @param "MaxVitaminB6" (optional.Float32) -  The maximum amount of Vitamin B6 in milligrams the recipe can have.
 * @param "MinVitaminB12" (optional.Float32) -  The minimum amount of Vitamin B12 in micrograms the recipe must have.
 * @param "MaxVitaminB12" (optional.Float32) -  The maximum amount of Vitamin B12 in micrograms the recipe can have.
 * @param "MinFiber" (optional.Float32) -  The minimum amount of fiber in grams the recipe must have.
 * @param "MaxFiber" (optional.Float32) -  The maximum amount of fiber in grams the recipe can have.
 * @param "MinFolate" (optional.Float32) -  The minimum amount of folate in micrograms the recipe must have.
 * @param "MaxFolate" (optional.Float32) -  The maximum amount of folate in micrograms the recipe can have.
 * @param "MinFolicAcid" (optional.Float32) -  The minimum amount of folic acid in micrograms the recipe must have.
 * @param "MaxFolicAcid" (optional.Float32) -  The maximum amount of folic acid in micrograms the recipe can have.
 * @param "MinIodine" (optional.Float32) -  The minimum amount of iodine in micrograms the recipe must have.
 * @param "MaxIodine" (optional.Float32) -  The maximum amount of iodine in micrograms the recipe can have.
 * @param "MinIron" (optional.Float32) -  The minimum amount of iron in milligrams the recipe must have.
 * @param "MaxIron" (optional.Float32) -  The maximum amount of iron in milligrams the recipe can have.
 * @param "MinMagnesium" (optional.Float32) -  The minimum amount of magnesium in milligrams the recipe must have.
 * @param "MaxMagnesium" (optional.Float32) -  The maximum amount of magnesium in milligrams the recipe can have.
 * @param "MinManganese" (optional.Float32) -  The minimum amount of manganese in milligrams the recipe must have.
 * @param "MaxManganese" (optional.Float32) -  The maximum amount of manganese in milligrams the recipe can have.
 * @param "MinPhosphorus" (optional.Float32) -  The minimum amount of phosphorus in milligrams the recipe must have.
 * @param "MaxPhosphorus" (optional.Float32) -  The maximum amount of phosphorus in milligrams the recipe can have.
 * @param "MinPotassium" (optional.Float32) -  The minimum amount of potassium in milligrams the recipe must have.
 * @param "MaxPotassium" (optional.Float32) -  The maximum amount of potassium in milligrams the recipe can have.
 * @param "MinSelenium" (optional.Float32) -  The minimum amount of selenium in micrograms the recipe must have.
 * @param "MaxSelenium" (optional.Float32) -  The maximum amount of selenium in micrograms the recipe can have.
 * @param "MinSodium" (optional.Float32) -  The minimum amount of sodium in milligrams the recipe must have.
 * @param "MaxSodium" (optional.Float32) -  The maximum amount of sodium in milligrams the recipe can have.
 * @param "MinSugar" (optional.Float32) -  The minimum amount of sugar in grams the recipe must have.
 * @param "MaxSugar" (optional.Float32) -  The maximum amount of sugar in grams the recipe can have.
 * @param "MinZinc" (optional.Float32) -  The minimum amount of zinc in milligrams the recipe must have.
 * @param "MaxZinc" (optional.Float32) -  The maximum amount of zinc in milligrams the recipe can have.
 * @param "Offset" (optional.Float32) -  The number of results to skip (between 0 and 900).
 * @param "Number" (optional.Float32) -  The number of expected results (between 1 and 100).
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
@return map[string]interface{}
*/

type SearchRecipesOpts struct {
	Cuisine optional.String
	ExcludeCuisine optional.String
	Diet optional.String
	Intolerances optional.String
	Equipment optional.String
	IncludeIngredients optional.String
	ExcludeIngredients optional.String
	Type_ optional.String
	InstructionsRequired optional.Bool
	FillIngredients optional.Bool
	AddRecipeInformation optional.Bool
	AddRecipeNutrition optional.Bool
	Author optional.String
	Tags optional.String
	RecipeBoxId optional.Float32
	TitleMatch optional.String
	MaxReadyTime optional.Float32
	IgnorePantry optional.Bool
	Sort optional.String
	SortDirection optional.String
	MinCarbs optional.Float32
	MaxCarbs optional.Float32
	MinProtein optional.Float32
	MaxProtein optional.Float32
	MinCalories optional.Float32
	MaxCalories optional.Float32
	MinFat optional.Float32
	MaxFat optional.Float32
	MinAlcohol optional.Float32
	MaxAlcohol optional.Float32
	MinCaffeine optional.Float32
	MaxCaffeine optional.Float32
	MinCopper optional.Float32
	MaxCopper optional.Float32
	MinCalcium optional.Float32
	MaxCalcium optional.Float32
	MinCholine optional.Float32
	MaxCholine optional.Float32
	MinCholesterol optional.Float32
	MaxCholesterol optional.Float32
	MinFluoride optional.Float32
	MaxFluoride optional.Float32
	MinSaturatedFat optional.Float32
	MaxSaturatedFat optional.Float32
	MinVitaminA optional.Float32
	MaxVitaminA optional.Float32
	MinVitaminC optional.Float32
	MaxVitaminC optional.Float32
	MinVitaminD optional.Float32
	MaxVitaminD optional.Float32
	MinVitaminE optional.Float32
	MaxVitaminE optional.Float32
	MinVitaminK optional.Float32
	MaxVitaminK optional.Float32
	MinVitaminB1 optional.Float32
	MaxVitaminB1 optional.Float32
	MinVitaminB2 optional.Float32
	MaxVitaminB2 optional.Float32
	MinVitaminB5 optional.Float32
	MaxVitaminB5 optional.Float32
	MinVitaminB3 optional.Float32
	MaxVitaminB3 optional.Float32
	MinVitaminB6 optional.Float32
	MaxVitaminB6 optional.Float32
	MinVitaminB12 optional.Float32
	MaxVitaminB12 optional.Float32
	MinFiber optional.Float32
	MaxFiber optional.Float32
	MinFolate optional.Float32
	MaxFolate optional.Float32
	MinFolicAcid optional.Float32
	MaxFolicAcid optional.Float32
	MinIodine optional.Float32
	MaxIodine optional.Float32
	MinIron optional.Float32
	MaxIron optional.Float32
	MinMagnesium optional.Float32
	MaxMagnesium optional.Float32
	MinManganese optional.Float32
	MaxManganese optional.Float32
	MinPhosphorus optional.Float32
	MaxPhosphorus optional.Float32
	MinPotassium optional.Float32
	MaxPotassium optional.Float32
	MinSelenium optional.Float32
	MaxSelenium optional.Float32
	MinSodium optional.Float32
	MaxSodium optional.Float32
	MinSugar optional.Float32
	MaxSugar optional.Float32
	MinZinc optional.Float32
	MaxZinc optional.Float32
	Offset optional.Float32
	Number optional.Float32
	LimitLicense optional.Bool
}

func (a *DefaultApiService) SearchRecipes(ctx context.Context, query string, localVarOptionals *SearchRecipesOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/complexSearch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	if localVarOptionals != nil && localVarOptionals.Cuisine.IsSet() {
		localVarQueryParams.Add("cuisine", parameterToString(localVarOptionals.Cuisine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeCuisine.IsSet() {
		localVarQueryParams.Add("excludeCuisine", parameterToString(localVarOptionals.ExcludeCuisine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diet.IsSet() {
		localVarQueryParams.Add("diet", parameterToString(localVarOptionals.Diet.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Intolerances.IsSet() {
		localVarQueryParams.Add("intolerances", parameterToString(localVarOptionals.Intolerances.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Equipment.IsSet() {
		localVarQueryParams.Add("equipment", parameterToString(localVarOptionals.Equipment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeIngredients.IsSet() {
		localVarQueryParams.Add("includeIngredients", parameterToString(localVarOptionals.IncludeIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeIngredients.IsSet() {
		localVarQueryParams.Add("excludeIngredients", parameterToString(localVarOptionals.ExcludeIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InstructionsRequired.IsSet() {
		localVarQueryParams.Add("instructionsRequired", parameterToString(localVarOptionals.InstructionsRequired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FillIngredients.IsSet() {
		localVarQueryParams.Add("fillIngredients", parameterToString(localVarOptionals.FillIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AddRecipeInformation.IsSet() {
		localVarQueryParams.Add("addRecipeInformation", parameterToString(localVarOptionals.AddRecipeInformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AddRecipeNutrition.IsSet() {
		localVarQueryParams.Add("addRecipeNutrition", parameterToString(localVarOptionals.AddRecipeNutrition.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Author.IsSet() {
		localVarQueryParams.Add("author", parameterToString(localVarOptionals.Author.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RecipeBoxId.IsSet() {
		localVarQueryParams.Add("recipeBoxId", parameterToString(localVarOptionals.RecipeBoxId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TitleMatch.IsSet() {
		localVarQueryParams.Add("titleMatch", parameterToString(localVarOptionals.TitleMatch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxReadyTime.IsSet() {
		localVarQueryParams.Add("maxReadyTime", parameterToString(localVarOptionals.MaxReadyTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IgnorePantry.IsSet() {
		localVarQueryParams.Add("ignorePantry", parameterToString(localVarOptionals.IgnorePantry.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortDirection.IsSet() {
		localVarQueryParams.Add("sortDirection", parameterToString(localVarOptionals.SortDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCarbs.IsSet() {
		localVarQueryParams.Add("minCarbs", parameterToString(localVarOptionals.MinCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCarbs.IsSet() {
		localVarQueryParams.Add("maxCarbs", parameterToString(localVarOptionals.MaxCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinProtein.IsSet() {
		localVarQueryParams.Add("minProtein", parameterToString(localVarOptionals.MinProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxProtein.IsSet() {
		localVarQueryParams.Add("maxProtein", parameterToString(localVarOptionals.MaxProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalories.IsSet() {
		localVarQueryParams.Add("minCalories", parameterToString(localVarOptionals.MinCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalories.IsSet() {
		localVarQueryParams.Add("maxCalories", parameterToString(localVarOptionals.MaxCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFat.IsSet() {
		localVarQueryParams.Add("minFat", parameterToString(localVarOptionals.MinFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFat.IsSet() {
		localVarQueryParams.Add("maxFat", parameterToString(localVarOptionals.MaxFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinAlcohol.IsSet() {
		localVarQueryParams.Add("minAlcohol", parameterToString(localVarOptionals.MinAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAlcohol.IsSet() {
		localVarQueryParams.Add("maxAlcohol", parameterToString(localVarOptionals.MaxAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCaffeine.IsSet() {
		localVarQueryParams.Add("minCaffeine", parameterToString(localVarOptionals.MinCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCaffeine.IsSet() {
		localVarQueryParams.Add("maxCaffeine", parameterToString(localVarOptionals.MaxCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCopper.IsSet() {
		localVarQueryParams.Add("minCopper", parameterToString(localVarOptionals.MinCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCopper.IsSet() {
		localVarQueryParams.Add("maxCopper", parameterToString(localVarOptionals.MaxCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalcium.IsSet() {
		localVarQueryParams.Add("minCalcium", parameterToString(localVarOptionals.MinCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalcium.IsSet() {
		localVarQueryParams.Add("maxCalcium", parameterToString(localVarOptionals.MaxCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholine.IsSet() {
		localVarQueryParams.Add("minCholine", parameterToString(localVarOptionals.MinCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholine.IsSet() {
		localVarQueryParams.Add("maxCholine", parameterToString(localVarOptionals.MaxCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholesterol.IsSet() {
		localVarQueryParams.Add("minCholesterol", parameterToString(localVarOptionals.MinCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholesterol.IsSet() {
		localVarQueryParams.Add("maxCholesterol", parameterToString(localVarOptionals.MaxCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFluoride.IsSet() {
		localVarQueryParams.Add("minFluoride", parameterToString(localVarOptionals.MinFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFluoride.IsSet() {
		localVarQueryParams.Add("maxFluoride", parameterToString(localVarOptionals.MaxFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSaturatedFat.IsSet() {
		localVarQueryParams.Add("minSaturatedFat", parameterToString(localVarOptionals.MinSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSaturatedFat.IsSet() {
		localVarQueryParams.Add("maxSaturatedFat", parameterToString(localVarOptionals.MaxSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminA.IsSet() {
		localVarQueryParams.Add("minVitaminA", parameterToString(localVarOptionals.MinVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminA.IsSet() {
		localVarQueryParams.Add("maxVitaminA", parameterToString(localVarOptionals.MaxVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminC.IsSet() {
		localVarQueryParams.Add("minVitaminC", parameterToString(localVarOptionals.MinVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminC.IsSet() {
		localVarQueryParams.Add("maxVitaminC", parameterToString(localVarOptionals.MaxVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminD.IsSet() {
		localVarQueryParams.Add("minVitaminD", parameterToString(localVarOptionals.MinVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminD.IsSet() {
		localVarQueryParams.Add("maxVitaminD", parameterToString(localVarOptionals.MaxVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminE.IsSet() {
		localVarQueryParams.Add("minVitaminE", parameterToString(localVarOptionals.MinVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminE.IsSet() {
		localVarQueryParams.Add("maxVitaminE", parameterToString(localVarOptionals.MaxVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminK.IsSet() {
		localVarQueryParams.Add("minVitaminK", parameterToString(localVarOptionals.MinVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminK.IsSet() {
		localVarQueryParams.Add("maxVitaminK", parameterToString(localVarOptionals.MaxVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB1.IsSet() {
		localVarQueryParams.Add("minVitaminB1", parameterToString(localVarOptionals.MinVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB1.IsSet() {
		localVarQueryParams.Add("maxVitaminB1", parameterToString(localVarOptionals.MaxVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB2.IsSet() {
		localVarQueryParams.Add("minVitaminB2", parameterToString(localVarOptionals.MinVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB2.IsSet() {
		localVarQueryParams.Add("maxVitaminB2", parameterToString(localVarOptionals.MaxVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB5.IsSet() {
		localVarQueryParams.Add("minVitaminB5", parameterToString(localVarOptionals.MinVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB5.IsSet() {
		localVarQueryParams.Add("maxVitaminB5", parameterToString(localVarOptionals.MaxVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB3.IsSet() {
		localVarQueryParams.Add("minVitaminB3", parameterToString(localVarOptionals.MinVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB3.IsSet() {
		localVarQueryParams.Add("maxVitaminB3", parameterToString(localVarOptionals.MaxVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB6.IsSet() {
		localVarQueryParams.Add("minVitaminB6", parameterToString(localVarOptionals.MinVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB6.IsSet() {
		localVarQueryParams.Add("maxVitaminB6", parameterToString(localVarOptionals.MaxVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB12.IsSet() {
		localVarQueryParams.Add("minVitaminB12", parameterToString(localVarOptionals.MinVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB12.IsSet() {
		localVarQueryParams.Add("maxVitaminB12", parameterToString(localVarOptionals.MaxVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFiber.IsSet() {
		localVarQueryParams.Add("minFiber", parameterToString(localVarOptionals.MinFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFiber.IsSet() {
		localVarQueryParams.Add("maxFiber", parameterToString(localVarOptionals.MaxFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolate.IsSet() {
		localVarQueryParams.Add("minFolate", parameterToString(localVarOptionals.MinFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolate.IsSet() {
		localVarQueryParams.Add("maxFolate", parameterToString(localVarOptionals.MaxFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolicAcid.IsSet() {
		localVarQueryParams.Add("minFolicAcid", parameterToString(localVarOptionals.MinFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolicAcid.IsSet() {
		localVarQueryParams.Add("maxFolicAcid", parameterToString(localVarOptionals.MaxFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIodine.IsSet() {
		localVarQueryParams.Add("minIodine", parameterToString(localVarOptionals.MinIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIodine.IsSet() {
		localVarQueryParams.Add("maxIodine", parameterToString(localVarOptionals.MaxIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIron.IsSet() {
		localVarQueryParams.Add("minIron", parameterToString(localVarOptionals.MinIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIron.IsSet() {
		localVarQueryParams.Add("maxIron", parameterToString(localVarOptionals.MaxIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinMagnesium.IsSet() {
		localVarQueryParams.Add("minMagnesium", parameterToString(localVarOptionals.MinMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxMagnesium.IsSet() {
		localVarQueryParams.Add("maxMagnesium", parameterToString(localVarOptionals.MaxMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinManganese.IsSet() {
		localVarQueryParams.Add("minManganese", parameterToString(localVarOptionals.MinManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxManganese.IsSet() {
		localVarQueryParams.Add("maxManganese", parameterToString(localVarOptionals.MaxManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPhosphorus.IsSet() {
		localVarQueryParams.Add("minPhosphorus", parameterToString(localVarOptionals.MinPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPhosphorus.IsSet() {
		localVarQueryParams.Add("maxPhosphorus", parameterToString(localVarOptionals.MaxPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPotassium.IsSet() {
		localVarQueryParams.Add("minPotassium", parameterToString(localVarOptionals.MinPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPotassium.IsSet() {
		localVarQueryParams.Add("maxPotassium", parameterToString(localVarOptionals.MaxPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSelenium.IsSet() {
		localVarQueryParams.Add("minSelenium", parameterToString(localVarOptionals.MinSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSelenium.IsSet() {
		localVarQueryParams.Add("maxSelenium", parameterToString(localVarOptionals.MaxSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSodium.IsSet() {
		localVarQueryParams.Add("minSodium", parameterToString(localVarOptionals.MinSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSodium.IsSet() {
		localVarQueryParams.Add("maxSodium", parameterToString(localVarOptionals.MaxSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSugar.IsSet() {
		localVarQueryParams.Add("minSugar", parameterToString(localVarOptionals.MinSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSugar.IsSet() {
		localVarQueryParams.Add("maxSugar", parameterToString(localVarOptionals.MaxSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinZinc.IsSet() {
		localVarQueryParams.Add("minZinc", parameterToString(localVarOptionals.MinZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxZinc.IsSet() {
		localVarQueryParams.Add("maxZinc", parameterToString(localVarOptionals.MaxZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Recipes by Ingredients
             Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredients A comma-separated list of ingredients that the recipes should contain.
 * @param optional nil or *SearchRecipesByIngredientsOpts - Optional Parameters:
 * @param "Number" (optional.Float32) -  The maximum number of recipes to return (between 1 and 100). Defaults to 10.
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
 * @param "Ranking" (optional.Float32) -  Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
 * @param "IgnorePantry" (optional.Bool) -  Whether to ignore typical pantry items, such as water, salt, flour, etc.
@return map[string]interface{}
*/

type SearchRecipesByIngredientsOpts struct {
	Number optional.Float32
	LimitLicense optional.Bool
	Ranking optional.Float32
	IgnorePantry optional.Bool
}

func (a *DefaultApiService) SearchRecipesByIngredients(ctx context.Context, ingredients string, localVarOptionals *SearchRecipesByIngredientsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/findByIngredients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ingredients", parameterToString(ingredients, ""))
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ranking.IsSet() {
		localVarQueryParams.Add("ranking", parameterToString(localVarOptionals.Ranking.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IgnorePantry.IsSet() {
		localVarQueryParams.Add("ignorePantry", parameterToString(localVarOptionals.IgnorePantry.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Recipes by Nutrients
Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchRecipesByNutrientsOpts - Optional Parameters:
 * @param "MinCarbs" (optional.Float32) -  The minimum amount of carbohydrates in grams the recipe must have.
 * @param "MaxCarbs" (optional.Float32) -  The maximum amount of carbohydrates in grams the recipe can have.
 * @param "MinProtein" (optional.Float32) -  The minimum amount of protein in grams the recipe must have.
 * @param "MaxProtein" (optional.Float32) -  The maximum amount of protein in grams the recipe can have.
 * @param "MinCalories" (optional.Float32) -  The minimum amount of calories the recipe must have.
 * @param "MaxCalories" (optional.Float32) -  The maximum amount of calories the recipe can have.
 * @param "MinFat" (optional.Float32) -  The minimum amount of fat in grams the recipe must have.
 * @param "MaxFat" (optional.Float32) -  The maximum amount of fat in grams the recipe can have.
 * @param "MinAlcohol" (optional.Float32) -  The minimum amount of alcohol in grams the recipe must have.
 * @param "MaxAlcohol" (optional.Float32) -  The maximum amount of alcohol in grams the recipe can have.
 * @param "MinCaffeine" (optional.Float32) -  The minimum amount of caffeine in milligrams the recipe must have.
 * @param "MaxCaffeine" (optional.Float32) -  The maximum amount of caffeine in milligrams the recipe can have.
 * @param "MinCopper" (optional.Float32) -  The minimum amount of copper in milligrams the recipe must have.
 * @param "MaxCopper" (optional.Float32) -  The maximum amount of copper in milligrams the recipe can have.
 * @param "MinCalcium" (optional.Float32) -  The minimum amount of calcium in milligrams the recipe must have.
 * @param "MaxCalcium" (optional.Float32) -  The maximum amount of calcium in milligrams the recipe can have.
 * @param "MinCholine" (optional.Float32) -  The minimum amount of choline in milligrams the recipe must have.
 * @param "MaxCholine" (optional.Float32) -  The maximum amount of choline in milligrams the recipe can have.
 * @param "MinCholesterol" (optional.Float32) -  The minimum amount of cholesterol in milligrams the recipe must have.
 * @param "MaxCholesterol" (optional.Float32) -  The maximum amount of cholesterol in milligrams the recipe can have.
 * @param "MinFluoride" (optional.Float32) -  The minimum amount of fluoride in milligrams the recipe must have.
 * @param "MaxFluoride" (optional.Float32) -  The maximum amount of fluoride in milligrams the recipe can have.
 * @param "MinSaturatedFat" (optional.Float32) -  The minimum amount of saturated fat in grams the recipe must have.
 * @param "MaxSaturatedFat" (optional.Float32) -  The maximum amount of saturated fat in grams the recipe can have.
 * @param "MinVitaminA" (optional.Float32) -  The minimum amount of Vitamin A in IU the recipe must have.
 * @param "MaxVitaminA" (optional.Float32) -  The maximum amount of Vitamin A in IU the recipe can have.
 * @param "MinVitaminC" (optional.Float32) -  The minimum amount of Vitamin C in milligrams the recipe must have.
 * @param "MaxVitaminC" (optional.Float32) -  The maximum amount of Vitamin C in milligrams the recipe can have.
 * @param "MinVitaminD" (optional.Float32) -  The minimum amount of Vitamin D in micrograms the recipe must have.
 * @param "MaxVitaminD" (optional.Float32) -  The maximum amount of Vitamin D in micrograms the recipe can have.
 * @param "MinVitaminE" (optional.Float32) -  The minimum amount of Vitamin E in milligrams the recipe must have.
 * @param "MaxVitaminE" (optional.Float32) -  The maximum amount of Vitamin E in milligrams the recipe can have.
 * @param "MinVitaminK" (optional.Float32) -  The minimum amount of Vitamin K in micrograms the recipe must have.
 * @param "MaxVitaminK" (optional.Float32) -  The maximum amount of Vitamin K in micrograms the recipe can have.
 * @param "MinVitaminB1" (optional.Float32) -  The minimum amount of Vitamin B1 in milligrams the recipe must have.
 * @param "MaxVitaminB1" (optional.Float32) -  The maximum amount of Vitamin B1 in milligrams the recipe can have.
 * @param "MinVitaminB2" (optional.Float32) -  The minimum amount of Vitamin B2 in milligrams the recipe must have.
 * @param "MaxVitaminB2" (optional.Float32) -  The maximum amount of Vitamin B2 in milligrams the recipe can have.
 * @param "MinVitaminB5" (optional.Float32) -  The minimum amount of Vitamin B5 in milligrams the recipe must have.
 * @param "MaxVitaminB5" (optional.Float32) -  The maximum amount of Vitamin B5 in milligrams the recipe can have.
 * @param "MinVitaminB3" (optional.Float32) -  The minimum amount of Vitamin B3 in milligrams the recipe must have.
 * @param "MaxVitaminB3" (optional.Float32) -  The maximum amount of Vitamin B3 in milligrams the recipe can have.
 * @param "MinVitaminB6" (optional.Float32) -  The minimum amount of Vitamin B6 in milligrams the recipe must have.
 * @param "MaxVitaminB6" (optional.Float32) -  The maximum amount of Vitamin B6 in milligrams the recipe can have.
 * @param "MinVitaminB12" (optional.Float32) -  The minimum amount of Vitamin B12 in micrograms the recipe must have.
 * @param "MaxVitaminB12" (optional.Float32) -  The maximum amount of Vitamin B12 in micrograms the recipe can have.
 * @param "MinFiber" (optional.Float32) -  The minimum amount of fiber in grams the recipe must have.
 * @param "MaxFiber" (optional.Float32) -  The maximum amount of fiber in grams the recipe can have.
 * @param "MinFolate" (optional.Float32) -  The minimum amount of folate in micrograms the recipe must have.
 * @param "MaxFolate" (optional.Float32) -  The maximum amount of folate in micrograms the recipe can have.
 * @param "MinFolicAcid" (optional.Float32) -  The minimum amount of folic acid in micrograms the recipe must have.
 * @param "MaxFolicAcid" (optional.Float32) -  The maximum amount of folic acid in micrograms the recipe can have.
 * @param "MinIodine" (optional.Float32) -  The minimum amount of iodine in micrograms the recipe must have.
 * @param "MaxIodine" (optional.Float32) -  The maximum amount of iodine in micrograms the recipe can have.
 * @param "MinIron" (optional.Float32) -  The minimum amount of iron in milligrams the recipe must have.
 * @param "MaxIron" (optional.Float32) -  The maximum amount of iron in milligrams the recipe can have.
 * @param "MinMagnesium" (optional.Float32) -  The minimum amount of magnesium in milligrams the recipe must have.
 * @param "MaxMagnesium" (optional.Float32) -  The maximum amount of magnesium in milligrams the recipe can have.
 * @param "MinManganese" (optional.Float32) -  The minimum amount of manganese in milligrams the recipe must have.
 * @param "MaxManganese" (optional.Float32) -  The maximum amount of manganese in milligrams the recipe can have.
 * @param "MinPhosphorus" (optional.Float32) -  The minimum amount of phosphorus in milligrams the recipe must have.
 * @param "MaxPhosphorus" (optional.Float32) -  The maximum amount of phosphorus in milligrams the recipe can have.
 * @param "MinPotassium" (optional.Float32) -  The minimum amount of potassium in milligrams the recipe must have.
 * @param "MaxPotassium" (optional.Float32) -  The maximum amount of potassium in milligrams the recipe can have.
 * @param "MinSelenium" (optional.Float32) -  The minimum amount of selenium in micrograms the recipe must have.
 * @param "MaxSelenium" (optional.Float32) -  The maximum amount of selenium in micrograms the recipe can have.
 * @param "MinSodium" (optional.Float32) -  The minimum amount of sodium in milligrams the recipe must have.
 * @param "MaxSodium" (optional.Float32) -  The maximum amount of sodium in milligrams the recipe can have.
 * @param "MinSugar" (optional.Float32) -  The minimum amount of sugar in grams the recipe must have.
 * @param "MaxSugar" (optional.Float32) -  The maximum amount of sugar in grams the recipe can have.
 * @param "MinZinc" (optional.Float32) -  The minimum amount of zinc in milligrams the recipe must have.
 * @param "MaxZinc" (optional.Float32) -  The maximum amount of zinc in milligrams the recipe can have.
 * @param "Offset" (optional.Float32) -  The number of results to skip (between 0 and 900).
 * @param "Number" (optional.Float32) -  The number of expected results (between 1 and 100).
 * @param "Random" (optional.Bool) -  If true, every request will give you a random set of recipes within the requested limits.
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
@return map[string]interface{}
*/

type SearchRecipesByNutrientsOpts struct {
	MinCarbs optional.Float32
	MaxCarbs optional.Float32
	MinProtein optional.Float32
	MaxProtein optional.Float32
	MinCalories optional.Float32
	MaxCalories optional.Float32
	MinFat optional.Float32
	MaxFat optional.Float32
	MinAlcohol optional.Float32
	MaxAlcohol optional.Float32
	MinCaffeine optional.Float32
	MaxCaffeine optional.Float32
	MinCopper optional.Float32
	MaxCopper optional.Float32
	MinCalcium optional.Float32
	MaxCalcium optional.Float32
	MinCholine optional.Float32
	MaxCholine optional.Float32
	MinCholesterol optional.Float32
	MaxCholesterol optional.Float32
	MinFluoride optional.Float32
	MaxFluoride optional.Float32
	MinSaturatedFat optional.Float32
	MaxSaturatedFat optional.Float32
	MinVitaminA optional.Float32
	MaxVitaminA optional.Float32
	MinVitaminC optional.Float32
	MaxVitaminC optional.Float32
	MinVitaminD optional.Float32
	MaxVitaminD optional.Float32
	MinVitaminE optional.Float32
	MaxVitaminE optional.Float32
	MinVitaminK optional.Float32
	MaxVitaminK optional.Float32
	MinVitaminB1 optional.Float32
	MaxVitaminB1 optional.Float32
	MinVitaminB2 optional.Float32
	MaxVitaminB2 optional.Float32
	MinVitaminB5 optional.Float32
	MaxVitaminB5 optional.Float32
	MinVitaminB3 optional.Float32
	MaxVitaminB3 optional.Float32
	MinVitaminB6 optional.Float32
	MaxVitaminB6 optional.Float32
	MinVitaminB12 optional.Float32
	MaxVitaminB12 optional.Float32
	MinFiber optional.Float32
	MaxFiber optional.Float32
	MinFolate optional.Float32
	MaxFolate optional.Float32
	MinFolicAcid optional.Float32
	MaxFolicAcid optional.Float32
	MinIodine optional.Float32
	MaxIodine optional.Float32
	MinIron optional.Float32
	MaxIron optional.Float32
	MinMagnesium optional.Float32
	MaxMagnesium optional.Float32
	MinManganese optional.Float32
	MaxManganese optional.Float32
	MinPhosphorus optional.Float32
	MaxPhosphorus optional.Float32
	MinPotassium optional.Float32
	MaxPotassium optional.Float32
	MinSelenium optional.Float32
	MaxSelenium optional.Float32
	MinSodium optional.Float32
	MaxSodium optional.Float32
	MinSugar optional.Float32
	MaxSugar optional.Float32
	MinZinc optional.Float32
	MaxZinc optional.Float32
	Offset optional.Float32
	Number optional.Float32
	Random optional.Bool
	LimitLicense optional.Bool
}

func (a *DefaultApiService) SearchRecipesByNutrients(ctx context.Context, localVarOptionals *SearchRecipesByNutrientsOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/findByNutrients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MinCarbs.IsSet() {
		localVarQueryParams.Add("minCarbs", parameterToString(localVarOptionals.MinCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCarbs.IsSet() {
		localVarQueryParams.Add("maxCarbs", parameterToString(localVarOptionals.MaxCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinProtein.IsSet() {
		localVarQueryParams.Add("minProtein", parameterToString(localVarOptionals.MinProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxProtein.IsSet() {
		localVarQueryParams.Add("maxProtein", parameterToString(localVarOptionals.MaxProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalories.IsSet() {
		localVarQueryParams.Add("minCalories", parameterToString(localVarOptionals.MinCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalories.IsSet() {
		localVarQueryParams.Add("maxCalories", parameterToString(localVarOptionals.MaxCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFat.IsSet() {
		localVarQueryParams.Add("minFat", parameterToString(localVarOptionals.MinFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFat.IsSet() {
		localVarQueryParams.Add("maxFat", parameterToString(localVarOptionals.MaxFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinAlcohol.IsSet() {
		localVarQueryParams.Add("minAlcohol", parameterToString(localVarOptionals.MinAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAlcohol.IsSet() {
		localVarQueryParams.Add("maxAlcohol", parameterToString(localVarOptionals.MaxAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCaffeine.IsSet() {
		localVarQueryParams.Add("minCaffeine", parameterToString(localVarOptionals.MinCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCaffeine.IsSet() {
		localVarQueryParams.Add("maxCaffeine", parameterToString(localVarOptionals.MaxCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCopper.IsSet() {
		localVarQueryParams.Add("minCopper", parameterToString(localVarOptionals.MinCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCopper.IsSet() {
		localVarQueryParams.Add("maxCopper", parameterToString(localVarOptionals.MaxCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalcium.IsSet() {
		localVarQueryParams.Add("minCalcium", parameterToString(localVarOptionals.MinCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalcium.IsSet() {
		localVarQueryParams.Add("maxCalcium", parameterToString(localVarOptionals.MaxCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholine.IsSet() {
		localVarQueryParams.Add("minCholine", parameterToString(localVarOptionals.MinCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholine.IsSet() {
		localVarQueryParams.Add("maxCholine", parameterToString(localVarOptionals.MaxCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholesterol.IsSet() {
		localVarQueryParams.Add("minCholesterol", parameterToString(localVarOptionals.MinCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholesterol.IsSet() {
		localVarQueryParams.Add("maxCholesterol", parameterToString(localVarOptionals.MaxCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFluoride.IsSet() {
		localVarQueryParams.Add("minFluoride", parameterToString(localVarOptionals.MinFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFluoride.IsSet() {
		localVarQueryParams.Add("maxFluoride", parameterToString(localVarOptionals.MaxFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSaturatedFat.IsSet() {
		localVarQueryParams.Add("minSaturatedFat", parameterToString(localVarOptionals.MinSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSaturatedFat.IsSet() {
		localVarQueryParams.Add("maxSaturatedFat", parameterToString(localVarOptionals.MaxSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminA.IsSet() {
		localVarQueryParams.Add("minVitaminA", parameterToString(localVarOptionals.MinVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminA.IsSet() {
		localVarQueryParams.Add("maxVitaminA", parameterToString(localVarOptionals.MaxVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminC.IsSet() {
		localVarQueryParams.Add("minVitaminC", parameterToString(localVarOptionals.MinVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminC.IsSet() {
		localVarQueryParams.Add("maxVitaminC", parameterToString(localVarOptionals.MaxVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminD.IsSet() {
		localVarQueryParams.Add("minVitaminD", parameterToString(localVarOptionals.MinVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminD.IsSet() {
		localVarQueryParams.Add("maxVitaminD", parameterToString(localVarOptionals.MaxVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminE.IsSet() {
		localVarQueryParams.Add("minVitaminE", parameterToString(localVarOptionals.MinVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminE.IsSet() {
		localVarQueryParams.Add("maxVitaminE", parameterToString(localVarOptionals.MaxVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminK.IsSet() {
		localVarQueryParams.Add("minVitaminK", parameterToString(localVarOptionals.MinVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminK.IsSet() {
		localVarQueryParams.Add("maxVitaminK", parameterToString(localVarOptionals.MaxVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB1.IsSet() {
		localVarQueryParams.Add("minVitaminB1", parameterToString(localVarOptionals.MinVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB1.IsSet() {
		localVarQueryParams.Add("maxVitaminB1", parameterToString(localVarOptionals.MaxVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB2.IsSet() {
		localVarQueryParams.Add("minVitaminB2", parameterToString(localVarOptionals.MinVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB2.IsSet() {
		localVarQueryParams.Add("maxVitaminB2", parameterToString(localVarOptionals.MaxVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB5.IsSet() {
		localVarQueryParams.Add("minVitaminB5", parameterToString(localVarOptionals.MinVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB5.IsSet() {
		localVarQueryParams.Add("maxVitaminB5", parameterToString(localVarOptionals.MaxVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB3.IsSet() {
		localVarQueryParams.Add("minVitaminB3", parameterToString(localVarOptionals.MinVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB3.IsSet() {
		localVarQueryParams.Add("maxVitaminB3", parameterToString(localVarOptionals.MaxVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB6.IsSet() {
		localVarQueryParams.Add("minVitaminB6", parameterToString(localVarOptionals.MinVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB6.IsSet() {
		localVarQueryParams.Add("maxVitaminB6", parameterToString(localVarOptionals.MaxVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB12.IsSet() {
		localVarQueryParams.Add("minVitaminB12", parameterToString(localVarOptionals.MinVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB12.IsSet() {
		localVarQueryParams.Add("maxVitaminB12", parameterToString(localVarOptionals.MaxVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFiber.IsSet() {
		localVarQueryParams.Add("minFiber", parameterToString(localVarOptionals.MinFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFiber.IsSet() {
		localVarQueryParams.Add("maxFiber", parameterToString(localVarOptionals.MaxFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolate.IsSet() {
		localVarQueryParams.Add("minFolate", parameterToString(localVarOptionals.MinFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolate.IsSet() {
		localVarQueryParams.Add("maxFolate", parameterToString(localVarOptionals.MaxFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolicAcid.IsSet() {
		localVarQueryParams.Add("minFolicAcid", parameterToString(localVarOptionals.MinFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolicAcid.IsSet() {
		localVarQueryParams.Add("maxFolicAcid", parameterToString(localVarOptionals.MaxFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIodine.IsSet() {
		localVarQueryParams.Add("minIodine", parameterToString(localVarOptionals.MinIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIodine.IsSet() {
		localVarQueryParams.Add("maxIodine", parameterToString(localVarOptionals.MaxIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIron.IsSet() {
		localVarQueryParams.Add("minIron", parameterToString(localVarOptionals.MinIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIron.IsSet() {
		localVarQueryParams.Add("maxIron", parameterToString(localVarOptionals.MaxIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinMagnesium.IsSet() {
		localVarQueryParams.Add("minMagnesium", parameterToString(localVarOptionals.MinMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxMagnesium.IsSet() {
		localVarQueryParams.Add("maxMagnesium", parameterToString(localVarOptionals.MaxMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinManganese.IsSet() {
		localVarQueryParams.Add("minManganese", parameterToString(localVarOptionals.MinManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxManganese.IsSet() {
		localVarQueryParams.Add("maxManganese", parameterToString(localVarOptionals.MaxManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPhosphorus.IsSet() {
		localVarQueryParams.Add("minPhosphorus", parameterToString(localVarOptionals.MinPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPhosphorus.IsSet() {
		localVarQueryParams.Add("maxPhosphorus", parameterToString(localVarOptionals.MaxPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPotassium.IsSet() {
		localVarQueryParams.Add("minPotassium", parameterToString(localVarOptionals.MinPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPotassium.IsSet() {
		localVarQueryParams.Add("maxPotassium", parameterToString(localVarOptionals.MaxPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSelenium.IsSet() {
		localVarQueryParams.Add("minSelenium", parameterToString(localVarOptionals.MinSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSelenium.IsSet() {
		localVarQueryParams.Add("maxSelenium", parameterToString(localVarOptionals.MaxSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSodium.IsSet() {
		localVarQueryParams.Add("minSodium", parameterToString(localVarOptionals.MinSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSodium.IsSet() {
		localVarQueryParams.Add("maxSodium", parameterToString(localVarOptionals.MaxSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSugar.IsSet() {
		localVarQueryParams.Add("minSugar", parameterToString(localVarOptionals.MinSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSugar.IsSet() {
		localVarQueryParams.Add("maxSugar", parameterToString(localVarOptionals.MaxSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinZinc.IsSet() {
		localVarQueryParams.Add("minZinc", parameterToString(localVarOptionals.MinZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxZinc.IsSet() {
		localVarQueryParams.Add("maxZinc", parameterToString(localVarOptionals.MaxZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Random.IsSet() {
		localVarQueryParams.Add("random", parameterToString(localVarOptionals.Random.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Search Site Content
Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param query The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
@return map[string]interface{}
*/
func (a *DefaultApiService) SearchSiteContent(ctx context.Context, query string) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/site/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("query", parameterToString(query, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Summarize Recipe
Automatically generate a short description that summarizes key information about the recipe.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *DefaultApiService) SummarizeRecipe(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Talk to Chatbot
This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param text The request / question / answer from the user to the chatbot.
 * @param optional nil or *TalkToChatbotOpts - Optional Parameters:
 * @param "ContextId" (optional.String) -  An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
@return map[string]interface{}
*/

type TalkToChatbotOpts struct {
	ContextId optional.String
}

func (a *DefaultApiService) TalkToChatbot(ctx context.Context, text string, localVarOptionals *TalkToChatbotOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/converse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("text", parameterToString(text, ""))
	if localVarOptionals != nil && localVarOptionals.ContextId.IsSet() {
		localVarQueryParams.Add("contextId", parameterToString(localVarOptionals.ContextId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Equipment
Visualize the equipment used to make a recipe. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instructions The recipe's instructions.
 * @param optional nil or *VisualizeEquipmentOpts - Optional Parameters:
 * @param "View" (optional.String) -  How to visualize the equipment, either \\\"grid\\\" or \\\"list\\\".
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
 * @param "ShowBacklink" (optional.Bool) -  Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
@return string
*/

type VisualizeEquipmentOpts struct {
	View optional.String
	DefaultCss optional.Bool
	ShowBacklink optional.Bool
}

func (a *DefaultApiService) VisualizeEquipment(ctx context.Context, instructions string, localVarOptionals *VisualizeEquipmentOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeEquipment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("instructions", parameterToString(instructions, ""))
	if localVarOptionals != nil && localVarOptionals.View.IsSet() {
		localVarFormParams.Add("view", parameterToString(localVarOptionals.View.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarFormParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowBacklink.IsSet() {
		localVarFormParams.Add("showBacklink", parameterToString(localVarOptionals.ShowBacklink.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Ingredients
Visualize ingredients of a recipe. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientList The ingredient list of the recipe, one ingredient per line.
 * @param servings The number of servings.
 * @param optional nil or *VisualizeIngredientsOpts - Optional Parameters:
 * @param "Measure" (optional.String) -  The original system of measurement, either \\\"metric\\\" or \\\"us\\\".
 * @param "View" (optional.String) -  How to visualize the ingredients, either \\\"grid\\\" or \\\"list\\\".
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
 * @param "ShowBacklink" (optional.Bool) -  Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
@return string
*/

type VisualizeIngredientsOpts struct {
	Measure optional.String
	View optional.String
	DefaultCss optional.Bool
	ShowBacklink optional.Bool
}

func (a *DefaultApiService) VisualizeIngredients(ctx context.Context, ingredientList string, servings float32, localVarOptionals *VisualizeIngredientsOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeIngredients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("ingredientList", parameterToString(ingredientList, ""))
	localVarFormParams.Add("servings", parameterToString(servings, ""))
	if localVarOptionals != nil && localVarOptionals.Measure.IsSet() {
		localVarFormParams.Add("measure", parameterToString(localVarOptionals.Measure.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.View.IsSet() {
		localVarFormParams.Add("view", parameterToString(localVarOptionals.View.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarFormParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowBacklink.IsSet() {
		localVarFormParams.Add("showBacklink", parameterToString(localVarOptionals.ShowBacklink.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Menu Item Nutrition by ID
Visualize a menu item&#39;s nutritional information as HTML including CSS.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The menu item id.
 * @param optional nil or *VisualizeMenuItemNutritionByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeMenuItemNutritionByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *DefaultApiService) VisualizeMenuItemNutritionByID(ctx context.Context, id float32, localVarOptionals *VisualizeMenuItemNutritionByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/menuItems/{id}/nutritionWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Price Breakdown
Visualize the price breakdown of a recipe. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientList The ingredient list of the recipe, one ingredient per line.
 * @param servings The number of servings.
 * @param optional nil or *VisualizePriceBreakdownOpts - Optional Parameters:
 * @param "Mode" (optional.Float32) -  The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
 * @param "ShowBacklink" (optional.Bool) -  Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
@return string
*/

type VisualizePriceBreakdownOpts struct {
	Mode optional.Float32
	DefaultCss optional.Bool
	ShowBacklink optional.Bool
}

func (a *DefaultApiService) VisualizePriceBreakdown(ctx context.Context, ingredientList string, servings float32, localVarOptionals *VisualizePriceBreakdownOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizePriceEstimator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("ingredientList", parameterToString(ingredientList, ""))
	localVarFormParams.Add("servings", parameterToString(servings, ""))
	if localVarOptionals != nil && localVarOptionals.Mode.IsSet() {
		localVarFormParams.Add("mode", parameterToString(localVarOptionals.Mode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarFormParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowBacklink.IsSet() {
		localVarFormParams.Add("showBacklink", parameterToString(localVarOptionals.ShowBacklink.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Product Nutrition by ID
Visualize a product&#39;s nutritional information as HTML including CSS.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The id of the product.
 * @param optional nil or *VisualizeProductNutritionByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeProductNutritionByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *DefaultApiService) VisualizeProductNutritionByID(ctx context.Context, id float32, localVarOptionals *VisualizeProductNutritionByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/products/{id}/nutritionWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Recipe Equipment by ID
Visualize a recipe&#39;s equipment list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *VisualizeRecipeEquipmentByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeRecipeEquipmentByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *DefaultApiService) VisualizeRecipeEquipmentByID(ctx context.Context, id float32, localVarOptionals *VisualizeRecipeEquipmentByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/equipmentWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Recipe Ingredients by ID
Visualize a recipe&#39;s ingredient list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *VisualizeRecipeIngredientsByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeRecipeIngredientsByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *DefaultApiService) VisualizeRecipeIngredientsByID(ctx context.Context, id float32, localVarOptionals *VisualizeRecipeIngredientsByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/ingredientWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Recipe Nutrition
Visualize a recipe&#39;s nutritional information as HTML including CSS. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientList The ingredient list of the recipe, one ingredient per line.
 * @param servings The number of servings.
 * @param optional nil or *VisualizeRecipeNutritionOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
 * @param "ShowBacklink" (optional.Bool) -  Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
@return string
*/

type VisualizeRecipeNutritionOpts struct {
	DefaultCss optional.Bool
	ShowBacklink optional.Bool
}

func (a *DefaultApiService) VisualizeRecipeNutrition(ctx context.Context, ingredientList string, servings float32, localVarOptionals *VisualizeRecipeNutritionOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeNutrition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("ingredientList", parameterToString(ingredientList, ""))
	localVarFormParams.Add("servings", parameterToString(servings, ""))
	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarFormParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowBacklink.IsSet() {
		localVarFormParams.Add("showBacklink", parameterToString(localVarOptionals.ShowBacklink.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Recipe Nutrition by ID
Visualize a recipe&#39;s nutritional information as HTML including CSS.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *VisualizeRecipeNutritionByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeRecipeNutritionByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *DefaultApiService) VisualizeRecipeNutritionByID(ctx context.Context, id float32, localVarOptionals *VisualizeRecipeNutritionByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/nutritionWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Recipe Price Breakdown by ID
Visualize a recipe&#39;s price breakdown.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *VisualizeRecipePriceBreakdownByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeRecipePriceBreakdownByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *DefaultApiService) VisualizeRecipePriceBreakdownByID(ctx context.Context, id float32, localVarOptionals *VisualizeRecipePriceBreakdownByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/priceBreakdownWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Recipe Taste
Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientList The ingredient list of the recipe, one ingredient per line.
@return string
*/
func (a *DefaultApiService) VisualizeRecipeTaste(ctx context.Context, ingredientList string) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeTaste"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("ingredientList", parameterToString(ingredientList, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DefaultApiService Visualize Recipe Taste by ID
Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return string
*/
func (a *DefaultApiService) VisualizeRecipeTasteByID(ctx context.Context, id float32) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/tasteWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
