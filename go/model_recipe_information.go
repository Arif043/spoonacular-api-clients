/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecipeInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeInformation{}

// RecipeInformation 
type RecipeInformation struct {
	Id int32 `json:"id"`
	Title string `json:"title"`
	Image NullableString `json:"image"`
	ImageType *string `json:"imageType,omitempty"`
	Servings float32 `json:"servings"`
	ReadyInMinutes int32 `json:"readyInMinutes"`
	PreparationMinutes NullableInt32 `json:"preparationMinutes,omitempty"`
	CookingMinutes NullableInt32 `json:"cookingMinutes,omitempty"`
	License *string `json:"license,omitempty"`
	SourceName string `json:"sourceName"`
	SourceUrl string `json:"sourceUrl"`
	SpoonacularSourceUrl string `json:"spoonacularSourceUrl"`
	AggregateLikes int32 `json:"aggregateLikes"`
	HealthScore float32 `json:"healthScore"`
	SpoonacularScore float32 `json:"spoonacularScore"`
	PricePerServing float32 `json:"pricePerServing"`
	AnalyzedInstructions []map[string]interface{} `json:"analyzedInstructions"`
	Cheap bool `json:"cheap"`
	CreditsText string `json:"creditsText"`
	Cuisines []string `json:"cuisines"`
	DairyFree bool `json:"dairyFree"`
	Diets []string `json:"diets"`
	Gaps string `json:"gaps"`
	GlutenFree bool `json:"glutenFree"`
	Instructions NullableString `json:"instructions"`
	LowFodmap bool `json:"lowFodmap"`
	Occasions []string `json:"occasions"`
	Sustainable bool `json:"sustainable"`
	Vegan bool `json:"vegan"`
	Vegetarian bool `json:"vegetarian"`
	VeryHealthy bool `json:"veryHealthy"`
	VeryPopular bool `json:"veryPopular"`
	WeightWatcherSmartPoints float32 `json:"weightWatcherSmartPoints"`
	DishTypes []string `json:"dishTypes"`
	ExtendedIngredients []RecipeInformationExtendedIngredientsInner `json:"extendedIngredients"`
	Summary string `json:"summary"`
	WinePairing *RecipeInformationWinePairing `json:"winePairing,omitempty"`
	Taste *TasteInformation `json:"taste,omitempty"`
}

type _RecipeInformation RecipeInformation

// NewRecipeInformation instantiates a new RecipeInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeInformation(id int32, title string, image NullableString, servings float32, readyInMinutes int32, sourceName string, sourceUrl string, spoonacularSourceUrl string, aggregateLikes int32, healthScore float32, spoonacularScore float32, pricePerServing float32, analyzedInstructions []map[string]interface{}, cheap bool, creditsText string, cuisines []string, dairyFree bool, diets []string, gaps string, glutenFree bool, instructions NullableString, lowFodmap bool, occasions []string, sustainable bool, vegan bool, vegetarian bool, veryHealthy bool, veryPopular bool, weightWatcherSmartPoints float32, dishTypes []string, extendedIngredients []RecipeInformationExtendedIngredientsInner, summary string) *RecipeInformation {
	this := RecipeInformation{}
	this.Id = id
	this.Title = title
	this.Image = image
	this.Servings = servings
	this.ReadyInMinutes = readyInMinutes
	this.SourceName = sourceName
	this.SourceUrl = sourceUrl
	this.SpoonacularSourceUrl = spoonacularSourceUrl
	this.AggregateLikes = aggregateLikes
	this.HealthScore = healthScore
	this.SpoonacularScore = spoonacularScore
	this.PricePerServing = pricePerServing
	this.AnalyzedInstructions = analyzedInstructions
	this.Cheap = cheap
	this.CreditsText = creditsText
	this.Cuisines = cuisines
	this.DairyFree = dairyFree
	this.Diets = diets
	this.Gaps = gaps
	this.GlutenFree = glutenFree
	this.Instructions = instructions
	this.LowFodmap = lowFodmap
	this.Occasions = occasions
	this.Sustainable = sustainable
	this.Vegan = vegan
	this.Vegetarian = vegetarian
	this.VeryHealthy = veryHealthy
	this.VeryPopular = veryPopular
	this.WeightWatcherSmartPoints = weightWatcherSmartPoints
	this.DishTypes = dishTypes
	this.ExtendedIngredients = extendedIngredients
	this.Summary = summary
	return &this
}

// NewRecipeInformationWithDefaults instantiates a new RecipeInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeInformationWithDefaults() *RecipeInformation {
	this := RecipeInformation{}
	return &this
}

// GetId returns the Id field value
func (o *RecipeInformation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RecipeInformation) SetId(v int32) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *RecipeInformation) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *RecipeInformation) SetTitle(v string) {
	o.Title = v
}

// GetImage returns the Image field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecipeInformation) GetImage() string {
	if o == nil || o.Image.Get() == nil {
		var ret string
		return ret
	}

	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecipeInformation) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// SetImage sets field value
func (o *RecipeInformation) SetImage(v string) {
	o.Image.Set(&v)
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *RecipeInformation) GetImageType() string {
	if o == nil || IsNil(o.ImageType) {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetImageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ImageType) {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *RecipeInformation) HasImageType() bool {
	if o != nil && !IsNil(o.ImageType) {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *RecipeInformation) SetImageType(v string) {
	o.ImageType = &v
}

// GetServings returns the Servings field value
func (o *RecipeInformation) GetServings() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Servings
}

// GetServingsOk returns a tuple with the Servings field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetServingsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Servings, true
}

// SetServings sets field value
func (o *RecipeInformation) SetServings(v float32) {
	o.Servings = v
}

// GetReadyInMinutes returns the ReadyInMinutes field value
func (o *RecipeInformation) GetReadyInMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReadyInMinutes
}

// GetReadyInMinutesOk returns a tuple with the ReadyInMinutes field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetReadyInMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadyInMinutes, true
}

// SetReadyInMinutes sets field value
func (o *RecipeInformation) SetReadyInMinutes(v int32) {
	o.ReadyInMinutes = v
}

// GetPreparationMinutes returns the PreparationMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecipeInformation) GetPreparationMinutes() int32 {
	if o == nil || IsNil(o.PreparationMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.PreparationMinutes.Get()
}

// GetPreparationMinutesOk returns a tuple with the PreparationMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecipeInformation) GetPreparationMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreparationMinutes.Get(), o.PreparationMinutes.IsSet()
}

// HasPreparationMinutes returns a boolean if a field has been set.
func (o *RecipeInformation) HasPreparationMinutes() bool {
	if o != nil && o.PreparationMinutes.IsSet() {
		return true
	}

	return false
}

// SetPreparationMinutes gets a reference to the given NullableInt32 and assigns it to the PreparationMinutes field.
func (o *RecipeInformation) SetPreparationMinutes(v int32) {
	o.PreparationMinutes.Set(&v)
}
// SetPreparationMinutesNil sets the value for PreparationMinutes to be an explicit nil
func (o *RecipeInformation) SetPreparationMinutesNil() {
	o.PreparationMinutes.Set(nil)
}

// UnsetPreparationMinutes ensures that no value is present for PreparationMinutes, not even an explicit nil
func (o *RecipeInformation) UnsetPreparationMinutes() {
	o.PreparationMinutes.Unset()
}

// GetCookingMinutes returns the CookingMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecipeInformation) GetCookingMinutes() int32 {
	if o == nil || IsNil(o.CookingMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.CookingMinutes.Get()
}

// GetCookingMinutesOk returns a tuple with the CookingMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecipeInformation) GetCookingMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CookingMinutes.Get(), o.CookingMinutes.IsSet()
}

// HasCookingMinutes returns a boolean if a field has been set.
func (o *RecipeInformation) HasCookingMinutes() bool {
	if o != nil && o.CookingMinutes.IsSet() {
		return true
	}

	return false
}

// SetCookingMinutes gets a reference to the given NullableInt32 and assigns it to the CookingMinutes field.
func (o *RecipeInformation) SetCookingMinutes(v int32) {
	o.CookingMinutes.Set(&v)
}
// SetCookingMinutesNil sets the value for CookingMinutes to be an explicit nil
func (o *RecipeInformation) SetCookingMinutesNil() {
	o.CookingMinutes.Set(nil)
}

// UnsetCookingMinutes ensures that no value is present for CookingMinutes, not even an explicit nil
func (o *RecipeInformation) UnsetCookingMinutes() {
	o.CookingMinutes.Unset()
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *RecipeInformation) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *RecipeInformation) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *RecipeInformation) SetLicense(v string) {
	o.License = &v
}

// GetSourceName returns the SourceName field value
func (o *RecipeInformation) GetSourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceName, true
}

// SetSourceName sets field value
func (o *RecipeInformation) SetSourceName(v string) {
	o.SourceName = v
}

// GetSourceUrl returns the SourceUrl field value
func (o *RecipeInformation) GetSourceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetSourceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceUrl, true
}

// SetSourceUrl sets field value
func (o *RecipeInformation) SetSourceUrl(v string) {
	o.SourceUrl = v
}

// GetSpoonacularSourceUrl returns the SpoonacularSourceUrl field value
func (o *RecipeInformation) GetSpoonacularSourceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpoonacularSourceUrl
}

// GetSpoonacularSourceUrlOk returns a tuple with the SpoonacularSourceUrl field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetSpoonacularSourceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpoonacularSourceUrl, true
}

// SetSpoonacularSourceUrl sets field value
func (o *RecipeInformation) SetSpoonacularSourceUrl(v string) {
	o.SpoonacularSourceUrl = v
}

// GetAggregateLikes returns the AggregateLikes field value
func (o *RecipeInformation) GetAggregateLikes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AggregateLikes
}

// GetAggregateLikesOk returns a tuple with the AggregateLikes field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetAggregateLikesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregateLikes, true
}

// SetAggregateLikes sets field value
func (o *RecipeInformation) SetAggregateLikes(v int32) {
	o.AggregateLikes = v
}

// GetHealthScore returns the HealthScore field value
func (o *RecipeInformation) GetHealthScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.HealthScore
}

// GetHealthScoreOk returns a tuple with the HealthScore field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetHealthScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HealthScore, true
}

// SetHealthScore sets field value
func (o *RecipeInformation) SetHealthScore(v float32) {
	o.HealthScore = v
}

// GetSpoonacularScore returns the SpoonacularScore field value
func (o *RecipeInformation) GetSpoonacularScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SpoonacularScore
}

// GetSpoonacularScoreOk returns a tuple with the SpoonacularScore field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetSpoonacularScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpoonacularScore, true
}

// SetSpoonacularScore sets field value
func (o *RecipeInformation) SetSpoonacularScore(v float32) {
	o.SpoonacularScore = v
}

// GetPricePerServing returns the PricePerServing field value
func (o *RecipeInformation) GetPricePerServing() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PricePerServing
}

// GetPricePerServingOk returns a tuple with the PricePerServing field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetPricePerServingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PricePerServing, true
}

// SetPricePerServing sets field value
func (o *RecipeInformation) SetPricePerServing(v float32) {
	o.PricePerServing = v
}

// GetAnalyzedInstructions returns the AnalyzedInstructions field value
func (o *RecipeInformation) GetAnalyzedInstructions() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.AnalyzedInstructions
}

// GetAnalyzedInstructionsOk returns a tuple with the AnalyzedInstructions field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetAnalyzedInstructionsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnalyzedInstructions, true
}

// SetAnalyzedInstructions sets field value
func (o *RecipeInformation) SetAnalyzedInstructions(v []map[string]interface{}) {
	o.AnalyzedInstructions = v
}

// GetCheap returns the Cheap field value
func (o *RecipeInformation) GetCheap() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cheap
}

// GetCheapOk returns a tuple with the Cheap field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetCheapOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cheap, true
}

// SetCheap sets field value
func (o *RecipeInformation) SetCheap(v bool) {
	o.Cheap = v
}

// GetCreditsText returns the CreditsText field value
func (o *RecipeInformation) GetCreditsText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreditsText
}

// GetCreditsTextOk returns a tuple with the CreditsText field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetCreditsTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsText, true
}

// SetCreditsText sets field value
func (o *RecipeInformation) SetCreditsText(v string) {
	o.CreditsText = v
}

// GetCuisines returns the Cuisines field value
func (o *RecipeInformation) GetCuisines() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Cuisines
}

// GetCuisinesOk returns a tuple with the Cuisines field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetCuisinesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cuisines, true
}

// SetCuisines sets field value
func (o *RecipeInformation) SetCuisines(v []string) {
	o.Cuisines = v
}

// GetDairyFree returns the DairyFree field value
func (o *RecipeInformation) GetDairyFree() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DairyFree
}

// GetDairyFreeOk returns a tuple with the DairyFree field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetDairyFreeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DairyFree, true
}

// SetDairyFree sets field value
func (o *RecipeInformation) SetDairyFree(v bool) {
	o.DairyFree = v
}

// GetDiets returns the Diets field value
func (o *RecipeInformation) GetDiets() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Diets
}

// GetDietsOk returns a tuple with the Diets field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetDietsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Diets, true
}

// SetDiets sets field value
func (o *RecipeInformation) SetDiets(v []string) {
	o.Diets = v
}

// GetGaps returns the Gaps field value
func (o *RecipeInformation) GetGaps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gaps
}

// GetGapsOk returns a tuple with the Gaps field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetGapsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gaps, true
}

// SetGaps sets field value
func (o *RecipeInformation) SetGaps(v string) {
	o.Gaps = v
}

// GetGlutenFree returns the GlutenFree field value
func (o *RecipeInformation) GetGlutenFree() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GlutenFree
}

// GetGlutenFreeOk returns a tuple with the GlutenFree field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetGlutenFreeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GlutenFree, true
}

// SetGlutenFree sets field value
func (o *RecipeInformation) SetGlutenFree(v bool) {
	o.GlutenFree = v
}

// GetInstructions returns the Instructions field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecipeInformation) GetInstructions() string {
	if o == nil || o.Instructions.Get() == nil {
		var ret string
		return ret
	}

	return *o.Instructions.Get()
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecipeInformation) GetInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions.Get(), o.Instructions.IsSet()
}

// SetInstructions sets field value
func (o *RecipeInformation) SetInstructions(v string) {
	o.Instructions.Set(&v)
}

// GetLowFodmap returns the LowFodmap field value
func (o *RecipeInformation) GetLowFodmap() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LowFodmap
}

// GetLowFodmapOk returns a tuple with the LowFodmap field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetLowFodmapOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowFodmap, true
}

// SetLowFodmap sets field value
func (o *RecipeInformation) SetLowFodmap(v bool) {
	o.LowFodmap = v
}

// GetOccasions returns the Occasions field value
func (o *RecipeInformation) GetOccasions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Occasions
}

// GetOccasionsOk returns a tuple with the Occasions field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetOccasionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Occasions, true
}

// SetOccasions sets field value
func (o *RecipeInformation) SetOccasions(v []string) {
	o.Occasions = v
}

// GetSustainable returns the Sustainable field value
func (o *RecipeInformation) GetSustainable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sustainable
}

// GetSustainableOk returns a tuple with the Sustainable field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetSustainableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sustainable, true
}

// SetSustainable sets field value
func (o *RecipeInformation) SetSustainable(v bool) {
	o.Sustainable = v
}

// GetVegan returns the Vegan field value
func (o *RecipeInformation) GetVegan() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Vegan
}

// GetVeganOk returns a tuple with the Vegan field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetVeganOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vegan, true
}

// SetVegan sets field value
func (o *RecipeInformation) SetVegan(v bool) {
	o.Vegan = v
}

// GetVegetarian returns the Vegetarian field value
func (o *RecipeInformation) GetVegetarian() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Vegetarian
}

// GetVegetarianOk returns a tuple with the Vegetarian field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetVegetarianOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vegetarian, true
}

// SetVegetarian sets field value
func (o *RecipeInformation) SetVegetarian(v bool) {
	o.Vegetarian = v
}

// GetVeryHealthy returns the VeryHealthy field value
func (o *RecipeInformation) GetVeryHealthy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VeryHealthy
}

// GetVeryHealthyOk returns a tuple with the VeryHealthy field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetVeryHealthyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VeryHealthy, true
}

// SetVeryHealthy sets field value
func (o *RecipeInformation) SetVeryHealthy(v bool) {
	o.VeryHealthy = v
}

// GetVeryPopular returns the VeryPopular field value
func (o *RecipeInformation) GetVeryPopular() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VeryPopular
}

// GetVeryPopularOk returns a tuple with the VeryPopular field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetVeryPopularOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VeryPopular, true
}

// SetVeryPopular sets field value
func (o *RecipeInformation) SetVeryPopular(v bool) {
	o.VeryPopular = v
}

// GetWeightWatcherSmartPoints returns the WeightWatcherSmartPoints field value
func (o *RecipeInformation) GetWeightWatcherSmartPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WeightWatcherSmartPoints
}

// GetWeightWatcherSmartPointsOk returns a tuple with the WeightWatcherSmartPoints field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetWeightWatcherSmartPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeightWatcherSmartPoints, true
}

// SetWeightWatcherSmartPoints sets field value
func (o *RecipeInformation) SetWeightWatcherSmartPoints(v float32) {
	o.WeightWatcherSmartPoints = v
}

// GetDishTypes returns the DishTypes field value
func (o *RecipeInformation) GetDishTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DishTypes
}

// GetDishTypesOk returns a tuple with the DishTypes field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetDishTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DishTypes, true
}

// SetDishTypes sets field value
func (o *RecipeInformation) SetDishTypes(v []string) {
	o.DishTypes = v
}

// GetExtendedIngredients returns the ExtendedIngredients field value
func (o *RecipeInformation) GetExtendedIngredients() []RecipeInformationExtendedIngredientsInner {
	if o == nil {
		var ret []RecipeInformationExtendedIngredientsInner
		return ret
	}

	return o.ExtendedIngredients
}

// GetExtendedIngredientsOk returns a tuple with the ExtendedIngredients field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetExtendedIngredientsOk() ([]RecipeInformationExtendedIngredientsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtendedIngredients, true
}

// SetExtendedIngredients sets field value
func (o *RecipeInformation) SetExtendedIngredients(v []RecipeInformationExtendedIngredientsInner) {
	o.ExtendedIngredients = v
}

// GetSummary returns the Summary field value
func (o *RecipeInformation) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *RecipeInformation) SetSummary(v string) {
	o.Summary = v
}

// GetWinePairing returns the WinePairing field value if set, zero value otherwise.
func (o *RecipeInformation) GetWinePairing() RecipeInformationWinePairing {
	if o == nil || IsNil(o.WinePairing) {
		var ret RecipeInformationWinePairing
		return ret
	}
	return *o.WinePairing
}

// GetWinePairingOk returns a tuple with the WinePairing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetWinePairingOk() (*RecipeInformationWinePairing, bool) {
	if o == nil || IsNil(o.WinePairing) {
		return nil, false
	}
	return o.WinePairing, true
}

// HasWinePairing returns a boolean if a field has been set.
func (o *RecipeInformation) HasWinePairing() bool {
	if o != nil && !IsNil(o.WinePairing) {
		return true
	}

	return false
}

// SetWinePairing gets a reference to the given RecipeInformationWinePairing and assigns it to the WinePairing field.
func (o *RecipeInformation) SetWinePairing(v RecipeInformationWinePairing) {
	o.WinePairing = &v
}

// GetTaste returns the Taste field value if set, zero value otherwise.
func (o *RecipeInformation) GetTaste() TasteInformation {
	if o == nil || IsNil(o.Taste) {
		var ret TasteInformation
		return ret
	}
	return *o.Taste
}

// GetTasteOk returns a tuple with the Taste field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipeInformation) GetTasteOk() (*TasteInformation, bool) {
	if o == nil || IsNil(o.Taste) {
		return nil, false
	}
	return o.Taste, true
}

// HasTaste returns a boolean if a field has been set.
func (o *RecipeInformation) HasTaste() bool {
	if o != nil && !IsNil(o.Taste) {
		return true
	}

	return false
}

// SetTaste gets a reference to the given TasteInformation and assigns it to the Taste field.
func (o *RecipeInformation) SetTaste(v TasteInformation) {
	o.Taste = &v
}

func (o RecipeInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["image"] = o.Image.Get()
	if !IsNil(o.ImageType) {
		toSerialize["imageType"] = o.ImageType
	}
	toSerialize["servings"] = o.Servings
	toSerialize["readyInMinutes"] = o.ReadyInMinutes
	if o.PreparationMinutes.IsSet() {
		toSerialize["preparationMinutes"] = o.PreparationMinutes.Get()
	}
	if o.CookingMinutes.IsSet() {
		toSerialize["cookingMinutes"] = o.CookingMinutes.Get()
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	toSerialize["sourceName"] = o.SourceName
	toSerialize["sourceUrl"] = o.SourceUrl
	toSerialize["spoonacularSourceUrl"] = o.SpoonacularSourceUrl
	toSerialize["aggregateLikes"] = o.AggregateLikes
	toSerialize["healthScore"] = o.HealthScore
	toSerialize["spoonacularScore"] = o.SpoonacularScore
	toSerialize["pricePerServing"] = o.PricePerServing
	toSerialize["analyzedInstructions"] = o.AnalyzedInstructions
	toSerialize["cheap"] = o.Cheap
	toSerialize["creditsText"] = o.CreditsText
	toSerialize["cuisines"] = o.Cuisines
	toSerialize["dairyFree"] = o.DairyFree
	toSerialize["diets"] = o.Diets
	toSerialize["gaps"] = o.Gaps
	toSerialize["glutenFree"] = o.GlutenFree
	toSerialize["instructions"] = o.Instructions.Get()
	toSerialize["lowFodmap"] = o.LowFodmap
	toSerialize["occasions"] = o.Occasions
	toSerialize["sustainable"] = o.Sustainable
	toSerialize["vegan"] = o.Vegan
	toSerialize["vegetarian"] = o.Vegetarian
	toSerialize["veryHealthy"] = o.VeryHealthy
	toSerialize["veryPopular"] = o.VeryPopular
	toSerialize["weightWatcherSmartPoints"] = o.WeightWatcherSmartPoints
	toSerialize["dishTypes"] = o.DishTypes
	toSerialize["extendedIngredients"] = o.ExtendedIngredients
	toSerialize["summary"] = o.Summary
	if !IsNil(o.WinePairing) {
		toSerialize["winePairing"] = o.WinePairing
	}
	if !IsNil(o.Taste) {
		toSerialize["taste"] = o.Taste
	}
	return toSerialize, nil
}

func (o *RecipeInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"image",
		"servings",
		"readyInMinutes",
		"sourceName",
		"sourceUrl",
		"spoonacularSourceUrl",
		"aggregateLikes",
		"healthScore",
		"spoonacularScore",
		"pricePerServing",
		"analyzedInstructions",
		"cheap",
		"creditsText",
		"cuisines",
		"dairyFree",
		"diets",
		"gaps",
		"glutenFree",
		"instructions",
		"lowFodmap",
		"occasions",
		"sustainable",
		"vegan",
		"vegetarian",
		"veryHealthy",
		"veryPopular",
		"weightWatcherSmartPoints",
		"dishTypes",
		"extendedIngredients",
		"summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecipeInformation := _RecipeInformation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecipeInformation)

	if err != nil {
		return err
	}

	*o = RecipeInformation(varRecipeInformation)

	return err
}

type NullableRecipeInformation struct {
	value *RecipeInformation
	isSet bool
}

func (v NullableRecipeInformation) Get() *RecipeInformation {
	return v.value
}

func (v *NullableRecipeInformation) Set(val *RecipeInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeInformation(val *RecipeInformation) *NullableRecipeInformation {
	return &NullableRecipeInformation{value: val, isSet: true}
}

func (v NullableRecipeInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


