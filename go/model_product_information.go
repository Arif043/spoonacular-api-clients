/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductInformation{}

// ProductInformation 
type ProductInformation struct {
	Id int32 `json:"id"`
	Title string `json:"title"`
	Upc NullableString `json:"upc,omitempty"`
	UsdaCode NullableString `json:"usdaCode,omitempty"`
	Breadcrumbs []string `json:"breadcrumbs"`
	ImageType string `json:"imageType"`
	Badges []string `json:"badges"`
	ImportantBadges []string `json:"importantBadges"`
	IngredientCount int32 `json:"ingredientCount"`
	GeneratedText NullableString `json:"generatedText,omitempty"`
	IngredientList string `json:"ingredientList"`
	Ingredients []IngredientBasics `json:"ingredients"`
	Likes float32 `json:"likes"`
	Aisle NullableString `json:"aisle"`
	Credits *ProductInformationCredits `json:"credits,omitempty"`
	Nutrition SearchGroceryProductsByUPC200ResponseNutrition `json:"nutrition"`
	Price float32 `json:"price"`
	Servings SearchGroceryProductsByUPC200ResponseServings `json:"servings"`
	SpoonacularScore float32 `json:"spoonacularScore"`
}

type _ProductInformation ProductInformation

// NewProductInformation instantiates a new ProductInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductInformation(id int32, title string, breadcrumbs []string, imageType string, badges []string, importantBadges []string, ingredientCount int32, ingredientList string, ingredients []IngredientBasics, likes float32, aisle NullableString, nutrition SearchGroceryProductsByUPC200ResponseNutrition, price float32, servings SearchGroceryProductsByUPC200ResponseServings, spoonacularScore float32) *ProductInformation {
	this := ProductInformation{}
	this.Id = id
	this.Title = title
	this.Breadcrumbs = breadcrumbs
	this.ImageType = imageType
	this.Badges = badges
	this.ImportantBadges = importantBadges
	this.IngredientCount = ingredientCount
	this.IngredientList = ingredientList
	this.Ingredients = ingredients
	this.Likes = likes
	this.Aisle = aisle
	this.Nutrition = nutrition
	this.Price = price
	this.Servings = servings
	this.SpoonacularScore = spoonacularScore
	return &this
}

// NewProductInformationWithDefaults instantiates a new ProductInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductInformationWithDefaults() *ProductInformation {
	this := ProductInformation{}
	return &this
}

// GetId returns the Id field value
func (o *ProductInformation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProductInformation) SetId(v int32) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *ProductInformation) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ProductInformation) SetTitle(v string) {
	o.Title = v
}

// GetUpc returns the Upc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductInformation) GetUpc() string {
	if o == nil || IsNil(o.Upc.Get()) {
		var ret string
		return ret
	}
	return *o.Upc.Get()
}

// GetUpcOk returns a tuple with the Upc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductInformation) GetUpcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Upc.Get(), o.Upc.IsSet()
}

// HasUpc returns a boolean if a field has been set.
func (o *ProductInformation) HasUpc() bool {
	if o != nil && o.Upc.IsSet() {
		return true
	}

	return false
}

// SetUpc gets a reference to the given NullableString and assigns it to the Upc field.
func (o *ProductInformation) SetUpc(v string) {
	o.Upc.Set(&v)
}
// SetUpcNil sets the value for Upc to be an explicit nil
func (o *ProductInformation) SetUpcNil() {
	o.Upc.Set(nil)
}

// UnsetUpc ensures that no value is present for Upc, not even an explicit nil
func (o *ProductInformation) UnsetUpc() {
	o.Upc.Unset()
}

// GetUsdaCode returns the UsdaCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductInformation) GetUsdaCode() string {
	if o == nil || IsNil(o.UsdaCode.Get()) {
		var ret string
		return ret
	}
	return *o.UsdaCode.Get()
}

// GetUsdaCodeOk returns a tuple with the UsdaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductInformation) GetUsdaCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsdaCode.Get(), o.UsdaCode.IsSet()
}

// HasUsdaCode returns a boolean if a field has been set.
func (o *ProductInformation) HasUsdaCode() bool {
	if o != nil && o.UsdaCode.IsSet() {
		return true
	}

	return false
}

// SetUsdaCode gets a reference to the given NullableString and assigns it to the UsdaCode field.
func (o *ProductInformation) SetUsdaCode(v string) {
	o.UsdaCode.Set(&v)
}
// SetUsdaCodeNil sets the value for UsdaCode to be an explicit nil
func (o *ProductInformation) SetUsdaCodeNil() {
	o.UsdaCode.Set(nil)
}

// UnsetUsdaCode ensures that no value is present for UsdaCode, not even an explicit nil
func (o *ProductInformation) UnsetUsdaCode() {
	o.UsdaCode.Unset()
}

// GetBreadcrumbs returns the Breadcrumbs field value
func (o *ProductInformation) GetBreadcrumbs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Breadcrumbs
}

// GetBreadcrumbsOk returns a tuple with the Breadcrumbs field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetBreadcrumbsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Breadcrumbs, true
}

// SetBreadcrumbs sets field value
func (o *ProductInformation) SetBreadcrumbs(v []string) {
	o.Breadcrumbs = v
}

// GetImageType returns the ImageType field value
func (o *ProductInformation) GetImageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetImageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageType, true
}

// SetImageType sets field value
func (o *ProductInformation) SetImageType(v string) {
	o.ImageType = v
}

// GetBadges returns the Badges field value
func (o *ProductInformation) GetBadges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Badges
}

// GetBadgesOk returns a tuple with the Badges field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetBadgesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Badges, true
}

// SetBadges sets field value
func (o *ProductInformation) SetBadges(v []string) {
	o.Badges = v
}

// GetImportantBadges returns the ImportantBadges field value
func (o *ProductInformation) GetImportantBadges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ImportantBadges
}

// GetImportantBadgesOk returns a tuple with the ImportantBadges field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetImportantBadgesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImportantBadges, true
}

// SetImportantBadges sets field value
func (o *ProductInformation) SetImportantBadges(v []string) {
	o.ImportantBadges = v
}

// GetIngredientCount returns the IngredientCount field value
func (o *ProductInformation) GetIngredientCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IngredientCount
}

// GetIngredientCountOk returns a tuple with the IngredientCount field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetIngredientCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IngredientCount, true
}

// SetIngredientCount sets field value
func (o *ProductInformation) SetIngredientCount(v int32) {
	o.IngredientCount = v
}

// GetGeneratedText returns the GeneratedText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductInformation) GetGeneratedText() string {
	if o == nil || IsNil(o.GeneratedText.Get()) {
		var ret string
		return ret
	}
	return *o.GeneratedText.Get()
}

// GetGeneratedTextOk returns a tuple with the GeneratedText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductInformation) GetGeneratedTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GeneratedText.Get(), o.GeneratedText.IsSet()
}

// HasGeneratedText returns a boolean if a field has been set.
func (o *ProductInformation) HasGeneratedText() bool {
	if o != nil && o.GeneratedText.IsSet() {
		return true
	}

	return false
}

// SetGeneratedText gets a reference to the given NullableString and assigns it to the GeneratedText field.
func (o *ProductInformation) SetGeneratedText(v string) {
	o.GeneratedText.Set(&v)
}
// SetGeneratedTextNil sets the value for GeneratedText to be an explicit nil
func (o *ProductInformation) SetGeneratedTextNil() {
	o.GeneratedText.Set(nil)
}

// UnsetGeneratedText ensures that no value is present for GeneratedText, not even an explicit nil
func (o *ProductInformation) UnsetGeneratedText() {
	o.GeneratedText.Unset()
}

// GetIngredientList returns the IngredientList field value
func (o *ProductInformation) GetIngredientList() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IngredientList
}

// GetIngredientListOk returns a tuple with the IngredientList field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetIngredientListOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IngredientList, true
}

// SetIngredientList sets field value
func (o *ProductInformation) SetIngredientList(v string) {
	o.IngredientList = v
}

// GetIngredients returns the Ingredients field value
func (o *ProductInformation) GetIngredients() []IngredientBasics {
	if o == nil {
		var ret []IngredientBasics
		return ret
	}

	return o.Ingredients
}

// GetIngredientsOk returns a tuple with the Ingredients field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetIngredientsOk() ([]IngredientBasics, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ingredients, true
}

// SetIngredients sets field value
func (o *ProductInformation) SetIngredients(v []IngredientBasics) {
	o.Ingredients = v
}

// GetLikes returns the Likes field value
func (o *ProductInformation) GetLikes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Likes
}

// GetLikesOk returns a tuple with the Likes field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetLikesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Likes, true
}

// SetLikes sets field value
func (o *ProductInformation) SetLikes(v float32) {
	o.Likes = v
}

// GetAisle returns the Aisle field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProductInformation) GetAisle() string {
	if o == nil || o.Aisle.Get() == nil {
		var ret string
		return ret
	}

	return *o.Aisle.Get()
}

// GetAisleOk returns a tuple with the Aisle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductInformation) GetAisleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Aisle.Get(), o.Aisle.IsSet()
}

// SetAisle sets field value
func (o *ProductInformation) SetAisle(v string) {
	o.Aisle.Set(&v)
}

// GetCredits returns the Credits field value if set, zero value otherwise.
func (o *ProductInformation) GetCredits() ProductInformationCredits {
	if o == nil || IsNil(o.Credits) {
		var ret ProductInformationCredits
		return ret
	}
	return *o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetCreditsOk() (*ProductInformationCredits, bool) {
	if o == nil || IsNil(o.Credits) {
		return nil, false
	}
	return o.Credits, true
}

// HasCredits returns a boolean if a field has been set.
func (o *ProductInformation) HasCredits() bool {
	if o != nil && !IsNil(o.Credits) {
		return true
	}

	return false
}

// SetCredits gets a reference to the given ProductInformationCredits and assigns it to the Credits field.
func (o *ProductInformation) SetCredits(v ProductInformationCredits) {
	o.Credits = &v
}

// GetNutrition returns the Nutrition field value
func (o *ProductInformation) GetNutrition() SearchGroceryProductsByUPC200ResponseNutrition {
	if o == nil {
		var ret SearchGroceryProductsByUPC200ResponseNutrition
		return ret
	}

	return o.Nutrition
}

// GetNutritionOk returns a tuple with the Nutrition field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetNutritionOk() (*SearchGroceryProductsByUPC200ResponseNutrition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nutrition, true
}

// SetNutrition sets field value
func (o *ProductInformation) SetNutrition(v SearchGroceryProductsByUPC200ResponseNutrition) {
	o.Nutrition = v
}

// GetPrice returns the Price field value
func (o *ProductInformation) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *ProductInformation) SetPrice(v float32) {
	o.Price = v
}

// GetServings returns the Servings field value
func (o *ProductInformation) GetServings() SearchGroceryProductsByUPC200ResponseServings {
	if o == nil {
		var ret SearchGroceryProductsByUPC200ResponseServings
		return ret
	}

	return o.Servings
}

// GetServingsOk returns a tuple with the Servings field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetServingsOk() (*SearchGroceryProductsByUPC200ResponseServings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Servings, true
}

// SetServings sets field value
func (o *ProductInformation) SetServings(v SearchGroceryProductsByUPC200ResponseServings) {
	o.Servings = v
}

// GetSpoonacularScore returns the SpoonacularScore field value
func (o *ProductInformation) GetSpoonacularScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SpoonacularScore
}

// GetSpoonacularScoreOk returns a tuple with the SpoonacularScore field value
// and a boolean to check if the value has been set.
func (o *ProductInformation) GetSpoonacularScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpoonacularScore, true
}

// SetSpoonacularScore sets field value
func (o *ProductInformation) SetSpoonacularScore(v float32) {
	o.SpoonacularScore = v
}

func (o ProductInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	if o.Upc.IsSet() {
		toSerialize["upc"] = o.Upc.Get()
	}
	if o.UsdaCode.IsSet() {
		toSerialize["usdaCode"] = o.UsdaCode.Get()
	}
	toSerialize["breadcrumbs"] = o.Breadcrumbs
	toSerialize["imageType"] = o.ImageType
	toSerialize["badges"] = o.Badges
	toSerialize["importantBadges"] = o.ImportantBadges
	toSerialize["ingredientCount"] = o.IngredientCount
	if o.GeneratedText.IsSet() {
		toSerialize["generatedText"] = o.GeneratedText.Get()
	}
	toSerialize["ingredientList"] = o.IngredientList
	toSerialize["ingredients"] = o.Ingredients
	toSerialize["likes"] = o.Likes
	toSerialize["aisle"] = o.Aisle.Get()
	if !IsNil(o.Credits) {
		toSerialize["credits"] = o.Credits
	}
	toSerialize["nutrition"] = o.Nutrition
	toSerialize["price"] = o.Price
	toSerialize["servings"] = o.Servings
	toSerialize["spoonacularScore"] = o.SpoonacularScore
	return toSerialize, nil
}

func (o *ProductInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"breadcrumbs",
		"imageType",
		"badges",
		"importantBadges",
		"ingredientCount",
		"ingredientList",
		"ingredients",
		"likes",
		"aisle",
		"nutrition",
		"price",
		"servings",
		"spoonacularScore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductInformation := _ProductInformation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductInformation)

	if err != nil {
		return err
	}

	*o = ProductInformation(varProductInformation)

	return err
}

type NullableProductInformation struct {
	value *ProductInformation
	isSet bool
}

func (v NullableProductInformation) Get() *ProductInformation {
	return v.value
}

func (v *NullableProductInformation) Set(val *ProductInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableProductInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableProductInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductInformation(val *ProductInformation) *NullableProductInformation {
	return &NullableProductInformation{value: val, isSet: true}
}

func (v NullableProductInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


