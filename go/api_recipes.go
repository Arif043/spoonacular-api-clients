/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * API version: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package spoonacular

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type RecipesApiService service

/*
RecipesApiService Analyze a Recipe Search Query
Parse a recipe search query to find out its intention.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param q The recipe search query.
@return InlineResponse20018
*/
func (a *RecipesApiService) AnalyzeARecipeSearchQuery(ctx context.Context, q string) (InlineResponse20018, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20018
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/queries/analyze"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("q", parameterToString(q, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20018
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Analyze Recipe Instructions
This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AnalyzeRecipeInstructionsOpts - Optional Parameters:
 * @param "ContentType" (optional.String) -  The content type.
@return InlineResponse20016
*/

type AnalyzeRecipeInstructionsOpts struct {
	ContentType optional.String
}

func (a *RecipesApiService) AnalyzeRecipeInstructions(ctx context.Context, localVarOptionals *AnalyzeRecipeInstructionsOpts) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/analyzeInstructions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Autocomplete Recipe Search
Autocomplete a partial input to suggest possible recipe names.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AutocompleteRecipeSearchOpts - Optional Parameters:
 * @param "Query" (optional.String) -  The (natural language) search query.
 * @param "Number" (optional.Int32) -  The maximum number of items to return (between 1 and 100). Defaults to 10.
@return []InlineResponse2007
*/

type AutocompleteRecipeSearchOpts struct {
	Query optional.String
	Number optional.Int32
}

func (a *RecipesApiService) AutocompleteRecipeSearch(ctx context.Context, localVarOptionals *AutocompleteRecipeSearchOpts) ([]InlineResponse2007, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse2007
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/autocomplete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Query.IsSet() {
		localVarQueryParams.Add("query", parameterToString(localVarOptionals.Query.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []InlineResponse2007
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Classify Cuisine
Classify the recipe&#39;s cuisine.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ClassifyCuisineOpts - Optional Parameters:
 * @param "ContentType" (optional.String) -  The content type.
@return InlineResponse20017
*/

type ClassifyCuisineOpts struct {
	ContentType optional.String
}

func (a *RecipesApiService) ClassifyCuisine(ctx context.Context, localVarOptionals *ClassifyCuisineOpts) (InlineResponse20017, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20017
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/cuisine"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20017
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Compute Glycemic Load
Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inlineObject
 * @param optional nil or *ComputeGlycemicLoadOpts - Optional Parameters:
 * @param "Language" (optional.String) -  The language of the input. Either 'en' or 'de'.
@return InlineResponse20023
*/

type ComputeGlycemicLoadOpts struct {
	Language optional.String
}

func (a *RecipesApiService) ComputeGlycemicLoad(ctx context.Context, inlineObject InlineObject, localVarOptionals *ComputeGlycemicLoadOpts) (InlineResponse20023, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20023
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/food/ingredients/glycemicLoad"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Language.IsSet() {
		localVarQueryParams.Add("language", parameterToString(localVarOptionals.Language.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &inlineObject
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20023
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Convert Amounts
Convert amounts like \&quot;2 cups of flour to grams\&quot;.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ingredientName The ingredient which you want to convert.
 * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
 * @param sourceUnit The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
 * @param targetUnit The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
@return InlineResponse20019
*/
func (a *RecipesApiService) ConvertAmounts(ctx context.Context, ingredientName string, sourceAmount float32, sourceUnit string, targetUnit string) (InlineResponse20019, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20019
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/convert"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ingredientName", parameterToString(ingredientName, ""))
	localVarQueryParams.Add("sourceAmount", parameterToString(sourceAmount, ""))
	localVarQueryParams.Add("sourceUnit", parameterToString(sourceUnit, ""))
	localVarQueryParams.Add("targetUnit", parameterToString(targetUnit, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20019
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Create Recipe Card
Generate a recipe card for a recipe.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CreateRecipeCardOpts - Optional Parameters:
 * @param "ContentType" (optional.String) -  The content type.
@return InlineResponse20015
*/

type CreateRecipeCardOpts struct {
	ContentType optional.String
}

func (a *RecipesApiService) CreateRecipeCard(ctx context.Context, localVarOptionals *CreateRecipeCardOpts) (InlineResponse20015, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20015
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeRecipe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20015
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Equipment by ID Image
Visualize a recipe&#39;s equipment list as an image.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *RecipesApiService) EquipmentByIDImage(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/equipmentWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Extract Recipe from Website
This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param url The URL of the recipe page.
 * @param optional nil or *ExtractRecipeFromWebsiteOpts - Optional Parameters:
 * @param "ForceExtraction" (optional.Bool) -  If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
 * @param "Analyze" (optional.Bool) -  If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
 * @param "IncludeNutrition" (optional.Bool) -  Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
 * @param "IncludeTaste" (optional.Bool) -  Whether taste data should be added to correctly parsed ingredients.
@return InlineResponse2003
*/

type ExtractRecipeFromWebsiteOpts struct {
	ForceExtraction optional.Bool
	Analyze optional.Bool
	IncludeNutrition optional.Bool
	IncludeTaste optional.Bool
}

func (a *RecipesApiService) ExtractRecipeFromWebsite(ctx context.Context, url string, localVarOptionals *ExtractRecipeFromWebsiteOpts) (InlineResponse2003, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2003
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/extract"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	if localVarOptionals != nil && localVarOptionals.ForceExtraction.IsSet() {
		localVarQueryParams.Add("forceExtraction", parameterToString(localVarOptionals.ForceExtraction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Analyze.IsSet() {
		localVarQueryParams.Add("analyze", parameterToString(localVarOptionals.Analyze.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeNutrition.IsSet() {
		localVarQueryParams.Add("includeNutrition", parameterToString(localVarOptionals.IncludeNutrition.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeTaste.IsSet() {
		localVarQueryParams.Add("includeTaste", parameterToString(localVarOptionals.IncludeTaste.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2003
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Get Analyzed Recipe Instructions
Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *GetAnalyzedRecipeInstructionsOpts - Optional Parameters:
 * @param "StepBreakdown" (optional.Bool) -  Whether to break down the recipe steps even more.
@return InlineResponse20013
*/

type GetAnalyzedRecipeInstructionsOpts struct {
	StepBreakdown optional.Bool
}

func (a *RecipesApiService) GetAnalyzedRecipeInstructions(ctx context.Context, id int32, localVarOptionals *GetAnalyzedRecipeInstructionsOpts) (InlineResponse20013, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20013
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/analyzedInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StepBreakdown.IsSet() {
		localVarQueryParams.Add("stepBreakdown", parameterToString(localVarOptionals.StepBreakdown.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20013
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Get Random Recipes
Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetRandomRecipesOpts - Optional Parameters:
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
 * @param "Tags" (optional.String) -  The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
 * @param "Number" (optional.Int32) -  The maximum number of items to return (between 1 and 100). Defaults to 10.
@return InlineResponse2006
*/

type GetRandomRecipesOpts struct {
	LimitLicense optional.Bool
	Tags optional.String
	Number optional.Int32
}

func (a *RecipesApiService) GetRandomRecipes(ctx context.Context, localVarOptionals *GetRandomRecipesOpts) (InlineResponse2006, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2006
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/random"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2006
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Equipment by ID
Get a recipe&#39;s equipment list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
@return InlineResponse2009
*/
func (a *RecipesApiService) GetRecipeEquipmentByID(ctx context.Context, id int32) (InlineResponse2009, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2009
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/equipmentWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2009
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Get Recipe Information
Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *GetRecipeInformationOpts - Optional Parameters:
 * @param "IncludeNutrition" (optional.Bool) -  Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
@return InlineResponse2003
*/

type GetRecipeInformationOpts struct {
	IncludeNutrition optional.Bool
}

func (a *RecipesApiService) GetRecipeInformation(ctx context.Context, id int32, localVarOptionals *GetRecipeInformationOpts) (InlineResponse2003, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2003
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/information"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IncludeNutrition.IsSet() {
		localVarQueryParams.Add("includeNutrition", parameterToString(localVarOptionals.IncludeNutrition.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2003
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Get Recipe Information Bulk
Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ids A comma-separated list of recipe ids.
 * @param optional nil or *GetRecipeInformationBulkOpts - Optional Parameters:
 * @param "IncludeNutrition" (optional.Bool) -  Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
@return []InlineResponse2004
*/

type GetRecipeInformationBulkOpts struct {
	IncludeNutrition optional.Bool
}

func (a *RecipesApiService) GetRecipeInformationBulk(ctx context.Context, ids string, localVarOptionals *GetRecipeInformationBulkOpts) ([]InlineResponse2004, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse2004
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/informationBulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ids", parameterToString(ids, ""))
	if localVarOptionals != nil && localVarOptionals.IncludeNutrition.IsSet() {
		localVarQueryParams.Add("includeNutrition", parameterToString(localVarOptionals.IncludeNutrition.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []InlineResponse2004
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Ingredients by ID
Get a recipe&#39;s ingredient list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
@return InlineResponse20011
*/
func (a *RecipesApiService) GetRecipeIngredientsByID(ctx context.Context, id int32) (InlineResponse20011, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20011
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/ingredientWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20011
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Nutrition by ID
Get a recipe&#39;s nutrition data.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
@return InlineResponse20012
*/
func (a *RecipesApiService) GetRecipeNutritionWidgetByID(ctx context.Context, id int32) (InlineResponse20012, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20012
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/nutritionWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20012
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Price Breakdown by ID
Get a recipe&#39;s price breakdown data.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
@return InlineResponse20010
*/
func (a *RecipesApiService) GetRecipePriceBreakdownByID(ctx context.Context, id int32) (InlineResponse20010, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20010
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/priceBreakdownWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20010
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Taste by ID
Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *GetRecipeTasteByIDOpts - Optional Parameters:
 * @param "Normalize" (optional.Bool) -  Normalize to the strongest taste.
@return InlineResponse2008
*/

type GetRecipeTasteByIDOpts struct {
	Normalize optional.Bool
}

func (a *RecipesApiService) GetRecipeTasteByID(ctx context.Context, id int32, localVarOptionals *GetRecipeTasteByIDOpts) (InlineResponse2008, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2008
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/tasteWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Normalize.IsSet() {
		localVarQueryParams.Add("normalize", parameterToString(localVarOptionals.Normalize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2008
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Get Similar Recipes
Find recipes which are similar to the given one.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *GetSimilarRecipesOpts - Optional Parameters:
 * @param "Number" (optional.Int32) -  The maximum number of items to return (between 1 and 100). Defaults to 10.
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
@return []InlineResponse2005
*/

type GetSimilarRecipesOpts struct {
	Number optional.Int32
	LimitLicense optional.Bool
}

func (a *RecipesApiService) GetSimilarRecipes(ctx context.Context, id int32, localVarOptionals *GetSimilarRecipesOpts) ([]InlineResponse2005, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse2005
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/similar"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []InlineResponse2005
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Guess Nutrition by Dish Name
Estimate the macronutrients of a dish based on its title.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param title The title of the dish.
@return InlineResponse20021
*/
func (a *RecipesApiService) GuessNutritionByDishName(ctx context.Context, title string) (InlineResponse20021, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20021
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/guessNutrition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("title", parameterToString(title, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20021
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Ingredients by ID Image
Visualize a recipe&#39;s ingredient list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *IngredientsByIDImageOpts - Optional Parameters:
 * @param "Measure" (optional.String) -  Whether the the measures should be 'us' or 'metric'.
@return map[string]interface{}
*/

type IngredientsByIDImageOpts struct {
	Measure optional.String
}

func (a *RecipesApiService) IngredientsByIDImage(ctx context.Context, id float32, localVarOptionals *IngredientsByIDImageOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/ingredientWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Measure.IsSet() {
		localVarQueryParams.Add("measure", parameterToString(localVarOptionals.Measure.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Parse Ingredients
Extract an ingredient from plain text.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ParseIngredientsOpts - Optional Parameters:
 * @param "ContentType" (optional.String) -  The content type.
 * @param "Language" (optional.String) -  The language of the input. Either 'en' or 'de'.
@return []InlineResponse20020
*/

type ParseIngredientsOpts struct {
	ContentType optional.String
	Language optional.String
}

func (a *RecipesApiService) ParseIngredients(ctx context.Context, localVarOptionals *ParseIngredientsOpts) ([]InlineResponse20020, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse20020
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/parseIngredients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Language.IsSet() {
		localVarQueryParams.Add("language", parameterToString(localVarOptionals.Language.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []InlineResponse20020
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Price Breakdown by ID Image
Visualize a recipe&#39;s price breakdown.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *RecipesApiService) PriceBreakdownByIDImage(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/priceBreakdownWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Quick Answer
Answer a nutrition related natural language question.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param q The nutrition related question.
@return InlineResponse20049
*/
func (a *RecipesApiService) QuickAnswer(ctx context.Context, q string) (InlineResponse20049, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20049
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/quickAnswer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("q", parameterToString(q, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20049
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Nutrition by ID Image
Visualize a recipe&#39;s nutritional information as an image.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
@return map[string]interface{}
*/
func (a *RecipesApiService) RecipeNutritionByIDImage(ctx context.Context, id float32) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/nutritionWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Nutrition Label Image
Get a recipe&#39;s nutrition label as an image.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *RecipeNutritionLabelImageOpts - Optional Parameters:
 * @param "ShowOptionalNutrients" (optional.Bool) -  Whether to show optional nutrients.
 * @param "ShowZeroValues" (optional.Bool) -  Whether to show zero values.
 * @param "ShowIngredients" (optional.Bool) -  Whether to show a list of ingredients.
@return map[string]interface{}
*/

type RecipeNutritionLabelImageOpts struct {
	ShowOptionalNutrients optional.Bool
	ShowZeroValues optional.Bool
	ShowIngredients optional.Bool
}

func (a *RecipesApiService) RecipeNutritionLabelImage(ctx context.Context, id float32, localVarOptionals *RecipeNutritionLabelImageOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/nutritionLabel.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ShowOptionalNutrients.IsSet() {
		localVarQueryParams.Add("showOptionalNutrients", parameterToString(localVarOptionals.ShowOptionalNutrients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowZeroValues.IsSet() {
		localVarQueryParams.Add("showZeroValues", parameterToString(localVarOptionals.ShowZeroValues.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowIngredients.IsSet() {
		localVarQueryParams.Add("showIngredients", parameterToString(localVarOptionals.ShowIngredients.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Nutrition Label Widget
Get a recipe&#39;s nutrition label as an HTML widget.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *RecipeNutritionLabelWidgetOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
 * @param "ShowOptionalNutrients" (optional.Bool) -  Whether to show optional nutrients.
 * @param "ShowZeroValues" (optional.Bool) -  Whether to show zero values.
 * @param "ShowIngredients" (optional.Bool) -  Whether to show a list of ingredients.
@return string
*/

type RecipeNutritionLabelWidgetOpts struct {
	DefaultCss optional.Bool
	ShowOptionalNutrients optional.Bool
	ShowZeroValues optional.Bool
	ShowIngredients optional.Bool
}

func (a *RecipesApiService) RecipeNutritionLabelWidget(ctx context.Context, id float32, localVarOptionals *RecipeNutritionLabelWidgetOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/nutritionLabel"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowOptionalNutrients.IsSet() {
		localVarQueryParams.Add("showOptionalNutrients", parameterToString(localVarOptionals.ShowOptionalNutrients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowZeroValues.IsSet() {
		localVarQueryParams.Add("showZeroValues", parameterToString(localVarOptionals.ShowZeroValues.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowIngredients.IsSet() {
		localVarQueryParams.Add("showIngredients", parameterToString(localVarOptionals.ShowIngredients.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Taste by ID Image
Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The recipe id.
 * @param optional nil or *RecipeTasteByIDImageOpts - Optional Parameters:
 * @param "Normalize" (optional.Bool) -  Normalize to the strongest taste.
 * @param "Rgb" (optional.String) -  Red, green, blue values for the chart color.
@return map[string]interface{}
*/

type RecipeTasteByIDImageOpts struct {
	Normalize optional.Bool
	Rgb optional.String
}

func (a *RecipesApiService) RecipeTasteByIDImage(ctx context.Context, id float32, localVarOptionals *RecipeTasteByIDImageOpts) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/tasteWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Normalize.IsSet() {
		localVarQueryParams.Add("normalize", parameterToString(localVarOptionals.Normalize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rgb.IsSet() {
		localVarQueryParams.Add("rgb", parameterToString(localVarOptionals.Rgb.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Search Recipes
Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchRecipesOpts - Optional Parameters:
 * @param "Query" (optional.String) -  The (natural language) search query.
 * @param "Cuisine" (optional.String) -  The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
 * @param "ExcludeCuisine" (optional.String) -  The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
 * @param "Diet" (optional.String) -  The diet for which the recipes must be suitable. See a full list of supported diets.
 * @param "Intolerances" (optional.String) -  A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
 * @param "Equipment" (optional.String) -  The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
 * @param "IncludeIngredients" (optional.String) -  A comma-separated list of ingredients that should/must be used in the recipes.
 * @param "ExcludeIngredients" (optional.String) -  A comma-separated list of ingredients or ingredient types that the recipes must not contain.
 * @param "Type_" (optional.String) -  The type of recipe. See a full list of supported meal types.
 * @param "InstructionsRequired" (optional.Bool) -  Whether the recipes must have instructions.
 * @param "FillIngredients" (optional.Bool) -  Add information about the ingredients and whether they are used or missing in relation to the query.
 * @param "AddRecipeInformation" (optional.Bool) -  If set to true, you get more information about the recipes returned.
 * @param "AddRecipeNutrition" (optional.Bool) -  If set to true, you get nutritional information about each recipes returned.
 * @param "Author" (optional.String) -  The username of the recipe author.
 * @param "Tags" (optional.String) -  The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
 * @param "RecipeBoxId" (optional.Float32) -  The id of the recipe box to which the search should be limited to.
 * @param "TitleMatch" (optional.String) -  Enter text that must be found in the title of the recipes.
 * @param "MaxReadyTime" (optional.Float32) -  The maximum time in minutes it should take to prepare and cook the recipe.
 * @param "IgnorePantry" (optional.Bool) -  Whether to ignore typical pantry items, such as water, salt, flour, etc.
 * @param "Sort" (optional.String) -  The strategy to sort recipes by. See a full list of supported sorting options.
 * @param "SortDirection" (optional.String) -  The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
 * @param "MinCarbs" (optional.Float32) -  The minimum amount of carbohydrates in grams the recipe must have.
 * @param "MaxCarbs" (optional.Float32) -  The maximum amount of carbohydrates in grams the recipe can have.
 * @param "MinProtein" (optional.Float32) -  The minimum amount of protein in grams the recipe must have.
 * @param "MaxProtein" (optional.Float32) -  The maximum amount of protein in grams the recipe can have.
 * @param "MinCalories" (optional.Float32) -  The minimum amount of calories the recipe must have.
 * @param "MaxCalories" (optional.Float32) -  The maximum amount of calories the recipe can have.
 * @param "MinFat" (optional.Float32) -  The minimum amount of fat in grams the recipe must have.
 * @param "MaxFat" (optional.Float32) -  The maximum amount of fat in grams the recipe can have.
 * @param "MinAlcohol" (optional.Float32) -  The minimum amount of alcohol in grams the recipe must have.
 * @param "MaxAlcohol" (optional.Float32) -  The maximum amount of alcohol in grams the recipe can have.
 * @param "MinCaffeine" (optional.Float32) -  The minimum amount of caffeine in milligrams the recipe must have.
 * @param "MaxCaffeine" (optional.Float32) -  The maximum amount of caffeine in milligrams the recipe can have.
 * @param "MinCopper" (optional.Float32) -  The minimum amount of copper in milligrams the recipe must have.
 * @param "MaxCopper" (optional.Float32) -  The maximum amount of copper in milligrams the recipe can have.
 * @param "MinCalcium" (optional.Float32) -  The minimum amount of calcium in milligrams the recipe must have.
 * @param "MaxCalcium" (optional.Float32) -  The maximum amount of calcium in milligrams the recipe can have.
 * @param "MinCholine" (optional.Float32) -  The minimum amount of choline in milligrams the recipe must have.
 * @param "MaxCholine" (optional.Float32) -  The maximum amount of choline in milligrams the recipe can have.
 * @param "MinCholesterol" (optional.Float32) -  The minimum amount of cholesterol in milligrams the recipe must have.
 * @param "MaxCholesterol" (optional.Float32) -  The maximum amount of cholesterol in milligrams the recipe can have.
 * @param "MinFluoride" (optional.Float32) -  The minimum amount of fluoride in milligrams the recipe must have.
 * @param "MaxFluoride" (optional.Float32) -  The maximum amount of fluoride in milligrams the recipe can have.
 * @param "MinSaturatedFat" (optional.Float32) -  The minimum amount of saturated fat in grams the recipe must have.
 * @param "MaxSaturatedFat" (optional.Float32) -  The maximum amount of saturated fat in grams the recipe can have.
 * @param "MinVitaminA" (optional.Float32) -  The minimum amount of Vitamin A in IU the recipe must have.
 * @param "MaxVitaminA" (optional.Float32) -  The maximum amount of Vitamin A in IU the recipe can have.
 * @param "MinVitaminC" (optional.Float32) -  The minimum amount of Vitamin C milligrams the recipe must have.
 * @param "MaxVitaminC" (optional.Float32) -  The maximum amount of Vitamin C in milligrams the recipe can have.
 * @param "MinVitaminD" (optional.Float32) -  The minimum amount of Vitamin D in micrograms the recipe must have.
 * @param "MaxVitaminD" (optional.Float32) -  The maximum amount of Vitamin D in micrograms the recipe can have.
 * @param "MinVitaminE" (optional.Float32) -  The minimum amount of Vitamin E in milligrams the recipe must have.
 * @param "MaxVitaminE" (optional.Float32) -  The maximum amount of Vitamin E in milligrams the recipe can have.
 * @param "MinVitaminK" (optional.Float32) -  The minimum amount of Vitamin K in micrograms the recipe must have.
 * @param "MaxVitaminK" (optional.Float32) -  The maximum amount of Vitamin K in micrograms the recipe can have.
 * @param "MinVitaminB1" (optional.Float32) -  The minimum amount of Vitamin B1 in milligrams the recipe must have.
 * @param "MaxVitaminB1" (optional.Float32) -  The maximum amount of Vitamin B1 in milligrams the recipe can have.
 * @param "MinVitaminB2" (optional.Float32) -  The minimum amount of Vitamin B2 in milligrams the recipe must have.
 * @param "MaxVitaminB2" (optional.Float32) -  The maximum amount of Vitamin B2 in milligrams the recipe can have.
 * @param "MinVitaminB5" (optional.Float32) -  The minimum amount of Vitamin B5 in milligrams the recipe must have.
 * @param "MaxVitaminB5" (optional.Float32) -  The maximum amount of Vitamin B5 in milligrams the recipe can have.
 * @param "MinVitaminB3" (optional.Float32) -  The minimum amount of Vitamin B3 in milligrams the recipe must have.
 * @param "MaxVitaminB3" (optional.Float32) -  The maximum amount of Vitamin B3 in milligrams the recipe can have.
 * @param "MinVitaminB6" (optional.Float32) -  The minimum amount of Vitamin B6 in milligrams the recipe must have.
 * @param "MaxVitaminB6" (optional.Float32) -  The maximum amount of Vitamin B6 in milligrams the recipe can have.
 * @param "MinVitaminB12" (optional.Float32) -  The minimum amount of Vitamin B12 in micrograms the recipe must have.
 * @param "MaxVitaminB12" (optional.Float32) -  The maximum amount of Vitamin B12 in micrograms the recipe can have.
 * @param "MinFiber" (optional.Float32) -  The minimum amount of fiber in grams the recipe must have.
 * @param "MaxFiber" (optional.Float32) -  The maximum amount of fiber in grams the recipe can have.
 * @param "MinFolate" (optional.Float32) -  The minimum amount of folate in micrograms the recipe must have.
 * @param "MaxFolate" (optional.Float32) -  The maximum amount of folate in micrograms the recipe can have.
 * @param "MinFolicAcid" (optional.Float32) -  The minimum amount of folic acid in micrograms the recipe must have.
 * @param "MaxFolicAcid" (optional.Float32) -  The maximum amount of folic acid in micrograms the recipe can have.
 * @param "MinIodine" (optional.Float32) -  The minimum amount of iodine in micrograms the recipe must have.
 * @param "MaxIodine" (optional.Float32) -  The maximum amount of iodine in micrograms the recipe can have.
 * @param "MinIron" (optional.Float32) -  The minimum amount of iron in milligrams the recipe must have.
 * @param "MaxIron" (optional.Float32) -  The maximum amount of iron in milligrams the recipe can have.
 * @param "MinMagnesium" (optional.Float32) -  The minimum amount of magnesium in milligrams the recipe must have.
 * @param "MaxMagnesium" (optional.Float32) -  The maximum amount of magnesium in milligrams the recipe can have.
 * @param "MinManganese" (optional.Float32) -  The minimum amount of manganese in milligrams the recipe must have.
 * @param "MaxManganese" (optional.Float32) -  The maximum amount of manganese in milligrams the recipe can have.
 * @param "MinPhosphorus" (optional.Float32) -  The minimum amount of phosphorus in milligrams the recipe must have.
 * @param "MaxPhosphorus" (optional.Float32) -  The maximum amount of phosphorus in milligrams the recipe can have.
 * @param "MinPotassium" (optional.Float32) -  The minimum amount of potassium in milligrams the recipe must have.
 * @param "MaxPotassium" (optional.Float32) -  The maximum amount of potassium in milligrams the recipe can have.
 * @param "MinSelenium" (optional.Float32) -  The minimum amount of selenium in micrograms the recipe must have.
 * @param "MaxSelenium" (optional.Float32) -  The maximum amount of selenium in micrograms the recipe can have.
 * @param "MinSodium" (optional.Float32) -  The minimum amount of sodium in milligrams the recipe must have.
 * @param "MaxSodium" (optional.Float32) -  The maximum amount of sodium in milligrams the recipe can have.
 * @param "MinSugar" (optional.Float32) -  The minimum amount of sugar in grams the recipe must have.
 * @param "MaxSugar" (optional.Float32) -  The maximum amount of sugar in grams the recipe can have.
 * @param "MinZinc" (optional.Float32) -  The minimum amount of zinc in milligrams the recipe must have.
 * @param "MaxZinc" (optional.Float32) -  The maximum amount of zinc in milligrams the recipe can have.
 * @param "Offset" (optional.Int32) -  The number of results to skip (between 0 and 900).
 * @param "Number" (optional.Int32) -  The maximum number of items to return (between 1 and 100). Defaults to 10.
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
@return InlineResponse200
*/

type SearchRecipesOpts struct {
	Query optional.String
	Cuisine optional.String
	ExcludeCuisine optional.String
	Diet optional.String
	Intolerances optional.String
	Equipment optional.String
	IncludeIngredients optional.String
	ExcludeIngredients optional.String
	Type_ optional.String
	InstructionsRequired optional.Bool
	FillIngredients optional.Bool
	AddRecipeInformation optional.Bool
	AddRecipeNutrition optional.Bool
	Author optional.String
	Tags optional.String
	RecipeBoxId optional.Float32
	TitleMatch optional.String
	MaxReadyTime optional.Float32
	IgnorePantry optional.Bool
	Sort optional.String
	SortDirection optional.String
	MinCarbs optional.Float32
	MaxCarbs optional.Float32
	MinProtein optional.Float32
	MaxProtein optional.Float32
	MinCalories optional.Float32
	MaxCalories optional.Float32
	MinFat optional.Float32
	MaxFat optional.Float32
	MinAlcohol optional.Float32
	MaxAlcohol optional.Float32
	MinCaffeine optional.Float32
	MaxCaffeine optional.Float32
	MinCopper optional.Float32
	MaxCopper optional.Float32
	MinCalcium optional.Float32
	MaxCalcium optional.Float32
	MinCholine optional.Float32
	MaxCholine optional.Float32
	MinCholesterol optional.Float32
	MaxCholesterol optional.Float32
	MinFluoride optional.Float32
	MaxFluoride optional.Float32
	MinSaturatedFat optional.Float32
	MaxSaturatedFat optional.Float32
	MinVitaminA optional.Float32
	MaxVitaminA optional.Float32
	MinVitaminC optional.Float32
	MaxVitaminC optional.Float32
	MinVitaminD optional.Float32
	MaxVitaminD optional.Float32
	MinVitaminE optional.Float32
	MaxVitaminE optional.Float32
	MinVitaminK optional.Float32
	MaxVitaminK optional.Float32
	MinVitaminB1 optional.Float32
	MaxVitaminB1 optional.Float32
	MinVitaminB2 optional.Float32
	MaxVitaminB2 optional.Float32
	MinVitaminB5 optional.Float32
	MaxVitaminB5 optional.Float32
	MinVitaminB3 optional.Float32
	MaxVitaminB3 optional.Float32
	MinVitaminB6 optional.Float32
	MaxVitaminB6 optional.Float32
	MinVitaminB12 optional.Float32
	MaxVitaminB12 optional.Float32
	MinFiber optional.Float32
	MaxFiber optional.Float32
	MinFolate optional.Float32
	MaxFolate optional.Float32
	MinFolicAcid optional.Float32
	MaxFolicAcid optional.Float32
	MinIodine optional.Float32
	MaxIodine optional.Float32
	MinIron optional.Float32
	MaxIron optional.Float32
	MinMagnesium optional.Float32
	MaxMagnesium optional.Float32
	MinManganese optional.Float32
	MaxManganese optional.Float32
	MinPhosphorus optional.Float32
	MaxPhosphorus optional.Float32
	MinPotassium optional.Float32
	MaxPotassium optional.Float32
	MinSelenium optional.Float32
	MaxSelenium optional.Float32
	MinSodium optional.Float32
	MaxSodium optional.Float32
	MinSugar optional.Float32
	MaxSugar optional.Float32
	MinZinc optional.Float32
	MaxZinc optional.Float32
	Offset optional.Int32
	Number optional.Int32
	LimitLicense optional.Bool
}

func (a *RecipesApiService) SearchRecipes(ctx context.Context, localVarOptionals *SearchRecipesOpts) (InlineResponse200, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/complexSearch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Query.IsSet() {
		localVarQueryParams.Add("query", parameterToString(localVarOptionals.Query.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cuisine.IsSet() {
		localVarQueryParams.Add("cuisine", parameterToString(localVarOptionals.Cuisine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeCuisine.IsSet() {
		localVarQueryParams.Add("excludeCuisine", parameterToString(localVarOptionals.ExcludeCuisine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diet.IsSet() {
		localVarQueryParams.Add("diet", parameterToString(localVarOptionals.Diet.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Intolerances.IsSet() {
		localVarQueryParams.Add("intolerances", parameterToString(localVarOptionals.Intolerances.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Equipment.IsSet() {
		localVarQueryParams.Add("equipment", parameterToString(localVarOptionals.Equipment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeIngredients.IsSet() {
		localVarQueryParams.Add("includeIngredients", parameterToString(localVarOptionals.IncludeIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeIngredients.IsSet() {
		localVarQueryParams.Add("excludeIngredients", parameterToString(localVarOptionals.ExcludeIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InstructionsRequired.IsSet() {
		localVarQueryParams.Add("instructionsRequired", parameterToString(localVarOptionals.InstructionsRequired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FillIngredients.IsSet() {
		localVarQueryParams.Add("fillIngredients", parameterToString(localVarOptionals.FillIngredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AddRecipeInformation.IsSet() {
		localVarQueryParams.Add("addRecipeInformation", parameterToString(localVarOptionals.AddRecipeInformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AddRecipeNutrition.IsSet() {
		localVarQueryParams.Add("addRecipeNutrition", parameterToString(localVarOptionals.AddRecipeNutrition.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Author.IsSet() {
		localVarQueryParams.Add("author", parameterToString(localVarOptionals.Author.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RecipeBoxId.IsSet() {
		localVarQueryParams.Add("recipeBoxId", parameterToString(localVarOptionals.RecipeBoxId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TitleMatch.IsSet() {
		localVarQueryParams.Add("titleMatch", parameterToString(localVarOptionals.TitleMatch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxReadyTime.IsSet() {
		localVarQueryParams.Add("maxReadyTime", parameterToString(localVarOptionals.MaxReadyTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IgnorePantry.IsSet() {
		localVarQueryParams.Add("ignorePantry", parameterToString(localVarOptionals.IgnorePantry.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortDirection.IsSet() {
		localVarQueryParams.Add("sortDirection", parameterToString(localVarOptionals.SortDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCarbs.IsSet() {
		localVarQueryParams.Add("minCarbs", parameterToString(localVarOptionals.MinCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCarbs.IsSet() {
		localVarQueryParams.Add("maxCarbs", parameterToString(localVarOptionals.MaxCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinProtein.IsSet() {
		localVarQueryParams.Add("minProtein", parameterToString(localVarOptionals.MinProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxProtein.IsSet() {
		localVarQueryParams.Add("maxProtein", parameterToString(localVarOptionals.MaxProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalories.IsSet() {
		localVarQueryParams.Add("minCalories", parameterToString(localVarOptionals.MinCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalories.IsSet() {
		localVarQueryParams.Add("maxCalories", parameterToString(localVarOptionals.MaxCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFat.IsSet() {
		localVarQueryParams.Add("minFat", parameterToString(localVarOptionals.MinFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFat.IsSet() {
		localVarQueryParams.Add("maxFat", parameterToString(localVarOptionals.MaxFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinAlcohol.IsSet() {
		localVarQueryParams.Add("minAlcohol", parameterToString(localVarOptionals.MinAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAlcohol.IsSet() {
		localVarQueryParams.Add("maxAlcohol", parameterToString(localVarOptionals.MaxAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCaffeine.IsSet() {
		localVarQueryParams.Add("minCaffeine", parameterToString(localVarOptionals.MinCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCaffeine.IsSet() {
		localVarQueryParams.Add("maxCaffeine", parameterToString(localVarOptionals.MaxCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCopper.IsSet() {
		localVarQueryParams.Add("minCopper", parameterToString(localVarOptionals.MinCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCopper.IsSet() {
		localVarQueryParams.Add("maxCopper", parameterToString(localVarOptionals.MaxCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalcium.IsSet() {
		localVarQueryParams.Add("minCalcium", parameterToString(localVarOptionals.MinCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalcium.IsSet() {
		localVarQueryParams.Add("maxCalcium", parameterToString(localVarOptionals.MaxCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholine.IsSet() {
		localVarQueryParams.Add("minCholine", parameterToString(localVarOptionals.MinCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholine.IsSet() {
		localVarQueryParams.Add("maxCholine", parameterToString(localVarOptionals.MaxCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholesterol.IsSet() {
		localVarQueryParams.Add("minCholesterol", parameterToString(localVarOptionals.MinCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholesterol.IsSet() {
		localVarQueryParams.Add("maxCholesterol", parameterToString(localVarOptionals.MaxCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFluoride.IsSet() {
		localVarQueryParams.Add("minFluoride", parameterToString(localVarOptionals.MinFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFluoride.IsSet() {
		localVarQueryParams.Add("maxFluoride", parameterToString(localVarOptionals.MaxFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSaturatedFat.IsSet() {
		localVarQueryParams.Add("minSaturatedFat", parameterToString(localVarOptionals.MinSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSaturatedFat.IsSet() {
		localVarQueryParams.Add("maxSaturatedFat", parameterToString(localVarOptionals.MaxSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminA.IsSet() {
		localVarQueryParams.Add("minVitaminA", parameterToString(localVarOptionals.MinVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminA.IsSet() {
		localVarQueryParams.Add("maxVitaminA", parameterToString(localVarOptionals.MaxVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminC.IsSet() {
		localVarQueryParams.Add("minVitaminC", parameterToString(localVarOptionals.MinVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminC.IsSet() {
		localVarQueryParams.Add("maxVitaminC", parameterToString(localVarOptionals.MaxVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminD.IsSet() {
		localVarQueryParams.Add("minVitaminD", parameterToString(localVarOptionals.MinVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminD.IsSet() {
		localVarQueryParams.Add("maxVitaminD", parameterToString(localVarOptionals.MaxVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminE.IsSet() {
		localVarQueryParams.Add("minVitaminE", parameterToString(localVarOptionals.MinVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminE.IsSet() {
		localVarQueryParams.Add("maxVitaminE", parameterToString(localVarOptionals.MaxVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminK.IsSet() {
		localVarQueryParams.Add("minVitaminK", parameterToString(localVarOptionals.MinVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminK.IsSet() {
		localVarQueryParams.Add("maxVitaminK", parameterToString(localVarOptionals.MaxVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB1.IsSet() {
		localVarQueryParams.Add("minVitaminB1", parameterToString(localVarOptionals.MinVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB1.IsSet() {
		localVarQueryParams.Add("maxVitaminB1", parameterToString(localVarOptionals.MaxVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB2.IsSet() {
		localVarQueryParams.Add("minVitaminB2", parameterToString(localVarOptionals.MinVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB2.IsSet() {
		localVarQueryParams.Add("maxVitaminB2", parameterToString(localVarOptionals.MaxVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB5.IsSet() {
		localVarQueryParams.Add("minVitaminB5", parameterToString(localVarOptionals.MinVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB5.IsSet() {
		localVarQueryParams.Add("maxVitaminB5", parameterToString(localVarOptionals.MaxVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB3.IsSet() {
		localVarQueryParams.Add("minVitaminB3", parameterToString(localVarOptionals.MinVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB3.IsSet() {
		localVarQueryParams.Add("maxVitaminB3", parameterToString(localVarOptionals.MaxVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB6.IsSet() {
		localVarQueryParams.Add("minVitaminB6", parameterToString(localVarOptionals.MinVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB6.IsSet() {
		localVarQueryParams.Add("maxVitaminB6", parameterToString(localVarOptionals.MaxVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB12.IsSet() {
		localVarQueryParams.Add("minVitaminB12", parameterToString(localVarOptionals.MinVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB12.IsSet() {
		localVarQueryParams.Add("maxVitaminB12", parameterToString(localVarOptionals.MaxVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFiber.IsSet() {
		localVarQueryParams.Add("minFiber", parameterToString(localVarOptionals.MinFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFiber.IsSet() {
		localVarQueryParams.Add("maxFiber", parameterToString(localVarOptionals.MaxFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolate.IsSet() {
		localVarQueryParams.Add("minFolate", parameterToString(localVarOptionals.MinFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolate.IsSet() {
		localVarQueryParams.Add("maxFolate", parameterToString(localVarOptionals.MaxFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolicAcid.IsSet() {
		localVarQueryParams.Add("minFolicAcid", parameterToString(localVarOptionals.MinFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolicAcid.IsSet() {
		localVarQueryParams.Add("maxFolicAcid", parameterToString(localVarOptionals.MaxFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIodine.IsSet() {
		localVarQueryParams.Add("minIodine", parameterToString(localVarOptionals.MinIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIodine.IsSet() {
		localVarQueryParams.Add("maxIodine", parameterToString(localVarOptionals.MaxIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIron.IsSet() {
		localVarQueryParams.Add("minIron", parameterToString(localVarOptionals.MinIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIron.IsSet() {
		localVarQueryParams.Add("maxIron", parameterToString(localVarOptionals.MaxIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinMagnesium.IsSet() {
		localVarQueryParams.Add("minMagnesium", parameterToString(localVarOptionals.MinMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxMagnesium.IsSet() {
		localVarQueryParams.Add("maxMagnesium", parameterToString(localVarOptionals.MaxMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinManganese.IsSet() {
		localVarQueryParams.Add("minManganese", parameterToString(localVarOptionals.MinManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxManganese.IsSet() {
		localVarQueryParams.Add("maxManganese", parameterToString(localVarOptionals.MaxManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPhosphorus.IsSet() {
		localVarQueryParams.Add("minPhosphorus", parameterToString(localVarOptionals.MinPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPhosphorus.IsSet() {
		localVarQueryParams.Add("maxPhosphorus", parameterToString(localVarOptionals.MaxPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPotassium.IsSet() {
		localVarQueryParams.Add("minPotassium", parameterToString(localVarOptionals.MinPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPotassium.IsSet() {
		localVarQueryParams.Add("maxPotassium", parameterToString(localVarOptionals.MaxPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSelenium.IsSet() {
		localVarQueryParams.Add("minSelenium", parameterToString(localVarOptionals.MinSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSelenium.IsSet() {
		localVarQueryParams.Add("maxSelenium", parameterToString(localVarOptionals.MaxSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSodium.IsSet() {
		localVarQueryParams.Add("minSodium", parameterToString(localVarOptionals.MinSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSodium.IsSet() {
		localVarQueryParams.Add("maxSodium", parameterToString(localVarOptionals.MaxSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSugar.IsSet() {
		localVarQueryParams.Add("minSugar", parameterToString(localVarOptionals.MinSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSugar.IsSet() {
		localVarQueryParams.Add("maxSugar", parameterToString(localVarOptionals.MaxSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinZinc.IsSet() {
		localVarQueryParams.Add("minZinc", parameterToString(localVarOptionals.MinZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxZinc.IsSet() {
		localVarQueryParams.Add("maxZinc", parameterToString(localVarOptionals.MaxZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse200
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Search Recipes by Ingredients
 Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchRecipesByIngredientsOpts - Optional Parameters:
 * @param "Ingredients" (optional.String) -  A comma-separated list of ingredients that the recipes should contain.
 * @param "Number" (optional.Int32) -  The maximum number of items to return (between 1 and 100). Defaults to 10.
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
 * @param "Ranking" (optional.Float32) -  Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
 * @param "IgnorePantry" (optional.Bool) -  Whether to ignore typical pantry items, such as water, salt, flour, etc.
@return []InlineResponse2001
*/

type SearchRecipesByIngredientsOpts struct {
	Ingredients optional.String
	Number optional.Int32
	LimitLicense optional.Bool
	Ranking optional.Float32
	IgnorePantry optional.Bool
}

func (a *RecipesApiService) SearchRecipesByIngredients(ctx context.Context, localVarOptionals *SearchRecipesByIngredientsOpts) ([]InlineResponse2001, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse2001
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/findByIngredients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Ingredients.IsSet() {
		localVarQueryParams.Add("ingredients", parameterToString(localVarOptionals.Ingredients.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ranking.IsSet() {
		localVarQueryParams.Add("ranking", parameterToString(localVarOptionals.Ranking.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IgnorePantry.IsSet() {
		localVarQueryParams.Add("ignorePantry", parameterToString(localVarOptionals.IgnorePantry.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []InlineResponse2001
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Search Recipes by Nutrients
Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchRecipesByNutrientsOpts - Optional Parameters:
 * @param "MinCarbs" (optional.Float32) -  The minimum amount of carbohydrates in grams the recipe must have.
 * @param "MaxCarbs" (optional.Float32) -  The maximum amount of carbohydrates in grams the recipe can have.
 * @param "MinProtein" (optional.Float32) -  The minimum amount of protein in grams the recipe must have.
 * @param "MaxProtein" (optional.Float32) -  The maximum amount of protein in grams the recipe can have.
 * @param "MinCalories" (optional.Float32) -  The minimum amount of calories the recipe must have.
 * @param "MaxCalories" (optional.Float32) -  The maximum amount of calories the recipe can have.
 * @param "MinFat" (optional.Float32) -  The minimum amount of fat in grams the recipe must have.
 * @param "MaxFat" (optional.Float32) -  The maximum amount of fat in grams the recipe can have.
 * @param "MinAlcohol" (optional.Float32) -  The minimum amount of alcohol in grams the recipe must have.
 * @param "MaxAlcohol" (optional.Float32) -  The maximum amount of alcohol in grams the recipe can have.
 * @param "MinCaffeine" (optional.Float32) -  The minimum amount of caffeine in milligrams the recipe must have.
 * @param "MaxCaffeine" (optional.Float32) -  The maximum amount of caffeine in milligrams the recipe can have.
 * @param "MinCopper" (optional.Float32) -  The minimum amount of copper in milligrams the recipe must have.
 * @param "MaxCopper" (optional.Float32) -  The maximum amount of copper in milligrams the recipe can have.
 * @param "MinCalcium" (optional.Float32) -  The minimum amount of calcium in milligrams the recipe must have.
 * @param "MaxCalcium" (optional.Float32) -  The maximum amount of calcium in milligrams the recipe can have.
 * @param "MinCholine" (optional.Float32) -  The minimum amount of choline in milligrams the recipe must have.
 * @param "MaxCholine" (optional.Float32) -  The maximum amount of choline in milligrams the recipe can have.
 * @param "MinCholesterol" (optional.Float32) -  The minimum amount of cholesterol in milligrams the recipe must have.
 * @param "MaxCholesterol" (optional.Float32) -  The maximum amount of cholesterol in milligrams the recipe can have.
 * @param "MinFluoride" (optional.Float32) -  The minimum amount of fluoride in milligrams the recipe must have.
 * @param "MaxFluoride" (optional.Float32) -  The maximum amount of fluoride in milligrams the recipe can have.
 * @param "MinSaturatedFat" (optional.Float32) -  The minimum amount of saturated fat in grams the recipe must have.
 * @param "MaxSaturatedFat" (optional.Float32) -  The maximum amount of saturated fat in grams the recipe can have.
 * @param "MinVitaminA" (optional.Float32) -  The minimum amount of Vitamin A in IU the recipe must have.
 * @param "MaxVitaminA" (optional.Float32) -  The maximum amount of Vitamin A in IU the recipe can have.
 * @param "MinVitaminC" (optional.Float32) -  The minimum amount of Vitamin C in milligrams the recipe must have.
 * @param "MaxVitaminC" (optional.Float32) -  The maximum amount of Vitamin C in milligrams the recipe can have.
 * @param "MinVitaminD" (optional.Float32) -  The minimum amount of Vitamin D in micrograms the recipe must have.
 * @param "MaxVitaminD" (optional.Float32) -  The maximum amount of Vitamin D in micrograms the recipe can have.
 * @param "MinVitaminE" (optional.Float32) -  The minimum amount of Vitamin E in milligrams the recipe must have.
 * @param "MaxVitaminE" (optional.Float32) -  The maximum amount of Vitamin E in milligrams the recipe can have.
 * @param "MinVitaminK" (optional.Float32) -  The minimum amount of Vitamin K in micrograms the recipe must have.
 * @param "MaxVitaminK" (optional.Float32) -  The maximum amount of Vitamin K in micrograms the recipe can have.
 * @param "MinVitaminB1" (optional.Float32) -  The minimum amount of Vitamin B1 in milligrams the recipe must have.
 * @param "MaxVitaminB1" (optional.Float32) -  The maximum amount of Vitamin B1 in milligrams the recipe can have.
 * @param "MinVitaminB2" (optional.Float32) -  The minimum amount of Vitamin B2 in milligrams the recipe must have.
 * @param "MaxVitaminB2" (optional.Float32) -  The maximum amount of Vitamin B2 in milligrams the recipe can have.
 * @param "MinVitaminB5" (optional.Float32) -  The minimum amount of Vitamin B5 in milligrams the recipe must have.
 * @param "MaxVitaminB5" (optional.Float32) -  The maximum amount of Vitamin B5 in milligrams the recipe can have.
 * @param "MinVitaminB3" (optional.Float32) -  The minimum amount of Vitamin B3 in milligrams the recipe must have.
 * @param "MaxVitaminB3" (optional.Float32) -  The maximum amount of Vitamin B3 in milligrams the recipe can have.
 * @param "MinVitaminB6" (optional.Float32) -  The minimum amount of Vitamin B6 in milligrams the recipe must have.
 * @param "MaxVitaminB6" (optional.Float32) -  The maximum amount of Vitamin B6 in milligrams the recipe can have.
 * @param "MinVitaminB12" (optional.Float32) -  The minimum amount of Vitamin B12 in micrograms the recipe must have.
 * @param "MaxVitaminB12" (optional.Float32) -  The maximum amount of Vitamin B12 in micrograms the recipe can have.
 * @param "MinFiber" (optional.Float32) -  The minimum amount of fiber in grams the recipe must have.
 * @param "MaxFiber" (optional.Float32) -  The maximum amount of fiber in grams the recipe can have.
 * @param "MinFolate" (optional.Float32) -  The minimum amount of folate in micrograms the recipe must have.
 * @param "MaxFolate" (optional.Float32) -  The maximum amount of folate in micrograms the recipe can have.
 * @param "MinFolicAcid" (optional.Float32) -  The minimum amount of folic acid in micrograms the recipe must have.
 * @param "MaxFolicAcid" (optional.Float32) -  The maximum amount of folic acid in micrograms the recipe can have.
 * @param "MinIodine" (optional.Float32) -  The minimum amount of iodine in micrograms the recipe must have.
 * @param "MaxIodine" (optional.Float32) -  The maximum amount of iodine in micrograms the recipe can have.
 * @param "MinIron" (optional.Float32) -  The minimum amount of iron in milligrams the recipe must have.
 * @param "MaxIron" (optional.Float32) -  The maximum amount of iron in milligrams the recipe can have.
 * @param "MinMagnesium" (optional.Float32) -  The minimum amount of magnesium in milligrams the recipe must have.
 * @param "MaxMagnesium" (optional.Float32) -  The maximum amount of magnesium in milligrams the recipe can have.
 * @param "MinManganese" (optional.Float32) -  The minimum amount of manganese in milligrams the recipe must have.
 * @param "MaxManganese" (optional.Float32) -  The maximum amount of manganese in milligrams the recipe can have.
 * @param "MinPhosphorus" (optional.Float32) -  The minimum amount of phosphorus in milligrams the recipe must have.
 * @param "MaxPhosphorus" (optional.Float32) -  The maximum amount of phosphorus in milligrams the recipe can have.
 * @param "MinPotassium" (optional.Float32) -  The minimum amount of potassium in milligrams the recipe must have.
 * @param "MaxPotassium" (optional.Float32) -  The maximum amount of potassium in milligrams the recipe can have.
 * @param "MinSelenium" (optional.Float32) -  The minimum amount of selenium in micrograms the recipe must have.
 * @param "MaxSelenium" (optional.Float32) -  The maximum amount of selenium in micrograms the recipe can have.
 * @param "MinSodium" (optional.Float32) -  The minimum amount of sodium in milligrams the recipe must have.
 * @param "MaxSodium" (optional.Float32) -  The maximum amount of sodium in milligrams the recipe can have.
 * @param "MinSugar" (optional.Float32) -  The minimum amount of sugar in grams the recipe must have.
 * @param "MaxSugar" (optional.Float32) -  The maximum amount of sugar in grams the recipe can have.
 * @param "MinZinc" (optional.Float32) -  The minimum amount of zinc in milligrams the recipe must have.
 * @param "MaxZinc" (optional.Float32) -  The maximum amount of zinc in milligrams the recipe can have.
 * @param "Offset" (optional.Int32) -  The number of results to skip (between 0 and 900).
 * @param "Number" (optional.Int32) -  The maximum number of items to return (between 1 and 100). Defaults to 10.
 * @param "Random" (optional.Bool) -  If true, every request will give you a random set of recipes within the requested limits.
 * @param "LimitLicense" (optional.Bool) -  Whether the recipes should have an open license that allows display with proper attribution.
@return []InlineResponse2002
*/

type SearchRecipesByNutrientsOpts struct {
	MinCarbs optional.Float32
	MaxCarbs optional.Float32
	MinProtein optional.Float32
	MaxProtein optional.Float32
	MinCalories optional.Float32
	MaxCalories optional.Float32
	MinFat optional.Float32
	MaxFat optional.Float32
	MinAlcohol optional.Float32
	MaxAlcohol optional.Float32
	MinCaffeine optional.Float32
	MaxCaffeine optional.Float32
	MinCopper optional.Float32
	MaxCopper optional.Float32
	MinCalcium optional.Float32
	MaxCalcium optional.Float32
	MinCholine optional.Float32
	MaxCholine optional.Float32
	MinCholesterol optional.Float32
	MaxCholesterol optional.Float32
	MinFluoride optional.Float32
	MaxFluoride optional.Float32
	MinSaturatedFat optional.Float32
	MaxSaturatedFat optional.Float32
	MinVitaminA optional.Float32
	MaxVitaminA optional.Float32
	MinVitaminC optional.Float32
	MaxVitaminC optional.Float32
	MinVitaminD optional.Float32
	MaxVitaminD optional.Float32
	MinVitaminE optional.Float32
	MaxVitaminE optional.Float32
	MinVitaminK optional.Float32
	MaxVitaminK optional.Float32
	MinVitaminB1 optional.Float32
	MaxVitaminB1 optional.Float32
	MinVitaminB2 optional.Float32
	MaxVitaminB2 optional.Float32
	MinVitaminB5 optional.Float32
	MaxVitaminB5 optional.Float32
	MinVitaminB3 optional.Float32
	MaxVitaminB3 optional.Float32
	MinVitaminB6 optional.Float32
	MaxVitaminB6 optional.Float32
	MinVitaminB12 optional.Float32
	MaxVitaminB12 optional.Float32
	MinFiber optional.Float32
	MaxFiber optional.Float32
	MinFolate optional.Float32
	MaxFolate optional.Float32
	MinFolicAcid optional.Float32
	MaxFolicAcid optional.Float32
	MinIodine optional.Float32
	MaxIodine optional.Float32
	MinIron optional.Float32
	MaxIron optional.Float32
	MinMagnesium optional.Float32
	MaxMagnesium optional.Float32
	MinManganese optional.Float32
	MaxManganese optional.Float32
	MinPhosphorus optional.Float32
	MaxPhosphorus optional.Float32
	MinPotassium optional.Float32
	MaxPotassium optional.Float32
	MinSelenium optional.Float32
	MaxSelenium optional.Float32
	MinSodium optional.Float32
	MaxSodium optional.Float32
	MinSugar optional.Float32
	MaxSugar optional.Float32
	MinZinc optional.Float32
	MaxZinc optional.Float32
	Offset optional.Int32
	Number optional.Int32
	Random optional.Bool
	LimitLicense optional.Bool
}

func (a *RecipesApiService) SearchRecipesByNutrients(ctx context.Context, localVarOptionals *SearchRecipesByNutrientsOpts) ([]InlineResponse2002, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse2002
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/findByNutrients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MinCarbs.IsSet() {
		localVarQueryParams.Add("minCarbs", parameterToString(localVarOptionals.MinCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCarbs.IsSet() {
		localVarQueryParams.Add("maxCarbs", parameterToString(localVarOptionals.MaxCarbs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinProtein.IsSet() {
		localVarQueryParams.Add("minProtein", parameterToString(localVarOptionals.MinProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxProtein.IsSet() {
		localVarQueryParams.Add("maxProtein", parameterToString(localVarOptionals.MaxProtein.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalories.IsSet() {
		localVarQueryParams.Add("minCalories", parameterToString(localVarOptionals.MinCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalories.IsSet() {
		localVarQueryParams.Add("maxCalories", parameterToString(localVarOptionals.MaxCalories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFat.IsSet() {
		localVarQueryParams.Add("minFat", parameterToString(localVarOptionals.MinFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFat.IsSet() {
		localVarQueryParams.Add("maxFat", parameterToString(localVarOptionals.MaxFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinAlcohol.IsSet() {
		localVarQueryParams.Add("minAlcohol", parameterToString(localVarOptionals.MinAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxAlcohol.IsSet() {
		localVarQueryParams.Add("maxAlcohol", parameterToString(localVarOptionals.MaxAlcohol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCaffeine.IsSet() {
		localVarQueryParams.Add("minCaffeine", parameterToString(localVarOptionals.MinCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCaffeine.IsSet() {
		localVarQueryParams.Add("maxCaffeine", parameterToString(localVarOptionals.MaxCaffeine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCopper.IsSet() {
		localVarQueryParams.Add("minCopper", parameterToString(localVarOptionals.MinCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCopper.IsSet() {
		localVarQueryParams.Add("maxCopper", parameterToString(localVarOptionals.MaxCopper.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCalcium.IsSet() {
		localVarQueryParams.Add("minCalcium", parameterToString(localVarOptionals.MinCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCalcium.IsSet() {
		localVarQueryParams.Add("maxCalcium", parameterToString(localVarOptionals.MaxCalcium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholine.IsSet() {
		localVarQueryParams.Add("minCholine", parameterToString(localVarOptionals.MinCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholine.IsSet() {
		localVarQueryParams.Add("maxCholine", parameterToString(localVarOptionals.MaxCholine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinCholesterol.IsSet() {
		localVarQueryParams.Add("minCholesterol", parameterToString(localVarOptionals.MinCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCholesterol.IsSet() {
		localVarQueryParams.Add("maxCholesterol", parameterToString(localVarOptionals.MaxCholesterol.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFluoride.IsSet() {
		localVarQueryParams.Add("minFluoride", parameterToString(localVarOptionals.MinFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFluoride.IsSet() {
		localVarQueryParams.Add("maxFluoride", parameterToString(localVarOptionals.MaxFluoride.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSaturatedFat.IsSet() {
		localVarQueryParams.Add("minSaturatedFat", parameterToString(localVarOptionals.MinSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSaturatedFat.IsSet() {
		localVarQueryParams.Add("maxSaturatedFat", parameterToString(localVarOptionals.MaxSaturatedFat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminA.IsSet() {
		localVarQueryParams.Add("minVitaminA", parameterToString(localVarOptionals.MinVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminA.IsSet() {
		localVarQueryParams.Add("maxVitaminA", parameterToString(localVarOptionals.MaxVitaminA.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminC.IsSet() {
		localVarQueryParams.Add("minVitaminC", parameterToString(localVarOptionals.MinVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminC.IsSet() {
		localVarQueryParams.Add("maxVitaminC", parameterToString(localVarOptionals.MaxVitaminC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminD.IsSet() {
		localVarQueryParams.Add("minVitaminD", parameterToString(localVarOptionals.MinVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminD.IsSet() {
		localVarQueryParams.Add("maxVitaminD", parameterToString(localVarOptionals.MaxVitaminD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminE.IsSet() {
		localVarQueryParams.Add("minVitaminE", parameterToString(localVarOptionals.MinVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminE.IsSet() {
		localVarQueryParams.Add("maxVitaminE", parameterToString(localVarOptionals.MaxVitaminE.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminK.IsSet() {
		localVarQueryParams.Add("minVitaminK", parameterToString(localVarOptionals.MinVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminK.IsSet() {
		localVarQueryParams.Add("maxVitaminK", parameterToString(localVarOptionals.MaxVitaminK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB1.IsSet() {
		localVarQueryParams.Add("minVitaminB1", parameterToString(localVarOptionals.MinVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB1.IsSet() {
		localVarQueryParams.Add("maxVitaminB1", parameterToString(localVarOptionals.MaxVitaminB1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB2.IsSet() {
		localVarQueryParams.Add("minVitaminB2", parameterToString(localVarOptionals.MinVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB2.IsSet() {
		localVarQueryParams.Add("maxVitaminB2", parameterToString(localVarOptionals.MaxVitaminB2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB5.IsSet() {
		localVarQueryParams.Add("minVitaminB5", parameterToString(localVarOptionals.MinVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB5.IsSet() {
		localVarQueryParams.Add("maxVitaminB5", parameterToString(localVarOptionals.MaxVitaminB5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB3.IsSet() {
		localVarQueryParams.Add("minVitaminB3", parameterToString(localVarOptionals.MinVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB3.IsSet() {
		localVarQueryParams.Add("maxVitaminB3", parameterToString(localVarOptionals.MaxVitaminB3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB6.IsSet() {
		localVarQueryParams.Add("minVitaminB6", parameterToString(localVarOptionals.MinVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB6.IsSet() {
		localVarQueryParams.Add("maxVitaminB6", parameterToString(localVarOptionals.MaxVitaminB6.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinVitaminB12.IsSet() {
		localVarQueryParams.Add("minVitaminB12", parameterToString(localVarOptionals.MinVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxVitaminB12.IsSet() {
		localVarQueryParams.Add("maxVitaminB12", parameterToString(localVarOptionals.MaxVitaminB12.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFiber.IsSet() {
		localVarQueryParams.Add("minFiber", parameterToString(localVarOptionals.MinFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFiber.IsSet() {
		localVarQueryParams.Add("maxFiber", parameterToString(localVarOptionals.MaxFiber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolate.IsSet() {
		localVarQueryParams.Add("minFolate", parameterToString(localVarOptionals.MinFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolate.IsSet() {
		localVarQueryParams.Add("maxFolate", parameterToString(localVarOptionals.MaxFolate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinFolicAcid.IsSet() {
		localVarQueryParams.Add("minFolicAcid", parameterToString(localVarOptionals.MinFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxFolicAcid.IsSet() {
		localVarQueryParams.Add("maxFolicAcid", parameterToString(localVarOptionals.MaxFolicAcid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIodine.IsSet() {
		localVarQueryParams.Add("minIodine", parameterToString(localVarOptionals.MinIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIodine.IsSet() {
		localVarQueryParams.Add("maxIodine", parameterToString(localVarOptionals.MaxIodine.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinIron.IsSet() {
		localVarQueryParams.Add("minIron", parameterToString(localVarOptionals.MinIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxIron.IsSet() {
		localVarQueryParams.Add("maxIron", parameterToString(localVarOptionals.MaxIron.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinMagnesium.IsSet() {
		localVarQueryParams.Add("minMagnesium", parameterToString(localVarOptionals.MinMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxMagnesium.IsSet() {
		localVarQueryParams.Add("maxMagnesium", parameterToString(localVarOptionals.MaxMagnesium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinManganese.IsSet() {
		localVarQueryParams.Add("minManganese", parameterToString(localVarOptionals.MinManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxManganese.IsSet() {
		localVarQueryParams.Add("maxManganese", parameterToString(localVarOptionals.MaxManganese.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPhosphorus.IsSet() {
		localVarQueryParams.Add("minPhosphorus", parameterToString(localVarOptionals.MinPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPhosphorus.IsSet() {
		localVarQueryParams.Add("maxPhosphorus", parameterToString(localVarOptionals.MaxPhosphorus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPotassium.IsSet() {
		localVarQueryParams.Add("minPotassium", parameterToString(localVarOptionals.MinPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPotassium.IsSet() {
		localVarQueryParams.Add("maxPotassium", parameterToString(localVarOptionals.MaxPotassium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSelenium.IsSet() {
		localVarQueryParams.Add("minSelenium", parameterToString(localVarOptionals.MinSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSelenium.IsSet() {
		localVarQueryParams.Add("maxSelenium", parameterToString(localVarOptionals.MaxSelenium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSodium.IsSet() {
		localVarQueryParams.Add("minSodium", parameterToString(localVarOptionals.MinSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSodium.IsSet() {
		localVarQueryParams.Add("maxSodium", parameterToString(localVarOptionals.MaxSodium.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinSugar.IsSet() {
		localVarQueryParams.Add("minSugar", parameterToString(localVarOptionals.MinSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxSugar.IsSet() {
		localVarQueryParams.Add("maxSugar", parameterToString(localVarOptionals.MaxSugar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinZinc.IsSet() {
		localVarQueryParams.Add("minZinc", parameterToString(localVarOptionals.MinZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxZinc.IsSet() {
		localVarQueryParams.Add("maxZinc", parameterToString(localVarOptionals.MaxZinc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Number.IsSet() {
		localVarQueryParams.Add("number", parameterToString(localVarOptionals.Number.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Random.IsSet() {
		localVarQueryParams.Add("random", parameterToString(localVarOptionals.Random.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LimitLicense.IsSet() {
		localVarQueryParams.Add("limitLicense", parameterToString(localVarOptionals.LimitLicense.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []InlineResponse2002
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Summarize Recipe
Automatically generate a short description that summarizes key information about the recipe.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
@return InlineResponse20014
*/
func (a *RecipesApiService) SummarizeRecipe(ctx context.Context, id int32) (InlineResponse20014, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20014
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20014
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Equipment Widget
Visualize the equipment used to make a recipe.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VisualizeEquipmentOpts - Optional Parameters:
 * @param "ContentType" (optional.String) -  The content type.
 * @param "Accept" (optional.String) -  Accept header.
@return string
*/

type VisualizeEquipmentOpts struct {
	ContentType optional.String
	Accept optional.String
}

func (a *RecipesApiService) VisualizeEquipment(ctx context.Context, localVarOptionals *VisualizeEquipmentOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeEquipment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.Accept.IsSet() {
		localVarHeaderParams["Accept"] = parameterToString(localVarOptionals.Accept.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Price Breakdown Widget
Visualize the price breakdown of a recipe.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VisualizePriceBreakdownOpts - Optional Parameters:
 * @param "ContentType" (optional.String) -  The content type.
 * @param "Accept" (optional.String) -  Accept header.
 * @param "Language" (optional.String) -  The language of the input. Either 'en' or 'de'.
@return string
*/

type VisualizePriceBreakdownOpts struct {
	ContentType optional.String
	Accept optional.String
	Language optional.String
}

func (a *RecipesApiService) VisualizePriceBreakdown(ctx context.Context, localVarOptionals *VisualizePriceBreakdownOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizePriceEstimator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Language.IsSet() {
		localVarQueryParams.Add("language", parameterToString(localVarOptionals.Language.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.Accept.IsSet() {
		localVarHeaderParams["Accept"] = parameterToString(localVarOptionals.Accept.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Equipment by ID Widget
Visualize a recipe&#39;s equipment list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *VisualizeRecipeEquipmentByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeRecipeEquipmentByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *RecipesApiService) VisualizeRecipeEquipmentByID(ctx context.Context, id int32, localVarOptionals *VisualizeRecipeEquipmentByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/equipmentWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Ingredients by ID Widget
Visualize a recipe&#39;s ingredient list.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *VisualizeRecipeIngredientsByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
 * @param "Measure" (optional.String) -  Whether the the measures should be 'us' or 'metric'.
@return string
*/

type VisualizeRecipeIngredientsByIDOpts struct {
	DefaultCss optional.Bool
	Measure optional.String
}

func (a *RecipesApiService) VisualizeRecipeIngredientsByID(ctx context.Context, id int32, localVarOptionals *VisualizeRecipeIngredientsByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/ingredientWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Measure.IsSet() {
		localVarQueryParams.Add("measure", parameterToString(localVarOptionals.Measure.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Nutrition Widget
Visualize a recipe&#39;s nutritional information as HTML including CSS.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VisualizeRecipeNutritionOpts - Optional Parameters:
 * @param "ContentType" (optional.String) -  The content type.
 * @param "Accept" (optional.String) -  Accept header.
 * @param "Language" (optional.String) -  The language of the input. Either 'en' or 'de'.
@return string
*/

type VisualizeRecipeNutritionOpts struct {
	ContentType optional.String
	Accept optional.String
	Language optional.String
}

func (a *RecipesApiService) VisualizeRecipeNutrition(ctx context.Context, localVarOptionals *VisualizeRecipeNutritionOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeNutrition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Language.IsSet() {
		localVarQueryParams.Add("language", parameterToString(localVarOptionals.Language.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.Accept.IsSet() {
		localVarHeaderParams["Accept"] = parameterToString(localVarOptionals.Accept.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Nutrition by ID Widget
Visualize a recipe&#39;s nutritional information as HTML including CSS.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *VisualizeRecipeNutritionByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
 * @param "Accept" (optional.String) -  Accept header.
@return string
*/

type VisualizeRecipeNutritionByIDOpts struct {
	DefaultCss optional.Bool
	Accept optional.String
}

func (a *RecipesApiService) VisualizeRecipeNutritionByID(ctx context.Context, id int32, localVarOptionals *VisualizeRecipeNutritionByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/nutritionWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Accept.IsSet() {
		localVarHeaderParams["Accept"] = parameterToString(localVarOptionals.Accept.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Price Breakdown by ID Widget
Visualize a recipe&#39;s price breakdown.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *VisualizeRecipePriceBreakdownByIDOpts - Optional Parameters:
 * @param "DefaultCss" (optional.Bool) -  Whether the default CSS should be added to the response.
@return string
*/

type VisualizeRecipePriceBreakdownByIDOpts struct {
	DefaultCss optional.Bool
}

func (a *RecipesApiService) VisualizeRecipePriceBreakdownByID(ctx context.Context, id int32, localVarOptionals *VisualizeRecipePriceBreakdownByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/priceBreakdownWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.DefaultCss.IsSet() {
		localVarQueryParams.Add("defaultCss", parameterToString(localVarOptionals.DefaultCss.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Taste Widget
Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VisualizeRecipeTasteOpts - Optional Parameters:
 * @param "Language" (optional.String) -  The language of the input. Either 'en' or 'de'.
 * @param "ContentType" (optional.String) -  The content type.
 * @param "Accept" (optional.String) -  Accept header.
 * @param "Normalize" (optional.Bool) -  Whether to normalize to the strongest taste.
 * @param "Rgb" (optional.String) -  Red, green, blue values for the chart color.
@return string
*/

type VisualizeRecipeTasteOpts struct {
	Language optional.String
	ContentType optional.String
	Accept optional.String
	Normalize optional.Bool
	Rgb optional.String
}

func (a *RecipesApiService) VisualizeRecipeTaste(ctx context.Context, localVarOptionals *VisualizeRecipeTasteOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/visualizeTaste"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Language.IsSet() {
		localVarQueryParams.Add("language", parameterToString(localVarOptionals.Language.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Normalize.IsSet() {
		localVarQueryParams.Add("normalize", parameterToString(localVarOptionals.Normalize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rgb.IsSet() {
		localVarQueryParams.Add("rgb", parameterToString(localVarOptionals.Rgb.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.Accept.IsSet() {
		localVarHeaderParams["Accept"] = parameterToString(localVarOptionals.Accept.Value(), "")
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RecipesApiService Recipe Taste by ID Widget
Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The item's id.
 * @param optional nil or *VisualizeRecipeTasteByIDOpts - Optional Parameters:
 * @param "Normalize" (optional.Bool) -  Whether to normalize to the strongest taste.
 * @param "Rgb" (optional.String) -  Red, green, blue values for the chart color.
@return string
*/

type VisualizeRecipeTasteByIDOpts struct {
	Normalize optional.Bool
	Rgb optional.String
}

func (a *RecipesApiService) VisualizeRecipeTasteByID(ctx context.Context, id int32, localVarOptionals *VisualizeRecipeTasteByIDOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/recipes/{id}/tasteWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Normalize.IsSet() {
		localVarQueryParams.Add("normalize", parameterToString(localVarOptionals.Normalize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rgb.IsSet() {
		localVarQueryParams.Add("rgb", parameterToString(localVarOptionals.Rgb.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("apiKey", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
